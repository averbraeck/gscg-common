/*
 * This file is generated by jOOQ.
 */
package org.gscg.data;


import org.gscg.data.tables.Actor;
import org.gscg.data.tables.ActorParameter;
import org.gscg.data.tables.ActorType;
import org.gscg.data.tables.ActorValue;
import org.gscg.data.tables.AllowedStrategy;
import org.gscg.data.tables.AllowedStrategyCategory;
import org.gscg.data.tables.AllowedStrategyList;
import org.gscg.data.tables.BillOfMaterials;
import org.gscg.data.tables.BomItem;
import org.gscg.data.tables.ChatMessage;
import org.gscg.data.tables.ChosenStrategy;
import org.gscg.data.tables.ContentReceiver;
import org.gscg.data.tables.ContentType;
import org.gscg.data.tables.Event;
import org.gscg.data.tables.ExtraEvent;
import org.gscg.data.tables.ExtraNewsMessage;
import org.gscg.data.tables.Game;
import org.gscg.data.tables.GameRole;
import org.gscg.data.tables.GameScenario;
import org.gscg.data.tables.GameSession;
import org.gscg.data.tables.GameSessionGoal;
import org.gscg.data.tables.GameSessionRole;
import org.gscg.data.tables.GameVersion;
import org.gscg.data.tables.GameVersionGoal;
import org.gscg.data.tables.Goal;
import org.gscg.data.tables.HandledSku;
import org.gscg.data.tables.Handler;
import org.gscg.data.tables.HandlerParameter;
import org.gscg.data.tables.HandlerType;
import org.gscg.data.tables.HandlerValidActor;
import org.gscg.data.tables.HandlerValidActorType;
import org.gscg.data.tables.HandlerValidProduct;
import org.gscg.data.tables.HandlerValue;
import org.gscg.data.tables.Landmass;
import org.gscg.data.tables.ListPage;
import org.gscg.data.tables.Location;
import org.gscg.data.tables.NewsActor;
import org.gscg.data.tables.NewsActorType;
import org.gscg.data.tables.NewsMessage;
import org.gscg.data.tables.Organization;
import org.gscg.data.tables.OrganizationGame;
import org.gscg.data.tables.OrganizationGameRole;
import org.gscg.data.tables.OrganizationRole;
import org.gscg.data.tables.Page;
import org.gscg.data.tables.PageList;
import org.gscg.data.tables.ParameterType;
import org.gscg.data.tables.Player;
import org.gscg.data.tables.PlayerDecision;
import org.gscg.data.tables.PlayerScore;
import org.gscg.data.tables.Process;
import org.gscg.data.tables.ProcessParameter;
import org.gscg.data.tables.ProcessType;
import org.gscg.data.tables.ProcessValue;
import org.gscg.data.tables.Product;
import org.gscg.data.tables.Role;
import org.gscg.data.tables.RoleParameter;
import org.gscg.data.tables.RoleType;
import org.gscg.data.tables.RoleValue;
import org.gscg.data.tables.SentContent;
import org.gscg.data.tables.Sku;
import org.gscg.data.tables.Transfer;
import org.gscg.data.tables.TransportMode;
import org.gscg.data.tables.TriggerFixed;
import org.gscg.data.tables.TriggerInterval;
import org.gscg.data.tables.TriggeredEvent;
import org.gscg.data.tables.TriggeredNewsMessage;
import org.gscg.data.tables.TriggeredProcess;
import org.gscg.data.tables.User;
import org.gscg.data.tables.records.ActorParameterRecord;
import org.gscg.data.tables.records.ActorRecord;
import org.gscg.data.tables.records.ActorTypeRecord;
import org.gscg.data.tables.records.ActorValueRecord;
import org.gscg.data.tables.records.AllowedStrategyCategoryRecord;
import org.gscg.data.tables.records.AllowedStrategyListRecord;
import org.gscg.data.tables.records.AllowedStrategyRecord;
import org.gscg.data.tables.records.BillOfMaterialsRecord;
import org.gscg.data.tables.records.BomItemRecord;
import org.gscg.data.tables.records.ChatMessageRecord;
import org.gscg.data.tables.records.ChosenStrategyRecord;
import org.gscg.data.tables.records.ContentReceiverRecord;
import org.gscg.data.tables.records.ContentTypeRecord;
import org.gscg.data.tables.records.EventRecord;
import org.gscg.data.tables.records.ExtraEventRecord;
import org.gscg.data.tables.records.ExtraNewsMessageRecord;
import org.gscg.data.tables.records.GameRecord;
import org.gscg.data.tables.records.GameRoleRecord;
import org.gscg.data.tables.records.GameScenarioRecord;
import org.gscg.data.tables.records.GameSessionGoalRecord;
import org.gscg.data.tables.records.GameSessionRecord;
import org.gscg.data.tables.records.GameSessionRoleRecord;
import org.gscg.data.tables.records.GameVersionGoalRecord;
import org.gscg.data.tables.records.GameVersionRecord;
import org.gscg.data.tables.records.GoalRecord;
import org.gscg.data.tables.records.HandledSkuRecord;
import org.gscg.data.tables.records.HandlerParameterRecord;
import org.gscg.data.tables.records.HandlerRecord;
import org.gscg.data.tables.records.HandlerTypeRecord;
import org.gscg.data.tables.records.HandlerValidActorRecord;
import org.gscg.data.tables.records.HandlerValidActorTypeRecord;
import org.gscg.data.tables.records.HandlerValidProductRecord;
import org.gscg.data.tables.records.HandlerValueRecord;
import org.gscg.data.tables.records.LandmassRecord;
import org.gscg.data.tables.records.ListPageRecord;
import org.gscg.data.tables.records.LocationRecord;
import org.gscg.data.tables.records.NewsActorRecord;
import org.gscg.data.tables.records.NewsActorTypeRecord;
import org.gscg.data.tables.records.NewsMessageRecord;
import org.gscg.data.tables.records.OrganizationGameRecord;
import org.gscg.data.tables.records.OrganizationGameRoleRecord;
import org.gscg.data.tables.records.OrganizationRecord;
import org.gscg.data.tables.records.OrganizationRoleRecord;
import org.gscg.data.tables.records.PageListRecord;
import org.gscg.data.tables.records.PageRecord;
import org.gscg.data.tables.records.ParameterTypeRecord;
import org.gscg.data.tables.records.PlayerDecisionRecord;
import org.gscg.data.tables.records.PlayerRecord;
import org.gscg.data.tables.records.PlayerScoreRecord;
import org.gscg.data.tables.records.ProcessParameterRecord;
import org.gscg.data.tables.records.ProcessRecord;
import org.gscg.data.tables.records.ProcessTypeRecord;
import org.gscg.data.tables.records.ProcessValueRecord;
import org.gscg.data.tables.records.ProductRecord;
import org.gscg.data.tables.records.RoleParameterRecord;
import org.gscg.data.tables.records.RoleRecord;
import org.gscg.data.tables.records.RoleTypeRecord;
import org.gscg.data.tables.records.RoleValueRecord;
import org.gscg.data.tables.records.SentContentRecord;
import org.gscg.data.tables.records.SkuRecord;
import org.gscg.data.tables.records.TransferRecord;
import org.gscg.data.tables.records.TransportModeRecord;
import org.gscg.data.tables.records.TriggerFixedRecord;
import org.gscg.data.tables.records.TriggerIntervalRecord;
import org.gscg.data.tables.records.TriggeredEventRecord;
import org.gscg.data.tables.records.TriggeredNewsMessageRecord;
import org.gscg.data.tables.records.TriggeredProcessRecord;
import org.gscg.data.tables.records.UserRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * gscg.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ActorRecord> KEY_ACTOR_ID_UNIQUE = Internal.createUniqueKey(Actor.ACTOR, DSL.name("KEY_actor_id_UNIQUE"), new TableField[] { Actor.ACTOR.ID }, true);
    public static final UniqueKey<ActorRecord> KEY_ACTOR_PRIMARY = Internal.createUniqueKey(Actor.ACTOR, DSL.name("KEY_actor_PRIMARY"), new TableField[] { Actor.ACTOR.ID }, true);
    public static final UniqueKey<ActorParameterRecord> KEY_ACTOR_PARAMETER_ID_UNIQUE = Internal.createUniqueKey(ActorParameter.ACTOR_PARAMETER, DSL.name("KEY_actor_parameter_id_UNIQUE"), new TableField[] { ActorParameter.ACTOR_PARAMETER.ID }, true);
    public static final UniqueKey<ActorParameterRecord> KEY_ACTOR_PARAMETER_PRIMARY = Internal.createUniqueKey(ActorParameter.ACTOR_PARAMETER, DSL.name("KEY_actor_parameter_PRIMARY"), new TableField[] { ActorParameter.ACTOR_PARAMETER.ID }, true);
    public static final UniqueKey<ActorTypeRecord> KEY_ACTOR_TYPE_ID_UNIQUE = Internal.createUniqueKey(ActorType.ACTOR_TYPE, DSL.name("KEY_actor_type_id_UNIQUE"), new TableField[] { ActorType.ACTOR_TYPE.ID }, true);
    public static final UniqueKey<ActorTypeRecord> KEY_ACTOR_TYPE_PRIMARY = Internal.createUniqueKey(ActorType.ACTOR_TYPE, DSL.name("KEY_actor_type_PRIMARY"), new TableField[] { ActorType.ACTOR_TYPE.ID }, true);
    public static final UniqueKey<ActorValueRecord> KEY_ACTOR_VALUE_ID_UNIQUE = Internal.createUniqueKey(ActorValue.ACTOR_VALUE, DSL.name("KEY_actor_value_id_UNIQUE"), new TableField[] { ActorValue.ACTOR_VALUE.ID }, true);
    public static final UniqueKey<ActorValueRecord> KEY_ACTOR_VALUE_PRIMARY = Internal.createUniqueKey(ActorValue.ACTOR_VALUE, DSL.name("KEY_actor_value_PRIMARY"), new TableField[] { ActorValue.ACTOR_VALUE.ID }, true);
    public static final UniqueKey<AllowedStrategyRecord> KEY_ALLOWED_STRATEGY_ID_UNIQUE = Internal.createUniqueKey(AllowedStrategy.ALLOWED_STRATEGY, DSL.name("KEY_allowed_strategy_id_UNIQUE"), new TableField[] { AllowedStrategy.ALLOWED_STRATEGY.ID }, true);
    public static final UniqueKey<AllowedStrategyRecord> KEY_ALLOWED_STRATEGY_PRIMARY = Internal.createUniqueKey(AllowedStrategy.ALLOWED_STRATEGY, DSL.name("KEY_allowed_strategy_PRIMARY"), new TableField[] { AllowedStrategy.ALLOWED_STRATEGY.ID }, true);
    public static final UniqueKey<AllowedStrategyCategoryRecord> KEY_ALLOWED_STRATEGY_CATEGORY_ID_UNIQUE = Internal.createUniqueKey(AllowedStrategyCategory.ALLOWED_STRATEGY_CATEGORY, DSL.name("KEY_allowed_strategy_category_id_UNIQUE"), new TableField[] { AllowedStrategyCategory.ALLOWED_STRATEGY_CATEGORY.ID }, true);
    public static final UniqueKey<AllowedStrategyCategoryRecord> KEY_ALLOWED_STRATEGY_CATEGORY_PRIMARY = Internal.createUniqueKey(AllowedStrategyCategory.ALLOWED_STRATEGY_CATEGORY, DSL.name("KEY_allowed_strategy_category_PRIMARY"), new TableField[] { AllowedStrategyCategory.ALLOWED_STRATEGY_CATEGORY.ID }, true);
    public static final UniqueKey<AllowedStrategyListRecord> KEY_ALLOWED_STRATEGY_LIST_ID_UNIQUE = Internal.createUniqueKey(AllowedStrategyList.ALLOWED_STRATEGY_LIST, DSL.name("KEY_allowed_strategy_list_id_UNIQUE"), new TableField[] { AllowedStrategyList.ALLOWED_STRATEGY_LIST.ID }, true);
    public static final UniqueKey<AllowedStrategyListRecord> KEY_ALLOWED_STRATEGY_LIST_PRIMARY = Internal.createUniqueKey(AllowedStrategyList.ALLOWED_STRATEGY_LIST, DSL.name("KEY_allowed_strategy_list_PRIMARY"), new TableField[] { AllowedStrategyList.ALLOWED_STRATEGY_LIST.ID }, true);
    public static final UniqueKey<BillOfMaterialsRecord> KEY_BILL_OF_MATERIALS_ID_UNIQUE = Internal.createUniqueKey(BillOfMaterials.BILL_OF_MATERIALS, DSL.name("KEY_bill_of_materials_id_UNIQUE"), new TableField[] { BillOfMaterials.BILL_OF_MATERIALS.ID }, true);
    public static final UniqueKey<BillOfMaterialsRecord> KEY_BILL_OF_MATERIALS_PRIMARY = Internal.createUniqueKey(BillOfMaterials.BILL_OF_MATERIALS, DSL.name("KEY_bill_of_materials_PRIMARY"), new TableField[] { BillOfMaterials.BILL_OF_MATERIALS.ID }, true);
    public static final UniqueKey<BomItemRecord> KEY_BOM_ITEM_ID_UNIQUE = Internal.createUniqueKey(BomItem.BOM_ITEM, DSL.name("KEY_bom_item_id_UNIQUE"), new TableField[] { BomItem.BOM_ITEM.ID }, true);
    public static final UniqueKey<BomItemRecord> KEY_BOM_ITEM_PRIMARY = Internal.createUniqueKey(BomItem.BOM_ITEM, DSL.name("KEY_bom_item_PRIMARY"), new TableField[] { BomItem.BOM_ITEM.ID }, true);
    public static final UniqueKey<ChatMessageRecord> KEY_CHAT_MESSAGE_ID_UNIQUE = Internal.createUniqueKey(ChatMessage.CHAT_MESSAGE, DSL.name("KEY_chat_message_id_UNIQUE"), new TableField[] { ChatMessage.CHAT_MESSAGE.ID }, true);
    public static final UniqueKey<ChatMessageRecord> KEY_CHAT_MESSAGE_PRIMARY = Internal.createUniqueKey(ChatMessage.CHAT_MESSAGE, DSL.name("KEY_chat_message_PRIMARY"), new TableField[] { ChatMessage.CHAT_MESSAGE.ID }, true);
    public static final UniqueKey<ChosenStrategyRecord> KEY_CHOSEN_STRATEGY_ID_UNIQUE = Internal.createUniqueKey(ChosenStrategy.CHOSEN_STRATEGY, DSL.name("KEY_chosen_strategy_id_UNIQUE"), new TableField[] { ChosenStrategy.CHOSEN_STRATEGY.ID }, true);
    public static final UniqueKey<ChosenStrategyRecord> KEY_CHOSEN_STRATEGY_PRIMARY = Internal.createUniqueKey(ChosenStrategy.CHOSEN_STRATEGY, DSL.name("KEY_chosen_strategy_PRIMARY"), new TableField[] { ChosenStrategy.CHOSEN_STRATEGY.ID }, true);
    public static final UniqueKey<ContentReceiverRecord> KEY_CONTENT_RECEIVER_ID_UNIQUE = Internal.createUniqueKey(ContentReceiver.CONTENT_RECEIVER, DSL.name("KEY_content_receiver_id_UNIQUE"), new TableField[] { ContentReceiver.CONTENT_RECEIVER.ID }, true);
    public static final UniqueKey<ContentReceiverRecord> KEY_CONTENT_RECEIVER_PRIMARY = Internal.createUniqueKey(ContentReceiver.CONTENT_RECEIVER, DSL.name("KEY_content_receiver_PRIMARY"), new TableField[] { ContentReceiver.CONTENT_RECEIVER.ID }, true);
    public static final UniqueKey<ContentTypeRecord> KEY_CONTENT_TYPE_ID_UNIQUE = Internal.createUniqueKey(ContentType.CONTENT_TYPE, DSL.name("KEY_content_type_id_UNIQUE"), new TableField[] { ContentType.CONTENT_TYPE.ID }, true);
    public static final UniqueKey<ContentTypeRecord> KEY_CONTENT_TYPE_PRIMARY = Internal.createUniqueKey(ContentType.CONTENT_TYPE, DSL.name("KEY_content_type_PRIMARY"), new TableField[] { ContentType.CONTENT_TYPE.ID }, true);
    public static final UniqueKey<EventRecord> KEY_EVENT_ID_UNIQUE = Internal.createUniqueKey(Event.EVENT, DSL.name("KEY_event_id_UNIQUE"), new TableField[] { Event.EVENT.ID }, true);
    public static final UniqueKey<EventRecord> KEY_EVENT_PRIMARY = Internal.createUniqueKey(Event.EVENT, DSL.name("KEY_event_PRIMARY"), new TableField[] { Event.EVENT.ID }, true);
    public static final UniqueKey<ExtraEventRecord> KEY_EXTRA_EVENT_ID_UNIQUE = Internal.createUniqueKey(ExtraEvent.EXTRA_EVENT, DSL.name("KEY_extra_event_id_UNIQUE"), new TableField[] { ExtraEvent.EXTRA_EVENT.ID }, true);
    public static final UniqueKey<ExtraEventRecord> KEY_EXTRA_EVENT_PRIMARY = Internal.createUniqueKey(ExtraEvent.EXTRA_EVENT, DSL.name("KEY_extra_event_PRIMARY"), new TableField[] { ExtraEvent.EXTRA_EVENT.ID }, true);
    public static final UniqueKey<ExtraNewsMessageRecord> KEY_EXTRA_NEWS_MESSAGE_ID_UNIQUE = Internal.createUniqueKey(ExtraNewsMessage.EXTRA_NEWS_MESSAGE, DSL.name("KEY_extra_news_message_id_UNIQUE"), new TableField[] { ExtraNewsMessage.EXTRA_NEWS_MESSAGE.ID }, true);
    public static final UniqueKey<ExtraNewsMessageRecord> KEY_EXTRA_NEWS_MESSAGE_PRIMARY = Internal.createUniqueKey(ExtraNewsMessage.EXTRA_NEWS_MESSAGE, DSL.name("KEY_extra_news_message_PRIMARY"), new TableField[] { ExtraNewsMessage.EXTRA_NEWS_MESSAGE.ID }, true);
    public static final UniqueKey<GameRecord> KEY_GAME_ID_UNIQUE = Internal.createUniqueKey(Game.GAME, DSL.name("KEY_game_id_UNIQUE"), new TableField[] { Game.GAME.ID }, true);
    public static final UniqueKey<GameRecord> KEY_GAME_PRIMARY = Internal.createUniqueKey(Game.GAME, DSL.name("KEY_game_PRIMARY"), new TableField[] { Game.GAME.ID }, true);
    public static final UniqueKey<GameRoleRecord> KEY_GAME_ROLE_ID_UNIQUE = Internal.createUniqueKey(GameRole.GAME_ROLE, DSL.name("KEY_game_role_id_UNIQUE"), new TableField[] { GameRole.GAME_ROLE.ID }, true);
    public static final UniqueKey<GameRoleRecord> KEY_GAME_ROLE_PRIMARY = Internal.createUniqueKey(GameRole.GAME_ROLE, DSL.name("KEY_game_role_PRIMARY"), new TableField[] { GameRole.GAME_ROLE.ID }, true);
    public static final UniqueKey<GameScenarioRecord> KEY_GAME_SCENARIO_ID_UNIQUE = Internal.createUniqueKey(GameScenario.GAME_SCENARIO, DSL.name("KEY_game_scenario_id_UNIQUE"), new TableField[] { GameScenario.GAME_SCENARIO.ID }, true);
    public static final UniqueKey<GameScenarioRecord> KEY_GAME_SCENARIO_PRIMARY = Internal.createUniqueKey(GameScenario.GAME_SCENARIO, DSL.name("KEY_game_scenario_PRIMARY"), new TableField[] { GameScenario.GAME_SCENARIO.ID }, true);
    public static final UniqueKey<GameSessionRecord> KEY_GAME_SESSION_ID_UNIQUE = Internal.createUniqueKey(GameSession.GAME_SESSION, DSL.name("KEY_game_session_id_UNIQUE"), new TableField[] { GameSession.GAME_SESSION.ID }, true);
    public static final UniqueKey<GameSessionRecord> KEY_GAME_SESSION_PRIMARY = Internal.createUniqueKey(GameSession.GAME_SESSION, DSL.name("KEY_game_session_PRIMARY"), new TableField[] { GameSession.GAME_SESSION.ID }, true);
    public static final UniqueKey<GameSessionGoalRecord> KEY_GAME_SESSION_GOAL_ID_UNIQUE = Internal.createUniqueKey(GameSessionGoal.GAME_SESSION_GOAL, DSL.name("KEY_game_session_goal_id_UNIQUE"), new TableField[] { GameSessionGoal.GAME_SESSION_GOAL.ID }, true);
    public static final UniqueKey<GameSessionGoalRecord> KEY_GAME_SESSION_GOAL_PRIMARY = Internal.createUniqueKey(GameSessionGoal.GAME_SESSION_GOAL, DSL.name("KEY_game_session_goal_PRIMARY"), new TableField[] { GameSessionGoal.GAME_SESSION_GOAL.ID }, true);
    public static final UniqueKey<GameSessionRoleRecord> KEY_GAME_SESSION_ROLE_ID_UNIQUE = Internal.createUniqueKey(GameSessionRole.GAME_SESSION_ROLE, DSL.name("KEY_game_session_role_id_UNIQUE"), new TableField[] { GameSessionRole.GAME_SESSION_ROLE.ID }, true);
    public static final UniqueKey<GameSessionRoleRecord> KEY_GAME_SESSION_ROLE_PRIMARY = Internal.createUniqueKey(GameSessionRole.GAME_SESSION_ROLE, DSL.name("KEY_game_session_role_PRIMARY"), new TableField[] { GameSessionRole.GAME_SESSION_ROLE.ID }, true);
    public static final UniqueKey<GameVersionRecord> KEY_GAME_VERSION_ID_UNIQUE = Internal.createUniqueKey(GameVersion.GAME_VERSION, DSL.name("KEY_game_version_id_UNIQUE"), new TableField[] { GameVersion.GAME_VERSION.ID }, true);
    public static final UniqueKey<GameVersionRecord> KEY_GAME_VERSION_PRIMARY = Internal.createUniqueKey(GameVersion.GAME_VERSION, DSL.name("KEY_game_version_PRIMARY"), new TableField[] { GameVersion.GAME_VERSION.ID }, true);
    public static final UniqueKey<GameVersionGoalRecord> KEY_GAME_VERSION_GOAL_ID_UNIQUE = Internal.createUniqueKey(GameVersionGoal.GAME_VERSION_GOAL, DSL.name("KEY_game_version_goal_id_UNIQUE"), new TableField[] { GameVersionGoal.GAME_VERSION_GOAL.ID }, true);
    public static final UniqueKey<GameVersionGoalRecord> KEY_GAME_VERSION_GOAL_PRIMARY = Internal.createUniqueKey(GameVersionGoal.GAME_VERSION_GOAL, DSL.name("KEY_game_version_goal_PRIMARY"), new TableField[] { GameVersionGoal.GAME_VERSION_GOAL.ID }, true);
    public static final UniqueKey<GoalRecord> KEY_GOAL_ID_UNIQUE = Internal.createUniqueKey(Goal.GOAL, DSL.name("KEY_goal_id_UNIQUE"), new TableField[] { Goal.GOAL.ID }, true);
    public static final UniqueKey<GoalRecord> KEY_GOAL_PRIMARY = Internal.createUniqueKey(Goal.GOAL, DSL.name("KEY_goal_PRIMARY"), new TableField[] { Goal.GOAL.ID }, true);
    public static final UniqueKey<HandledSkuRecord> KEY_HANDLED_SKU_ID_UNIQUE = Internal.createUniqueKey(HandledSku.HANDLED_SKU, DSL.name("KEY_handled_sku_id_UNIQUE"), new TableField[] { HandledSku.HANDLED_SKU.ID }, true);
    public static final UniqueKey<HandledSkuRecord> KEY_HANDLED_SKU_PRIMARY = Internal.createUniqueKey(HandledSku.HANDLED_SKU, DSL.name("KEY_handled_sku_PRIMARY"), new TableField[] { HandledSku.HANDLED_SKU.ID }, true);
    public static final UniqueKey<HandlerRecord> KEY_HANDLER_ID_UNIQUE = Internal.createUniqueKey(Handler.HANDLER, DSL.name("KEY_handler_id_UNIQUE"), new TableField[] { Handler.HANDLER.ID }, true);
    public static final UniqueKey<HandlerRecord> KEY_HANDLER_PRIMARY = Internal.createUniqueKey(Handler.HANDLER, DSL.name("KEY_handler_PRIMARY"), new TableField[] { Handler.HANDLER.ID }, true);
    public static final UniqueKey<HandlerParameterRecord> KEY_HANDLER_PARAMETER_ID_UNIQUE = Internal.createUniqueKey(HandlerParameter.HANDLER_PARAMETER, DSL.name("KEY_handler_parameter_id_UNIQUE"), new TableField[] { HandlerParameter.HANDLER_PARAMETER.ID }, true);
    public static final UniqueKey<HandlerParameterRecord> KEY_HANDLER_PARAMETER_PRIMARY = Internal.createUniqueKey(HandlerParameter.HANDLER_PARAMETER, DSL.name("KEY_handler_parameter_PRIMARY"), new TableField[] { HandlerParameter.HANDLER_PARAMETER.ID }, true);
    public static final UniqueKey<HandlerTypeRecord> KEY_HANDLER_TYPE_ID_UNIQUE = Internal.createUniqueKey(HandlerType.HANDLER_TYPE, DSL.name("KEY_handler_type_id_UNIQUE"), new TableField[] { HandlerType.HANDLER_TYPE.ID }, true);
    public static final UniqueKey<HandlerTypeRecord> KEY_HANDLER_TYPE_PRIMARY = Internal.createUniqueKey(HandlerType.HANDLER_TYPE, DSL.name("KEY_handler_type_PRIMARY"), new TableField[] { HandlerType.HANDLER_TYPE.ID }, true);
    public static final UniqueKey<HandlerValidActorRecord> KEY_HANDLER_VALID_ACTOR_ID_UNIQUE = Internal.createUniqueKey(HandlerValidActor.HANDLER_VALID_ACTOR, DSL.name("KEY_handler_valid_actor_id_UNIQUE"), new TableField[] { HandlerValidActor.HANDLER_VALID_ACTOR.ID }, true);
    public static final UniqueKey<HandlerValidActorRecord> KEY_HANDLER_VALID_ACTOR_PRIMARY = Internal.createUniqueKey(HandlerValidActor.HANDLER_VALID_ACTOR, DSL.name("KEY_handler_valid_actor_PRIMARY"), new TableField[] { HandlerValidActor.HANDLER_VALID_ACTOR.ID }, true);
    public static final UniqueKey<HandlerValidActorTypeRecord> KEY_HANDLER_VALID_ACTOR_TYPE_ID_UNIQUE = Internal.createUniqueKey(HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE, DSL.name("KEY_handler_valid_actor_type_id_UNIQUE"), new TableField[] { HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE.ID }, true);
    public static final UniqueKey<HandlerValidActorTypeRecord> KEY_HANDLER_VALID_ACTOR_TYPE_PRIMARY = Internal.createUniqueKey(HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE, DSL.name("KEY_handler_valid_actor_type_PRIMARY"), new TableField[] { HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE.ID }, true);
    public static final UniqueKey<HandlerValidProductRecord> KEY_HANDLER_VALID_PRODUCT_ID_UNIQUE = Internal.createUniqueKey(HandlerValidProduct.HANDLER_VALID_PRODUCT, DSL.name("KEY_handler_valid_product_id_UNIQUE"), new TableField[] { HandlerValidProduct.HANDLER_VALID_PRODUCT.ID }, true);
    public static final UniqueKey<HandlerValidProductRecord> KEY_HANDLER_VALID_PRODUCT_PRIMARY = Internal.createUniqueKey(HandlerValidProduct.HANDLER_VALID_PRODUCT, DSL.name("KEY_handler_valid_product_PRIMARY"), new TableField[] { HandlerValidProduct.HANDLER_VALID_PRODUCT.ID }, true);
    public static final UniqueKey<HandlerValueRecord> KEY_HANDLER_VALUE_ID_UNIQUE = Internal.createUniqueKey(HandlerValue.HANDLER_VALUE, DSL.name("KEY_handler_value_id_UNIQUE"), new TableField[] { HandlerValue.HANDLER_VALUE.ID }, true);
    public static final UniqueKey<HandlerValueRecord> KEY_HANDLER_VALUE_PRIMARY = Internal.createUniqueKey(HandlerValue.HANDLER_VALUE, DSL.name("KEY_handler_value_PRIMARY"), new TableField[] { HandlerValue.HANDLER_VALUE.ID }, true);
    public static final UniqueKey<LandmassRecord> KEY_LANDMASS_ID_UNIQUE = Internal.createUniqueKey(Landmass.LANDMASS, DSL.name("KEY_landmass_id_UNIQUE"), new TableField[] { Landmass.LANDMASS.ID }, true);
    public static final UniqueKey<LandmassRecord> KEY_LANDMASS_PRIMARY = Internal.createUniqueKey(Landmass.LANDMASS, DSL.name("KEY_landmass_PRIMARY"), new TableField[] { Landmass.LANDMASS.ID }, true);
    public static final UniqueKey<ListPageRecord> KEY_LIST_PAGE_ID_UNIQUE = Internal.createUniqueKey(ListPage.LIST_PAGE, DSL.name("KEY_list_page_id_UNIQUE"), new TableField[] { ListPage.LIST_PAGE.ID }, true);
    public static final UniqueKey<ListPageRecord> KEY_LIST_PAGE_PRIMARY = Internal.createUniqueKey(ListPage.LIST_PAGE, DSL.name("KEY_list_page_PRIMARY"), new TableField[] { ListPage.LIST_PAGE.ID }, true);
    public static final UniqueKey<LocationRecord> KEY_LOCATION_ID_UNIQUE = Internal.createUniqueKey(Location.LOCATION, DSL.name("KEY_location_id_UNIQUE"), new TableField[] { Location.LOCATION.ID }, true);
    public static final UniqueKey<LocationRecord> KEY_LOCATION_PRIMARY = Internal.createUniqueKey(Location.LOCATION, DSL.name("KEY_location_PRIMARY"), new TableField[] { Location.LOCATION.ID }, true);
    public static final UniqueKey<NewsActorRecord> KEY_NEWS_ACTOR_D_UNIQUE = Internal.createUniqueKey(NewsActor.NEWS_ACTOR, DSL.name("KEY_news_actor_d_UNIQUE"), new TableField[] { NewsActor.NEWS_ACTOR.ID }, true);
    public static final UniqueKey<NewsActorRecord> KEY_NEWS_ACTOR_PRIMARY = Internal.createUniqueKey(NewsActor.NEWS_ACTOR, DSL.name("KEY_news_actor_PRIMARY"), new TableField[] { NewsActor.NEWS_ACTOR.ID }, true);
    public static final UniqueKey<NewsActorTypeRecord> KEY_NEWS_ACTOR_TYPE_D_UNIQUE = Internal.createUniqueKey(NewsActorType.NEWS_ACTOR_TYPE, DSL.name("KEY_news_actor_type_d_UNIQUE"), new TableField[] { NewsActorType.NEWS_ACTOR_TYPE.ID }, true);
    public static final UniqueKey<NewsActorTypeRecord> KEY_NEWS_ACTOR_TYPE_PRIMARY = Internal.createUniqueKey(NewsActorType.NEWS_ACTOR_TYPE, DSL.name("KEY_news_actor_type_PRIMARY"), new TableField[] { NewsActorType.NEWS_ACTOR_TYPE.ID }, true);
    public static final UniqueKey<NewsMessageRecord> KEY_NEWS_MESSAGE_ID_UNIQUE = Internal.createUniqueKey(NewsMessage.NEWS_MESSAGE, DSL.name("KEY_news_message_id_UNIQUE"), new TableField[] { NewsMessage.NEWS_MESSAGE.ID }, true);
    public static final UniqueKey<NewsMessageRecord> KEY_NEWS_MESSAGE_PRIMARY = Internal.createUniqueKey(NewsMessage.NEWS_MESSAGE, DSL.name("KEY_news_message_PRIMARY"), new TableField[] { NewsMessage.NEWS_MESSAGE.ID }, true);
    public static final UniqueKey<OrganizationRecord> KEY_ORGANIZATION_ID_UNIQUE = Internal.createUniqueKey(Organization.ORGANIZATION, DSL.name("KEY_organization_id_UNIQUE"), new TableField[] { Organization.ORGANIZATION.ID }, true);
    public static final UniqueKey<OrganizationRecord> KEY_ORGANIZATION_PRIMARY = Internal.createUniqueKey(Organization.ORGANIZATION, DSL.name("KEY_organization_PRIMARY"), new TableField[] { Organization.ORGANIZATION.ID }, true);
    public static final UniqueKey<OrganizationGameRecord> KEY_ORGANIZATION_GAME_ID_UNIQUE = Internal.createUniqueKey(OrganizationGame.ORGANIZATION_GAME, DSL.name("KEY_organization_game_id_UNIQUE"), new TableField[] { OrganizationGame.ORGANIZATION_GAME.ID }, true);
    public static final UniqueKey<OrganizationGameRecord> KEY_ORGANIZATION_GAME_PRIMARY = Internal.createUniqueKey(OrganizationGame.ORGANIZATION_GAME, DSL.name("KEY_organization_game_PRIMARY"), new TableField[] { OrganizationGame.ORGANIZATION_GAME.ID }, true);
    public static final UniqueKey<OrganizationGameRoleRecord> KEY_ORGANIZATION_GAME_ROLE_ID_UNIQUE = Internal.createUniqueKey(OrganizationGameRole.ORGANIZATION_GAME_ROLE, DSL.name("KEY_organization_game_role_id_UNIQUE"), new TableField[] { OrganizationGameRole.ORGANIZATION_GAME_ROLE.ID }, true);
    public static final UniqueKey<OrganizationGameRoleRecord> KEY_ORGANIZATION_GAME_ROLE_PRIMARY = Internal.createUniqueKey(OrganizationGameRole.ORGANIZATION_GAME_ROLE, DSL.name("KEY_organization_game_role_PRIMARY"), new TableField[] { OrganizationGameRole.ORGANIZATION_GAME_ROLE.ID }, true);
    public static final UniqueKey<OrganizationRoleRecord> KEY_ORGANIZATION_ROLE_ID_UNIQUE = Internal.createUniqueKey(OrganizationRole.ORGANIZATION_ROLE, DSL.name("KEY_organization_role_id_UNIQUE"), new TableField[] { OrganizationRole.ORGANIZATION_ROLE.ID }, true);
    public static final UniqueKey<OrganizationRoleRecord> KEY_ORGANIZATION_ROLE_PRIMARY = Internal.createUniqueKey(OrganizationRole.ORGANIZATION_ROLE, DSL.name("KEY_organization_role_PRIMARY"), new TableField[] { OrganizationRole.ORGANIZATION_ROLE.ID }, true);
    public static final UniqueKey<PageRecord> KEY_PAGE_ID_UNIQUE = Internal.createUniqueKey(Page.PAGE, DSL.name("KEY_page_id_UNIQUE"), new TableField[] { Page.PAGE.ID }, true);
    public static final UniqueKey<PageRecord> KEY_PAGE_PRIMARY = Internal.createUniqueKey(Page.PAGE, DSL.name("KEY_page_PRIMARY"), new TableField[] { Page.PAGE.ID }, true);
    public static final UniqueKey<PageListRecord> KEY_PAGE_LIST_ID_UNIQUE = Internal.createUniqueKey(PageList.PAGE_LIST, DSL.name("KEY_page_list_id_UNIQUE"), new TableField[] { PageList.PAGE_LIST.ID }, true);
    public static final UniqueKey<PageListRecord> KEY_PAGE_LIST_PRIMARY = Internal.createUniqueKey(PageList.PAGE_LIST, DSL.name("KEY_page_list_PRIMARY"), new TableField[] { PageList.PAGE_LIST.ID }, true);
    public static final UniqueKey<ParameterTypeRecord> KEY_PARAMETER_TYPE_ID_UNIQUE = Internal.createUniqueKey(ParameterType.PARAMETER_TYPE, DSL.name("KEY_parameter_type_id_UNIQUE"), new TableField[] { ParameterType.PARAMETER_TYPE.ID }, true);
    public static final UniqueKey<ParameterTypeRecord> KEY_PARAMETER_TYPE_PRIMARY = Internal.createUniqueKey(ParameterType.PARAMETER_TYPE, DSL.name("KEY_parameter_type_PRIMARY"), new TableField[] { ParameterType.PARAMETER_TYPE.ID }, true);
    public static final UniqueKey<PlayerRecord> KEY_PLAYER_ID_UNIQUE = Internal.createUniqueKey(Player.PLAYER, DSL.name("KEY_player_id_UNIQUE"), new TableField[] { Player.PLAYER.ID }, true);
    public static final UniqueKey<PlayerRecord> KEY_PLAYER_PRIMARY = Internal.createUniqueKey(Player.PLAYER, DSL.name("KEY_player_PRIMARY"), new TableField[] { Player.PLAYER.ID }, true);
    public static final UniqueKey<PlayerDecisionRecord> KEY_PLAYER_DECISION_ID_UNIQUE = Internal.createUniqueKey(PlayerDecision.PLAYER_DECISION, DSL.name("KEY_player_decision_id_UNIQUE"), new TableField[] { PlayerDecision.PLAYER_DECISION.ID }, true);
    public static final UniqueKey<PlayerDecisionRecord> KEY_PLAYER_DECISION_PRIMARY = Internal.createUniqueKey(PlayerDecision.PLAYER_DECISION, DSL.name("KEY_player_decision_PRIMARY"), new TableField[] { PlayerDecision.PLAYER_DECISION.ID }, true);
    public static final UniqueKey<PlayerScoreRecord> KEY_PLAYER_SCORE_ID_UNIQUE = Internal.createUniqueKey(PlayerScore.PLAYER_SCORE, DSL.name("KEY_player_score_id_UNIQUE"), new TableField[] { PlayerScore.PLAYER_SCORE.ID }, true);
    public static final UniqueKey<PlayerScoreRecord> KEY_PLAYER_SCORE_PRIMARY = Internal.createUniqueKey(PlayerScore.PLAYER_SCORE, DSL.name("KEY_player_score_PRIMARY"), new TableField[] { PlayerScore.PLAYER_SCORE.ID }, true);
    public static final UniqueKey<ProcessRecord> KEY_PROCESS_ID_UNIQUE = Internal.createUniqueKey(Process.PROCESS, DSL.name("KEY_process_id_UNIQUE"), new TableField[] { Process.PROCESS.ID }, true);
    public static final UniqueKey<ProcessRecord> KEY_PROCESS_PRIMARY = Internal.createUniqueKey(Process.PROCESS, DSL.name("KEY_process_PRIMARY"), new TableField[] { Process.PROCESS.ID }, true);
    public static final UniqueKey<ProcessParameterRecord> KEY_PROCESS_PARAMETER_ID_UNIQUE = Internal.createUniqueKey(ProcessParameter.PROCESS_PARAMETER, DSL.name("KEY_process_parameter_id_UNIQUE"), new TableField[] { ProcessParameter.PROCESS_PARAMETER.ID }, true);
    public static final UniqueKey<ProcessParameterRecord> KEY_PROCESS_PARAMETER_PRIMARY = Internal.createUniqueKey(ProcessParameter.PROCESS_PARAMETER, DSL.name("KEY_process_parameter_PRIMARY"), new TableField[] { ProcessParameter.PROCESS_PARAMETER.ID }, true);
    public static final UniqueKey<ProcessTypeRecord> KEY_PROCESS_TYPE_ID_UNIQUE = Internal.createUniqueKey(ProcessType.PROCESS_TYPE, DSL.name("KEY_process_type_id_UNIQUE"), new TableField[] { ProcessType.PROCESS_TYPE.ID }, true);
    public static final UniqueKey<ProcessTypeRecord> KEY_PROCESS_TYPE_PRIMARY = Internal.createUniqueKey(ProcessType.PROCESS_TYPE, DSL.name("KEY_process_type_PRIMARY"), new TableField[] { ProcessType.PROCESS_TYPE.ID }, true);
    public static final UniqueKey<ProcessValueRecord> KEY_PROCESS_VALUE_ID_UNIQUE = Internal.createUniqueKey(ProcessValue.PROCESS_VALUE, DSL.name("KEY_process_value_id_UNIQUE"), new TableField[] { ProcessValue.PROCESS_VALUE.ID }, true);
    public static final UniqueKey<ProcessValueRecord> KEY_PROCESS_VALUE_PRIMARY = Internal.createUniqueKey(ProcessValue.PROCESS_VALUE, DSL.name("KEY_process_value_PRIMARY"), new TableField[] { ProcessValue.PROCESS_VALUE.ID }, true);
    public static final UniqueKey<ProductRecord> KEY_PRODUCT_ID_UNIQUE = Internal.createUniqueKey(Product.PRODUCT, DSL.name("KEY_product_id_UNIQUE"), new TableField[] { Product.PRODUCT.ID }, true);
    public static final UniqueKey<ProductRecord> KEY_PRODUCT_PRIMARY = Internal.createUniqueKey(Product.PRODUCT, DSL.name("KEY_product_PRIMARY"), new TableField[] { Product.PRODUCT.ID }, true);
    public static final UniqueKey<RoleRecord> KEY_ROLE_ID_UNIQUE = Internal.createUniqueKey(Role.ROLE, DSL.name("KEY_role_id_UNIQUE"), new TableField[] { Role.ROLE.ID }, true);
    public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = Internal.createUniqueKey(Role.ROLE, DSL.name("KEY_role_PRIMARY"), new TableField[] { Role.ROLE.ID }, true);
    public static final UniqueKey<RoleParameterRecord> KEY_ROLE_PARAMETER_ID_UNIQUE = Internal.createUniqueKey(RoleParameter.ROLE_PARAMETER, DSL.name("KEY_role_parameter_id_UNIQUE"), new TableField[] { RoleParameter.ROLE_PARAMETER.ID }, true);
    public static final UniqueKey<RoleParameterRecord> KEY_ROLE_PARAMETER_PRIMARY = Internal.createUniqueKey(RoleParameter.ROLE_PARAMETER, DSL.name("KEY_role_parameter_PRIMARY"), new TableField[] { RoleParameter.ROLE_PARAMETER.ID }, true);
    public static final UniqueKey<RoleTypeRecord> KEY_ROLE_TYPE_ID_UNIQUE = Internal.createUniqueKey(RoleType.ROLE_TYPE, DSL.name("KEY_role_type_id_UNIQUE"), new TableField[] { RoleType.ROLE_TYPE.ID }, true);
    public static final UniqueKey<RoleTypeRecord> KEY_ROLE_TYPE_PRIMARY = Internal.createUniqueKey(RoleType.ROLE_TYPE, DSL.name("KEY_role_type_PRIMARY"), new TableField[] { RoleType.ROLE_TYPE.ID }, true);
    public static final UniqueKey<RoleValueRecord> KEY_ROLE_VALUE_ID_UNIQUE = Internal.createUniqueKey(RoleValue.ROLE_VALUE, DSL.name("KEY_role_value_id_UNIQUE"), new TableField[] { RoleValue.ROLE_VALUE.ID }, true);
    public static final UniqueKey<RoleValueRecord> KEY_ROLE_VALUE_PRIMARY = Internal.createUniqueKey(RoleValue.ROLE_VALUE, DSL.name("KEY_role_value_PRIMARY"), new TableField[] { RoleValue.ROLE_VALUE.ID }, true);
    public static final UniqueKey<SentContentRecord> KEY_SENT_CONTENT_ID_UNIQUE = Internal.createUniqueKey(SentContent.SENT_CONTENT, DSL.name("KEY_sent_content_id_UNIQUE"), new TableField[] { SentContent.SENT_CONTENT.ID }, true);
    public static final UniqueKey<SentContentRecord> KEY_SENT_CONTENT_PRIMARY = Internal.createUniqueKey(SentContent.SENT_CONTENT, DSL.name("KEY_sent_content_PRIMARY"), new TableField[] { SentContent.SENT_CONTENT.ID }, true);
    public static final UniqueKey<SkuRecord> KEY_SKU_ID_UNIQUE = Internal.createUniqueKey(Sku.SKU, DSL.name("KEY_sku_id_UNIQUE"), new TableField[] { Sku.SKU.ID }, true);
    public static final UniqueKey<SkuRecord> KEY_SKU_PRIMARY = Internal.createUniqueKey(Sku.SKU, DSL.name("KEY_sku_PRIMARY"), new TableField[] { Sku.SKU.ID }, true);
    public static final UniqueKey<TransferRecord> KEY_TRANSFER_ID_UNIQUE = Internal.createUniqueKey(Transfer.TRANSFER, DSL.name("KEY_transfer_id_UNIQUE"), new TableField[] { Transfer.TRANSFER.ID }, true);
    public static final UniqueKey<TransferRecord> KEY_TRANSFER_PRIMARY = Internal.createUniqueKey(Transfer.TRANSFER, DSL.name("KEY_transfer_PRIMARY"), new TableField[] { Transfer.TRANSFER.ID }, true);
    public static final UniqueKey<TransportModeRecord> KEY_TRANSPORT_MODE_ID_UNIQUE = Internal.createUniqueKey(TransportMode.TRANSPORT_MODE, DSL.name("KEY_transport_mode_id_UNIQUE"), new TableField[] { TransportMode.TRANSPORT_MODE.ID }, true);
    public static final UniqueKey<TransportModeRecord> KEY_TRANSPORT_MODE_PRIMARY = Internal.createUniqueKey(TransportMode.TRANSPORT_MODE, DSL.name("KEY_transport_mode_PRIMARY"), new TableField[] { TransportMode.TRANSPORT_MODE.ID }, true);
    public static final UniqueKey<TriggerFixedRecord> KEY_TRIGGER_FIXED_ID_UNIQUE = Internal.createUniqueKey(TriggerFixed.TRIGGER_FIXED, DSL.name("KEY_trigger_fixed_id_UNIQUE"), new TableField[] { TriggerFixed.TRIGGER_FIXED.ID }, true);
    public static final UniqueKey<TriggerFixedRecord> KEY_TRIGGER_FIXED_PRIMARY = Internal.createUniqueKey(TriggerFixed.TRIGGER_FIXED, DSL.name("KEY_trigger_fixed_PRIMARY"), new TableField[] { TriggerFixed.TRIGGER_FIXED.ID }, true);
    public static final UniqueKey<TriggerIntervalRecord> KEY_TRIGGER_INTERVAL_ID_UNIQUE = Internal.createUniqueKey(TriggerInterval.TRIGGER_INTERVAL, DSL.name("KEY_trigger_interval_id_UNIQUE"), new TableField[] { TriggerInterval.TRIGGER_INTERVAL.ID }, true);
    public static final UniqueKey<TriggerIntervalRecord> KEY_TRIGGER_INTERVAL_PRIMARY = Internal.createUniqueKey(TriggerInterval.TRIGGER_INTERVAL, DSL.name("KEY_trigger_interval_PRIMARY"), new TableField[] { TriggerInterval.TRIGGER_INTERVAL.ID }, true);
    public static final UniqueKey<TriggeredEventRecord> KEY_TRIGGERED_EVENT_ID_UNIQUE = Internal.createUniqueKey(TriggeredEvent.TRIGGERED_EVENT, DSL.name("KEY_triggered_event_id_UNIQUE"), new TableField[] { TriggeredEvent.TRIGGERED_EVENT.ID }, true);
    public static final UniqueKey<TriggeredEventRecord> KEY_TRIGGERED_EVENT_PRIMARY = Internal.createUniqueKey(TriggeredEvent.TRIGGERED_EVENT, DSL.name("KEY_triggered_event_PRIMARY"), new TableField[] { TriggeredEvent.TRIGGERED_EVENT.ID }, true);
    public static final UniqueKey<TriggeredNewsMessageRecord> KEY_TRIGGERED_NEWS_MESSAGE_ID_UNIQUE = Internal.createUniqueKey(TriggeredNewsMessage.TRIGGERED_NEWS_MESSAGE, DSL.name("KEY_triggered_news_message_id_UNIQUE"), new TableField[] { TriggeredNewsMessage.TRIGGERED_NEWS_MESSAGE.ID }, true);
    public static final UniqueKey<TriggeredNewsMessageRecord> KEY_TRIGGERED_NEWS_MESSAGE_PRIMARY = Internal.createUniqueKey(TriggeredNewsMessage.TRIGGERED_NEWS_MESSAGE, DSL.name("KEY_triggered_news_message_PRIMARY"), new TableField[] { TriggeredNewsMessage.TRIGGERED_NEWS_MESSAGE.ID }, true);
    public static final UniqueKey<TriggeredProcessRecord> KEY_TRIGGERED_PROCESS_ID_UNIQUE = Internal.createUniqueKey(TriggeredProcess.TRIGGERED_PROCESS, DSL.name("KEY_triggered_process_id_UNIQUE"), new TableField[] { TriggeredProcess.TRIGGERED_PROCESS.ID }, true);
    public static final UniqueKey<TriggeredProcessRecord> KEY_TRIGGERED_PROCESS_PRIMARY = Internal.createUniqueKey(TriggeredProcess.TRIGGERED_PROCESS, DSL.name("KEY_triggered_process_PRIMARY"), new TableField[] { TriggeredProcess.TRIGGERED_PROCESS.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_ID_UNIQUE = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_id_UNIQUE"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ActorRecord, ActorTypeRecord> FK_ACTOR_ACTOR_TYPE1 = Internal.createForeignKey(Actor.ACTOR, DSL.name("fk_actor_actor_type1"), new TableField[] { Actor.ACTOR.ACTOR_TYPE_ID }, Keys.KEY_ACTOR_TYPE_PRIMARY, new TableField[] { ActorType.ACTOR_TYPE.ID }, true);
    public static final ForeignKey<ActorRecord, GameVersionRecord> FK_ACTOR_GAME_VERSION1 = Internal.createForeignKey(Actor.ACTOR, DSL.name("fk_actor_game_version1"), new TableField[] { Actor.ACTOR.GAME_VERSION_ID }, Keys.KEY_GAME_VERSION_PRIMARY, new TableField[] { GameVersion.GAME_VERSION.ID }, true);
    public static final ForeignKey<ActorRecord, LocationRecord> FK_ACTOR_LOCATION1 = Internal.createForeignKey(Actor.ACTOR, DSL.name("fk_actor_location1"), new TableField[] { Actor.ACTOR.LOCATION_ID }, Keys.KEY_LOCATION_PRIMARY, new TableField[] { Location.LOCATION.ID }, true);
    public static final ForeignKey<ActorParameterRecord, ActorTypeRecord> FK_ACTOR_PARAMETER_ACTOR_TYPE1 = Internal.createForeignKey(ActorParameter.ACTOR_PARAMETER, DSL.name("fk_actor_parameter_actor_type1"), new TableField[] { ActorParameter.ACTOR_PARAMETER.ACTOR_TYPE_ID }, Keys.KEY_ACTOR_TYPE_PRIMARY, new TableField[] { ActorType.ACTOR_TYPE.ID }, true);
    public static final ForeignKey<ActorParameterRecord, ParameterTypeRecord> FK_PARAMETER_PARAMETER_TYPE1 = Internal.createForeignKey(ActorParameter.ACTOR_PARAMETER, DSL.name("fk_parameter_parameter_type1"), new TableField[] { ActorParameter.ACTOR_PARAMETER.PARAMETER_TYPE_ID }, Keys.KEY_PARAMETER_TYPE_PRIMARY, new TableField[] { ParameterType.PARAMETER_TYPE.ID }, true);
    public static final ForeignKey<ActorTypeRecord, GameRecord> FK_ACTOR_TYPE_GAME1 = Internal.createForeignKey(ActorType.ACTOR_TYPE, DSL.name("fk_actor_type_game1"), new TableField[] { ActorType.ACTOR_TYPE.GAME_ID }, Keys.KEY_GAME_PRIMARY, new TableField[] { Game.GAME.ID }, true);
    public static final ForeignKey<ActorValueRecord, ActorRecord> FK_ACTOR_VALUE_ACTOR1 = Internal.createForeignKey(ActorValue.ACTOR_VALUE, DSL.name("fk_actor_value_actor1"), new TableField[] { ActorValue.ACTOR_VALUE.ACTOR_ID }, Keys.KEY_ACTOR_PRIMARY, new TableField[] { Actor.ACTOR.ID }, true);
    public static final ForeignKey<ActorValueRecord, ActorParameterRecord> FK_ACTOR_VALUE_ACTOR_PARAMETER1 = Internal.createForeignKey(ActorValue.ACTOR_VALUE, DSL.name("fk_actor_value_actor_parameter1"), new TableField[] { ActorValue.ACTOR_VALUE.ACTOR_PARAMETER_ID }, Keys.KEY_ACTOR_PARAMETER_PRIMARY, new TableField[] { ActorParameter.ACTOR_PARAMETER.ID }, true);
    public static final ForeignKey<AllowedStrategyRecord, AllowedStrategyCategoryRecord> FK_ALLOWED_STRATEGY_ALLOWED_STRATEGY_CATEGORY1 = Internal.createForeignKey(AllowedStrategy.ALLOWED_STRATEGY, DSL.name("fk_allowed_strategy_allowed_strategy_category1"), new TableField[] { AllowedStrategy.ALLOWED_STRATEGY.ALLOWED_STRATEGY_CATEGORY_ID }, Keys.KEY_ALLOWED_STRATEGY_CATEGORY_PRIMARY, new TableField[] { AllowedStrategyCategory.ALLOWED_STRATEGY_CATEGORY.ID }, true);
    public static final ForeignKey<AllowedStrategyCategoryRecord, AllowedStrategyListRecord> FK_ALLOWED_STRATEGY_CATEGORY_ALLOWED_STRATEGY_LIST1 = Internal.createForeignKey(AllowedStrategyCategory.ALLOWED_STRATEGY_CATEGORY, DSL.name("fk_allowed_strategy_category_allowed_strategy_list1"), new TableField[] { AllowedStrategyCategory.ALLOWED_STRATEGY_CATEGORY.ALLOWED_STRATEGY_LIST_ID }, Keys.KEY_ALLOWED_STRATEGY_LIST_PRIMARY, new TableField[] { AllowedStrategyList.ALLOWED_STRATEGY_LIST.ID }, true);
    public static final ForeignKey<AllowedStrategyCategoryRecord, PageRecord> FK_ALLOWED_STRATEGY_CATEGORY_PAGE1 = Internal.createForeignKey(AllowedStrategyCategory.ALLOWED_STRATEGY_CATEGORY, DSL.name("fk_allowed_strategy_category_page1"), new TableField[] { AllowedStrategyCategory.ALLOWED_STRATEGY_CATEGORY.PAGE_ID }, Keys.KEY_PAGE_PRIMARY, new TableField[] { Page.PAGE.ID }, true);
    public static final ForeignKey<AllowedStrategyListRecord, PageRecord> FK_ALLOWED_STRATEGY_LIST_PAGE1 = Internal.createForeignKey(AllowedStrategyList.ALLOWED_STRATEGY_LIST, DSL.name("fk_allowed_strategy_list_page1"), new TableField[] { AllowedStrategyList.ALLOWED_STRATEGY_LIST.PAGE_ID }, Keys.KEY_PAGE_PRIMARY, new TableField[] { Page.PAGE.ID }, true);
    public static final ForeignKey<BillOfMaterialsRecord, ProductRecord> FK_BILL_OF_MATERIALS_PRODUCT1 = Internal.createForeignKey(BillOfMaterials.BILL_OF_MATERIALS, DSL.name("fk_bill_of_materials_product1"), new TableField[] { BillOfMaterials.BILL_OF_MATERIALS.PRODUCT_ID }, Keys.KEY_PRODUCT_PRIMARY, new TableField[] { Product.PRODUCT.ID }, true);
    public static final ForeignKey<BomItemRecord, BillOfMaterialsRecord> FK_BOM_ITEM_BILL_OF_MATERIALS1 = Internal.createForeignKey(BomItem.BOM_ITEM, DSL.name("fk_bom_item_bill_of_materials1"), new TableField[] { BomItem.BOM_ITEM.BILL_OF_MATERIALS_ID }, Keys.KEY_BILL_OF_MATERIALS_PRIMARY, new TableField[] { BillOfMaterials.BILL_OF_MATERIALS.ID }, true);
    public static final ForeignKey<BomItemRecord, ProductRecord> FK_BOM_ITEM_PRODUCT1 = Internal.createForeignKey(BomItem.BOM_ITEM, DSL.name("fk_bom_item_product1"), new TableField[] { BomItem.BOM_ITEM.PRODUCT_ID }, Keys.KEY_PRODUCT_PRIMARY, new TableField[] { Product.PRODUCT.ID }, true);
    public static final ForeignKey<ChatMessageRecord, GameSessionRecord> FK_CHAT_MESSAGE_GAME_SESSION1 = Internal.createForeignKey(ChatMessage.CHAT_MESSAGE, DSL.name("fk_chat_message_game_session1"), new TableField[] { ChatMessage.CHAT_MESSAGE.GAME_SESSION_ID }, Keys.KEY_GAME_SESSION_PRIMARY, new TableField[] { GameSession.GAME_SESSION.ID }, true);
    public static final ForeignKey<ChatMessageRecord, PlayerRecord> FK_CHAT_MESSAGE_PLAYER1 = Internal.createForeignKey(ChatMessage.CHAT_MESSAGE, DSL.name("fk_chat_message_player1"), new TableField[] { ChatMessage.CHAT_MESSAGE.FROM_PLAYER_ID }, Keys.KEY_PLAYER_PRIMARY, new TableField[] { Player.PLAYER.ID }, true);
    public static final ForeignKey<ChatMessageRecord, PlayerRecord> FK_CHAT_MESSAGE_PLAYER2 = Internal.createForeignKey(ChatMessage.CHAT_MESSAGE, DSL.name("fk_chat_message_player2"), new TableField[] { ChatMessage.CHAT_MESSAGE.TO_PLAYER_ID }, Keys.KEY_PLAYER_PRIMARY, new TableField[] { Player.PLAYER.ID }, true);
    public static final ForeignKey<ChosenStrategyRecord, AllowedStrategyRecord> FK_CHOSEN_STRATEGY_ALLOWED_STRATEGY1 = Internal.createForeignKey(ChosenStrategy.CHOSEN_STRATEGY, DSL.name("fk_chosen_strategy_allowed_strategy1"), new TableField[] { ChosenStrategy.CHOSEN_STRATEGY.ALLOWED_STRATEGY_ID }, Keys.KEY_ALLOWED_STRATEGY_PRIMARY, new TableField[] { AllowedStrategy.ALLOWED_STRATEGY.ID }, true);
    public static final ForeignKey<ChosenStrategyRecord, PlayerRecord> FK_CHOSEN_STRATEGY_PLAYER1 = Internal.createForeignKey(ChosenStrategy.CHOSEN_STRATEGY, DSL.name("fk_chosen_strategy_player1"), new TableField[] { ChosenStrategy.CHOSEN_STRATEGY.PLAYER_ID }, Keys.KEY_PLAYER_PRIMARY, new TableField[] { Player.PLAYER.ID }, true);
    public static final ForeignKey<EventRecord, GameScenarioRecord> FK_EVENT_GAME_SCENARIO1 = Internal.createForeignKey(Event.EVENT, DSL.name("fk_event_game_scenario1"), new TableField[] { Event.EVENT.GAME_SCENARIO_ID }, Keys.KEY_GAME_SCENARIO_PRIMARY, new TableField[] { GameScenario.GAME_SCENARIO.ID }, true);
    public static final ForeignKey<EventRecord, NewsMessageRecord> FK_EVENT_NEWS_MESSAGE1 = Internal.createForeignKey(Event.EVENT, DSL.name("fk_event_news_message1"), new TableField[] { Event.EVENT.NEWS_MESSAGE_ID }, Keys.KEY_NEWS_MESSAGE_PRIMARY, new TableField[] { NewsMessage.NEWS_MESSAGE.ID }, true);
    public static final ForeignKey<EventRecord, TriggerFixedRecord> FK_EVENT_TRIGGER_FIXED1 = Internal.createForeignKey(Event.EVENT, DSL.name("fk_event_trigger_fixed1"), new TableField[] { Event.EVENT.TRIGGER_FIXED_ID }, Keys.KEY_TRIGGER_FIXED_PRIMARY, new TableField[] { TriggerFixed.TRIGGER_FIXED.ID }, true);
    public static final ForeignKey<EventRecord, TriggerIntervalRecord> FK_EVENT_TRIGGER_INTERVAL1 = Internal.createForeignKey(Event.EVENT, DSL.name("fk_event_trigger_interval1"), new TableField[] { Event.EVENT.TRIGGER_INTERVAL_ID }, Keys.KEY_TRIGGER_INTERVAL_PRIMARY, new TableField[] { TriggerInterval.TRIGGER_INTERVAL.ID }, true);
    public static final ForeignKey<ExtraEventRecord, GameSessionRecord> FK_EXTRA_NEWS_MESSAGE_GAME_SESSION10 = Internal.createForeignKey(ExtraEvent.EXTRA_EVENT, DSL.name("fk_extra_news_message_game_session10"), new TableField[] { ExtraEvent.EXTRA_EVENT.GAME_SESSION_ID }, Keys.KEY_GAME_SESSION_PRIMARY, new TableField[] { GameSession.GAME_SESSION.ID }, true);
    public static final ForeignKey<ExtraNewsMessageRecord, GameSessionRecord> FK_EXTRA_NEWS_MESSAGE_GAME_SESSION1 = Internal.createForeignKey(ExtraNewsMessage.EXTRA_NEWS_MESSAGE, DSL.name("fk_extra_news_message_game_session1"), new TableField[] { ExtraNewsMessage.EXTRA_NEWS_MESSAGE.GAME_SESSION_ID }, Keys.KEY_GAME_SESSION_PRIMARY, new TableField[] { GameSession.GAME_SESSION.ID }, true);
    public static final ForeignKey<GameRoleRecord, GameRecord> FK_GAME_ROLE_GAME1 = Internal.createForeignKey(GameRole.GAME_ROLE, DSL.name("fk_game_role_game1"), new TableField[] { GameRole.GAME_ROLE.GAME_ID }, Keys.KEY_GAME_PRIMARY, new TableField[] { Game.GAME.ID }, true);
    public static final ForeignKey<GameRoleRecord, UserRecord> FK_ORGANIZATION_ROLE_USER0 = Internal.createForeignKey(GameRole.GAME_ROLE, DSL.name("fk_organization_role_user0"), new TableField[] { GameRole.GAME_ROLE.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<GameScenarioRecord, GameVersionRecord> FK_GAME_SCENARIO_GAME_VERSION1 = Internal.createForeignKey(GameScenario.GAME_SCENARIO, DSL.name("fk_game_scenario_game_version1"), new TableField[] { GameScenario.GAME_SCENARIO.GAME_VERSION_ID }, Keys.KEY_GAME_VERSION_PRIMARY, new TableField[] { GameVersion.GAME_VERSION.ID }, true);
    public static final ForeignKey<GameSessionRecord, AllowedStrategyListRecord> FK_GAME_SESSION_ALLOWED_STRATEGY_LIST1 = Internal.createForeignKey(GameSession.GAME_SESSION, DSL.name("fk_game_session_allowed_strategy_list1"), new TableField[] { GameSession.GAME_SESSION.ALLOWED_STRATEGY_LIST_ID }, Keys.KEY_ALLOWED_STRATEGY_LIST_PRIMARY, new TableField[] { AllowedStrategyList.ALLOWED_STRATEGY_LIST.ID }, true);
    public static final ForeignKey<GameSessionRecord, GameVersionRecord> FK_GAME_SESSION_GAME_VERSION1 = Internal.createForeignKey(GameSession.GAME_SESSION, DSL.name("fk_game_session_game_version1"), new TableField[] { GameSession.GAME_SESSION.GAME_VERSION_ID }, Keys.KEY_GAME_VERSION_PRIMARY, new TableField[] { GameVersion.GAME_VERSION.ID }, true);
    public static final ForeignKey<GameSessionRecord, OrganizationGameRecord> FK_GAME_SESSION_ORGANIZATION_GAME1 = Internal.createForeignKey(GameSession.GAME_SESSION, DSL.name("fk_game_session_organization_game1"), new TableField[] { GameSession.GAME_SESSION.ORGANIZATION_GAME_ID }, Keys.KEY_ORGANIZATION_GAME_PRIMARY, new TableField[] { OrganizationGame.ORGANIZATION_GAME.ID }, true);
    public static final ForeignKey<GameSessionRecord, PageListRecord> FK_GAME_SESSION_PAGE_LIST1 = Internal.createForeignKey(GameSession.GAME_SESSION, DSL.name("fk_game_session_page_list1"), new TableField[] { GameSession.GAME_SESSION.BRIEFING_PAGE_LIST_ID }, Keys.KEY_PAGE_LIST_PRIMARY, new TableField[] { PageList.PAGE_LIST.ID }, true);
    public static final ForeignKey<GameSessionRecord, PageListRecord> FK_GAME_SESSION_PAGE_LIST2 = Internal.createForeignKey(GameSession.GAME_SESSION, DSL.name("fk_game_session_page_list2"), new TableField[] { GameSession.GAME_SESSION.DEBRIEFING_PAGE_LIST_ID }, Keys.KEY_PAGE_LIST_PRIMARY, new TableField[] { PageList.PAGE_LIST.ID }, true);
    public static final ForeignKey<GameSessionGoalRecord, GameSessionRecord> FK_SESSION_GOAL_GAME_SESSION1 = Internal.createForeignKey(GameSessionGoal.GAME_SESSION_GOAL, DSL.name("fk_session_goal_game_session1"), new TableField[] { GameSessionGoal.GAME_SESSION_GOAL.GAME_SESSION_ID }, Keys.KEY_GAME_SESSION_PRIMARY, new TableField[] { GameSession.GAME_SESSION.ID }, true);
    public static final ForeignKey<GameSessionGoalRecord, GoalRecord> FK_SESSION_GOAL_GOAL1 = Internal.createForeignKey(GameSessionGoal.GAME_SESSION_GOAL, DSL.name("fk_session_goal_goal1"), new TableField[] { GameSessionGoal.GAME_SESSION_GOAL.GOAL_ID }, Keys.KEY_GOAL_PRIMARY, new TableField[] { Goal.GOAL.ID }, true);
    public static final ForeignKey<GameSessionRoleRecord, GameSessionRecord> FK_GAME_SESSION_ROLE_GAME_SESSION1 = Internal.createForeignKey(GameSessionRole.GAME_SESSION_ROLE, DSL.name("fk_game_session_role_game_session1"), new TableField[] { GameSessionRole.GAME_SESSION_ROLE.GAME_SESSION_ID }, Keys.KEY_GAME_SESSION_PRIMARY, new TableField[] { GameSession.GAME_SESSION.ID }, true);
    public static final ForeignKey<GameSessionRoleRecord, UserRecord> FK_ORGANIZATION_ROLE_USER00 = Internal.createForeignKey(GameSessionRole.GAME_SESSION_ROLE, DSL.name("fk_organization_role_user00"), new TableField[] { GameSessionRole.GAME_SESSION_ROLE.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<GameVersionRecord, AllowedStrategyListRecord> FK_GAME_VERSION_ALLOWED_STRATEGY_LIST1 = Internal.createForeignKey(GameVersion.GAME_VERSION, DSL.name("fk_game_version_allowed_strategy_list1"), new TableField[] { GameVersion.GAME_VERSION.ALLOWED_STRATEGY_LIST_ID }, Keys.KEY_ALLOWED_STRATEGY_LIST_PRIMARY, new TableField[] { AllowedStrategyList.ALLOWED_STRATEGY_LIST.ID }, true);
    public static final ForeignKey<GameVersionRecord, GameRecord> FK_GAME_VERSION_GAME1 = Internal.createForeignKey(GameVersion.GAME_VERSION, DSL.name("fk_game_version_game1"), new TableField[] { GameVersion.GAME_VERSION.GAME_ID }, Keys.KEY_GAME_PRIMARY, new TableField[] { Game.GAME.ID }, true);
    public static final ForeignKey<GameVersionRecord, PageRecord> FK_GAME_VERSION_PAGE1 = Internal.createForeignKey(GameVersion.GAME_VERSION, DSL.name("fk_game_version_page1"), new TableField[] { GameVersion.GAME_VERSION.GOAL_PAGE_ID }, Keys.KEY_PAGE_PRIMARY, new TableField[] { Page.PAGE.ID }, true);
    public static final ForeignKey<GameVersionRecord, PageListRecord> FK_GAME_VERSION_PAGE_LIST1 = Internal.createForeignKey(GameVersion.GAME_VERSION, DSL.name("fk_game_version_page_list1"), new TableField[] { GameVersion.GAME_VERSION.BRIEFING_PAGE_LIST_ID }, Keys.KEY_PAGE_LIST_PRIMARY, new TableField[] { PageList.PAGE_LIST.ID }, true);
    public static final ForeignKey<GameVersionRecord, PageListRecord> FK_GAME_VERSION_PAGE_LIST2 = Internal.createForeignKey(GameVersion.GAME_VERSION, DSL.name("fk_game_version_page_list2"), new TableField[] { GameVersion.GAME_VERSION.DEBRIEFING_PAGE_LIST_ID }, Keys.KEY_PAGE_LIST_PRIMARY, new TableField[] { PageList.PAGE_LIST.ID }, true);
    public static final ForeignKey<GameVersionGoalRecord, GameVersionRecord> FK_GAME_VERSION_GOAL_GAME_VERSION1 = Internal.createForeignKey(GameVersionGoal.GAME_VERSION_GOAL, DSL.name("fk_game_version_goal_game_version1"), new TableField[] { GameVersionGoal.GAME_VERSION_GOAL.GAME_VERSION_ID }, Keys.KEY_GAME_VERSION_PRIMARY, new TableField[] { GameVersion.GAME_VERSION.ID }, true);
    public static final ForeignKey<GameVersionGoalRecord, GoalRecord> FK_SESSION_GOAL_GOAL10 = Internal.createForeignKey(GameVersionGoal.GAME_VERSION_GOAL, DSL.name("fk_session_goal_goal10"), new TableField[] { GameVersionGoal.GAME_VERSION_GOAL.GOAL_ID }, Keys.KEY_GOAL_PRIMARY, new TableField[] { Goal.GOAL.ID }, true);
    public static final ForeignKey<HandledSkuRecord, SkuRecord> FK_HANDLED_SKU_SKU1 = Internal.createForeignKey(HandledSku.HANDLED_SKU, DSL.name("fk_handled_sku_sku1"), new TableField[] { HandledSku.HANDLED_SKU.SKU_ID }, Keys.KEY_SKU_PRIMARY, new TableField[] { Sku.SKU.ID }, true);
    public static final ForeignKey<HandledSkuRecord, TransportModeRecord> FK_HANDLED_SKU_TRANSPORT_MODE1 = Internal.createForeignKey(HandledSku.HANDLED_SKU, DSL.name("fk_handled_sku_transport_mode1"), new TableField[] { HandledSku.HANDLED_SKU.TRANSPORT_MODE_ID }, Keys.KEY_TRANSPORT_MODE_PRIMARY, new TableField[] { TransportMode.TRANSPORT_MODE.ID }, true);
    public static final ForeignKey<HandlerRecord, HandlerTypeRecord> FK_HANDLER_HANDLER_TYPE1 = Internal.createForeignKey(Handler.HANDLER, DSL.name("fk_handler_handler_type1"), new TableField[] { Handler.HANDLER.HANDLER_TYPE_ID }, Keys.KEY_HANDLER_TYPE_PRIMARY, new TableField[] { HandlerType.HANDLER_TYPE.ID }, true);
    public static final ForeignKey<HandlerRecord, RoleRecord> FK_HANDLER_ROLE1 = Internal.createForeignKey(Handler.HANDLER, DSL.name("fk_handler_role1"), new TableField[] { Handler.HANDLER.ROLE_ID }, Keys.KEY_ROLE_PRIMARY, new TableField[] { Role.ROLE.ID }, true);
    public static final ForeignKey<HandlerParameterRecord, HandlerTypeRecord> FK_HANDLER_PARAMETER_HANDLER_TYPE1 = Internal.createForeignKey(HandlerParameter.HANDLER_PARAMETER, DSL.name("fk_handler_parameter_handler_type1"), new TableField[] { HandlerParameter.HANDLER_PARAMETER.HANDLER_TYPE_ID }, Keys.KEY_HANDLER_TYPE_PRIMARY, new TableField[] { HandlerType.HANDLER_TYPE.ID }, true);
    public static final ForeignKey<HandlerParameterRecord, ParameterTypeRecord> FK_PARAMETER_PARAMETER_TYPE10 = Internal.createForeignKey(HandlerParameter.HANDLER_PARAMETER, DSL.name("fk_parameter_parameter_type10"), new TableField[] { HandlerParameter.HANDLER_PARAMETER.PARAMETER_TYPE_ID }, Keys.KEY_PARAMETER_TYPE_PRIMARY, new TableField[] { ParameterType.PARAMETER_TYPE.ID }, true);
    public static final ForeignKey<HandlerTypeRecord, ContentTypeRecord> FK_HANDLER_TYPE_CONTENT_TYPE1 = Internal.createForeignKey(HandlerType.HANDLER_TYPE, DSL.name("fk_handler_type_content_type1"), new TableField[] { HandlerType.HANDLER_TYPE.CONTENT_TYPE_ID }, Keys.KEY_CONTENT_TYPE_PRIMARY, new TableField[] { ContentType.CONTENT_TYPE.ID }, true);
    public static final ForeignKey<HandlerTypeRecord, RoleTypeRecord> FK_HANDLER_TYPE_ROLE_TYPE1 = Internal.createForeignKey(HandlerType.HANDLER_TYPE, DSL.name("fk_handler_type_role_type1"), new TableField[] { HandlerType.HANDLER_TYPE.ROLE_TYPE_ID }, Keys.KEY_ROLE_TYPE_PRIMARY, new TableField[] { RoleType.ROLE_TYPE.ID }, true);
    public static final ForeignKey<HandlerValidActorRecord, HandlerRecord> FK_HANDLER_PRODUCT_HANDLER10 = Internal.createForeignKey(HandlerValidActor.HANDLER_VALID_ACTOR, DSL.name("fk_handler_product_handler10"), new TableField[] { HandlerValidActor.HANDLER_VALID_ACTOR.HANDLER_ID }, Keys.KEY_HANDLER_PRIMARY, new TableField[] { Handler.HANDLER.ID }, true);
    public static final ForeignKey<HandlerValidActorRecord, ActorRecord> FK_HANDLER_VALID_ACTOR_ACTOR1 = Internal.createForeignKey(HandlerValidActor.HANDLER_VALID_ACTOR, DSL.name("fk_handler_valid_actor_actor1"), new TableField[] { HandlerValidActor.HANDLER_VALID_ACTOR.ACTOR_ID }, Keys.KEY_ACTOR_PRIMARY, new TableField[] { Actor.ACTOR.ID }, true);
    public static final ForeignKey<HandlerValidActorTypeRecord, ActorTypeRecord> FK_HANDLER_VALID_ACTOR_TYPE_ACTOR_TYPE1 = Internal.createForeignKey(HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE, DSL.name("fk_handler_valid_actor_type_actor_type1"), new TableField[] { HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE.ACTOR_TYPE_ID }, Keys.KEY_ACTOR_TYPE_PRIMARY, new TableField[] { ActorType.ACTOR_TYPE.ID }, true);
    public static final ForeignKey<HandlerValidActorTypeRecord, HandlerRecord> FK_HANDLER_VALID_ACTOR_TYPE_HANDLER1 = Internal.createForeignKey(HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE, DSL.name("fk_handler_valid_actor_type_handler1"), new TableField[] { HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE.HANDLER_ID }, Keys.KEY_HANDLER_PRIMARY, new TableField[] { Handler.HANDLER.ID }, true);
    public static final ForeignKey<HandlerValidProductRecord, HandlerRecord> FK_HANDLER_PRODUCT_HANDLER1 = Internal.createForeignKey(HandlerValidProduct.HANDLER_VALID_PRODUCT, DSL.name("fk_handler_product_handler1"), new TableField[] { HandlerValidProduct.HANDLER_VALID_PRODUCT.HANDLER_ID }, Keys.KEY_HANDLER_PRIMARY, new TableField[] { Handler.HANDLER.ID }, true);
    public static final ForeignKey<HandlerValidProductRecord, ProductRecord> FK_HANDLER_PRODUCT_PRODUCT1 = Internal.createForeignKey(HandlerValidProduct.HANDLER_VALID_PRODUCT, DSL.name("fk_handler_product_product1"), new TableField[] { HandlerValidProduct.HANDLER_VALID_PRODUCT.PRODUCT_ID }, Keys.KEY_PRODUCT_PRIMARY, new TableField[] { Product.PRODUCT.ID }, true);
    public static final ForeignKey<HandlerValueRecord, HandlerRecord> FK_HANDLER_VALUE_HANDLER1 = Internal.createForeignKey(HandlerValue.HANDLER_VALUE, DSL.name("fk_handler_value_handler1"), new TableField[] { HandlerValue.HANDLER_VALUE.HANDLER_ID }, Keys.KEY_HANDLER_PRIMARY, new TableField[] { Handler.HANDLER.ID }, true);
    public static final ForeignKey<HandlerValueRecord, HandlerParameterRecord> FK_HANDLER_VALUE_HANDLER_PARAMETER1 = Internal.createForeignKey(HandlerValue.HANDLER_VALUE, DSL.name("fk_handler_value_handler_parameter1"), new TableField[] { HandlerValue.HANDLER_VALUE.HANDLER_PARAMETER_ID }, Keys.KEY_HANDLER_PARAMETER_PRIMARY, new TableField[] { HandlerParameter.HANDLER_PARAMETER.ID }, true);
    public static final ForeignKey<ListPageRecord, PageListRecord> FK_PAGE_PAGE_LIST1 = Internal.createForeignKey(ListPage.LIST_PAGE, DSL.name("fk_page_page_list1"), new TableField[] { ListPage.LIST_PAGE.PAGE_LIST_ID }, Keys.KEY_PAGE_LIST_PRIMARY, new TableField[] { PageList.PAGE_LIST.ID }, true);
    public static final ForeignKey<LocationRecord, LandmassRecord> FK_LOCATION_LANDMASS1 = Internal.createForeignKey(Location.LOCATION, DSL.name("fk_location_landmass1"), new TableField[] { Location.LOCATION.LANDMASS_ID }, Keys.KEY_LANDMASS_PRIMARY, new TableField[] { Landmass.LANDMASS.ID }, true);
    public static final ForeignKey<NewsActorRecord, ActorRecord> FK_NEWS_ACTOR_TYPE_COPY1_ACTOR1 = Internal.createForeignKey(NewsActor.NEWS_ACTOR, DSL.name("fk_news_actor_type_copy1_actor1"), new TableField[] { NewsActor.NEWS_ACTOR.ACTOR_ID }, Keys.KEY_ACTOR_PRIMARY, new TableField[] { Actor.ACTOR.ID }, true);
    public static final ForeignKey<NewsActorRecord, NewsMessageRecord> FK_NEWS_ACTOR_TYPE_NEWS_MESSAGE10 = Internal.createForeignKey(NewsActor.NEWS_ACTOR, DSL.name("fk_news_actor_type_news_message10"), new TableField[] { NewsActor.NEWS_ACTOR.NEWS_MESSAGE_ID }, Keys.KEY_NEWS_MESSAGE_PRIMARY, new TableField[] { NewsMessage.NEWS_MESSAGE.ID }, true);
    public static final ForeignKey<NewsActorTypeRecord, ActorTypeRecord> FK_NEWS_ACTOR_TYPE_ACTOR_TYPE1 = Internal.createForeignKey(NewsActorType.NEWS_ACTOR_TYPE, DSL.name("fk_news_actor_type_actor_type1"), new TableField[] { NewsActorType.NEWS_ACTOR_TYPE.ACTOR_TYPE_ID }, Keys.KEY_ACTOR_TYPE_PRIMARY, new TableField[] { ActorType.ACTOR_TYPE.ID }, true);
    public static final ForeignKey<NewsActorTypeRecord, NewsMessageRecord> FK_NEWS_ACTOR_TYPE_NEWS_MESSAGE1 = Internal.createForeignKey(NewsActorType.NEWS_ACTOR_TYPE, DSL.name("fk_news_actor_type_news_message1"), new TableField[] { NewsActorType.NEWS_ACTOR_TYPE.NEWS_MESSAGE_ID }, Keys.KEY_NEWS_MESSAGE_PRIMARY, new TableField[] { NewsMessage.NEWS_MESSAGE.ID }, true);
    public static final ForeignKey<NewsMessageRecord, GameScenarioRecord> FK_NEWS_MESSAGE_GAME_SCENARIO1 = Internal.createForeignKey(NewsMessage.NEWS_MESSAGE, DSL.name("fk_news_message_game_scenario1"), new TableField[] { NewsMessage.NEWS_MESSAGE.GAME_SCENARIO_ID }, Keys.KEY_GAME_SCENARIO_PRIMARY, new TableField[] { GameScenario.GAME_SCENARIO.ID }, true);
    public static final ForeignKey<NewsMessageRecord, TriggerFixedRecord> FK_NEWS_MESSAGE_TRIGGER_FIXED1 = Internal.createForeignKey(NewsMessage.NEWS_MESSAGE, DSL.name("fk_news_message_trigger_fixed1"), new TableField[] { NewsMessage.NEWS_MESSAGE.TRIGGER_FIXED_ID }, Keys.KEY_TRIGGER_FIXED_PRIMARY, new TableField[] { TriggerFixed.TRIGGER_FIXED.ID }, true);
    public static final ForeignKey<OrganizationGameRecord, GameRecord> FK_ORGANIZATION_GAME_GAME1 = Internal.createForeignKey(OrganizationGame.ORGANIZATION_GAME, DSL.name("fk_organization_game_game1"), new TableField[] { OrganizationGame.ORGANIZATION_GAME.GAME_ID }, Keys.KEY_GAME_PRIMARY, new TableField[] { Game.GAME.ID }, true);
    public static final ForeignKey<OrganizationGameRecord, OrganizationRecord> FK_ORGANIZATION_GAME_ORGANIZATION1 = Internal.createForeignKey(OrganizationGame.ORGANIZATION_GAME, DSL.name("fk_organization_game_organization1"), new TableField[] { OrganizationGame.ORGANIZATION_GAME.ORGANIZATION_ID }, Keys.KEY_ORGANIZATION_PRIMARY, new TableField[] { Organization.ORGANIZATION.ID }, true);
    public static final ForeignKey<OrganizationGameRoleRecord, OrganizationGameRecord> FK_ORGANIZATION_GAME_ROLE_ORGANIZATION_GAME1 = Internal.createForeignKey(OrganizationGameRole.ORGANIZATION_GAME_ROLE, DSL.name("fk_organization_game_role_organization_game1"), new TableField[] { OrganizationGameRole.ORGANIZATION_GAME_ROLE.ORGANIZATION_GAME_ID }, Keys.KEY_ORGANIZATION_GAME_PRIMARY, new TableField[] { OrganizationGame.ORGANIZATION_GAME.ID }, true);
    public static final ForeignKey<OrganizationGameRoleRecord, UserRecord> FK_ORGANIZATION_GAME_ROLE_USER1 = Internal.createForeignKey(OrganizationGameRole.ORGANIZATION_GAME_ROLE, DSL.name("fk_organization_game_role_user1"), new TableField[] { OrganizationGameRole.ORGANIZATION_GAME_ROLE.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<OrganizationRoleRecord, OrganizationRecord> FK_ORGANIZATION_ROLE_ORGANIZATION1 = Internal.createForeignKey(OrganizationRole.ORGANIZATION_ROLE, DSL.name("fk_organization_role_organization1"), new TableField[] { OrganizationRole.ORGANIZATION_ROLE.ORGANIZATION_ID }, Keys.KEY_ORGANIZATION_PRIMARY, new TableField[] { Organization.ORGANIZATION.ID }, true);
    public static final ForeignKey<OrganizationRoleRecord, UserRecord> FK_ORGANIZATION_ROLE_USER = Internal.createForeignKey(OrganizationRole.ORGANIZATION_ROLE, DSL.name("fk_organization_role_user"), new TableField[] { OrganizationRole.ORGANIZATION_ROLE.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<PlayerRecord, GameSessionRecord> FK_PLAYER_GAME_SESSION1 = Internal.createForeignKey(Player.PLAYER, DSL.name("fk_player_game_session1"), new TableField[] { Player.PLAYER.GAME_SESSION_ID }, Keys.KEY_GAME_SESSION_PRIMARY, new TableField[] { GameSession.GAME_SESSION.ID }, true);
    public static final ForeignKey<PlayerRecord, UserRecord> FK_PLAYER_USER1 = Internal.createForeignKey(Player.PLAYER, DSL.name("fk_player_user1"), new TableField[] { Player.PLAYER.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<PlayerDecisionRecord, PlayerRecord> FK_CHOSEN_STRATEGY_PLAYER10 = Internal.createForeignKey(PlayerDecision.PLAYER_DECISION, DSL.name("fk_chosen_strategy_player10"), new TableField[] { PlayerDecision.PLAYER_DECISION.PLAYER_ID }, Keys.KEY_PLAYER_PRIMARY, new TableField[] { Player.PLAYER.ID }, true);
    public static final ForeignKey<PlayerScoreRecord, GoalRecord> FK_PLAYER_SCORE_GOAL1 = Internal.createForeignKey(PlayerScore.PLAYER_SCORE, DSL.name("fk_player_score_goal1"), new TableField[] { PlayerScore.PLAYER_SCORE.GOAL_ID }, Keys.KEY_GOAL_PRIMARY, new TableField[] { Goal.GOAL.ID }, true);
    public static final ForeignKey<PlayerScoreRecord, PlayerRecord> FK_PLAYER_SCORE_PLAYER1 = Internal.createForeignKey(PlayerScore.PLAYER_SCORE, DSL.name("fk_player_score_player1"), new TableField[] { PlayerScore.PLAYER_SCORE.PLAYER_ID }, Keys.KEY_PLAYER_PRIMARY, new TableField[] { Player.PLAYER.ID }, true);
    public static final ForeignKey<ProcessRecord, ProcessTypeRecord> FK_PROCESS_PROCESS_TYPE1 = Internal.createForeignKey(Process.PROCESS, DSL.name("fk_process_process_type1"), new TableField[] { Process.PROCESS.PROCESS_TYPE_ID }, Keys.KEY_PROCESS_TYPE_PRIMARY, new TableField[] { ProcessType.PROCESS_TYPE.ID }, true);
    public static final ForeignKey<ProcessRecord, RoleRecord> FK_PROCESS_ROLE1 = Internal.createForeignKey(Process.PROCESS, DSL.name("fk_process_role1"), new TableField[] { Process.PROCESS.ROLE_ID }, Keys.KEY_ROLE_PRIMARY, new TableField[] { Role.ROLE.ID }, true);
    public static final ForeignKey<ProcessParameterRecord, ParameterTypeRecord> FK_PARAMETER_PARAMETER_TYPE100 = Internal.createForeignKey(ProcessParameter.PROCESS_PARAMETER, DSL.name("fk_parameter_parameter_type100"), new TableField[] { ProcessParameter.PROCESS_PARAMETER.PARAMETER_TYPE_ID }, Keys.KEY_PARAMETER_TYPE_PRIMARY, new TableField[] { ParameterType.PARAMETER_TYPE.ID }, true);
    public static final ForeignKey<ProcessParameterRecord, ProcessTypeRecord> FK_PROCESS_PARAMETER_PROCESS_TYPE1 = Internal.createForeignKey(ProcessParameter.PROCESS_PARAMETER, DSL.name("fk_process_parameter_process_type1"), new TableField[] { ProcessParameter.PROCESS_PARAMETER.PROCESS_TYPE_ID }, Keys.KEY_PROCESS_TYPE_PRIMARY, new TableField[] { ProcessType.PROCESS_TYPE.ID }, true);
    public static final ForeignKey<ProcessTypeRecord, RoleTypeRecord> FK_PROCESS_TYPE_ROLE_TYPE1 = Internal.createForeignKey(ProcessType.PROCESS_TYPE, DSL.name("fk_process_type_role_type1"), new TableField[] { ProcessType.PROCESS_TYPE.ROLE_TYPE_ID }, Keys.KEY_ROLE_TYPE_PRIMARY, new TableField[] { RoleType.ROLE_TYPE.ID }, true);
    public static final ForeignKey<ProcessValueRecord, ProcessRecord> FK_PROCESS_VALUE_PROCESS1 = Internal.createForeignKey(ProcessValue.PROCESS_VALUE, DSL.name("fk_process_value_process1"), new TableField[] { ProcessValue.PROCESS_VALUE.PROCESS_ID }, Keys.KEY_PROCESS_PRIMARY, new TableField[] { Process.PROCESS.ID }, true);
    public static final ForeignKey<ProcessValueRecord, ProcessParameterRecord> FK_PROCESS_VALUE_PROCESS_PARAMETER1 = Internal.createForeignKey(ProcessValue.PROCESS_VALUE, DSL.name("fk_process_value_process_parameter1"), new TableField[] { ProcessValue.PROCESS_VALUE.PROCESS_PARAMETER_ID }, Keys.KEY_PROCESS_PARAMETER_PRIMARY, new TableField[] { ProcessParameter.PROCESS_PARAMETER.ID }, true);
    public static final ForeignKey<ProductRecord, GameVersionRecord> FK_PRODUCT_GAME_VERSION1 = Internal.createForeignKey(Product.PRODUCT, DSL.name("fk_product_game_version1"), new TableField[] { Product.PRODUCT.GAME_VERSION_ID }, Keys.KEY_GAME_VERSION_PRIMARY, new TableField[] { GameVersion.GAME_VERSION.ID }, true);
    public static final ForeignKey<ProductRecord, SkuRecord> FK_PRODUCT_SKU1 = Internal.createForeignKey(Product.PRODUCT, DSL.name("fk_product_sku1"), new TableField[] { Product.PRODUCT.SKU_ID }, Keys.KEY_SKU_PRIMARY, new TableField[] { Sku.SKU.ID }, true);
    public static final ForeignKey<RoleRecord, ActorRecord> FK_ROLE_ACTOR1 = Internal.createForeignKey(Role.ROLE, DSL.name("fk_role_actor1"), new TableField[] { Role.ROLE.ACTOR_ID }, Keys.KEY_ACTOR_PRIMARY, new TableField[] { Actor.ACTOR.ID }, true);
    public static final ForeignKey<RoleRecord, ContentReceiverRecord> FK_ROLE_CONTENT_RECEIVER1 = Internal.createForeignKey(Role.ROLE, DSL.name("fk_role_content_receiver1"), new TableField[] { Role.ROLE.CONTENT_RECEIVER_ID }, Keys.KEY_CONTENT_RECEIVER_PRIMARY, new TableField[] { ContentReceiver.CONTENT_RECEIVER.ID }, true);
    public static final ForeignKey<RoleRecord, RoleTypeRecord> FK_ROLE_ROLE_TYPE1 = Internal.createForeignKey(Role.ROLE, DSL.name("fk_role_role_type1"), new TableField[] { Role.ROLE.ROLE_TYPE_ID }, Keys.KEY_ROLE_TYPE_PRIMARY, new TableField[] { RoleType.ROLE_TYPE.ID }, true);
    public static final ForeignKey<RoleParameterRecord, ParameterTypeRecord> FK_ROLE_PARAMETER_PARAMETER_TYPE1 = Internal.createForeignKey(RoleParameter.ROLE_PARAMETER, DSL.name("fk_role_parameter_parameter_type1"), new TableField[] { RoleParameter.ROLE_PARAMETER.PARAMETER_TYPE_ID }, Keys.KEY_PARAMETER_TYPE_PRIMARY, new TableField[] { ParameterType.PARAMETER_TYPE.ID }, true);
    public static final ForeignKey<RoleParameterRecord, RoleTypeRecord> FK_ROLE_PARAMETER_ROLE_TYPE1 = Internal.createForeignKey(RoleParameter.ROLE_PARAMETER, DSL.name("fk_role_parameter_role_type1"), new TableField[] { RoleParameter.ROLE_PARAMETER.ROLE_TYPE_ID }, Keys.KEY_ROLE_TYPE_PRIMARY, new TableField[] { RoleType.ROLE_TYPE.ID }, true);
    public static final ForeignKey<RoleTypeRecord, ActorTypeRecord> FK_ACTOR_ROLE_ACTOR_TYPE1 = Internal.createForeignKey(RoleType.ROLE_TYPE, DSL.name("fk_actor_role_actor_type1"), new TableField[] { RoleType.ROLE_TYPE.ACTOR_TYPE_ID }, Keys.KEY_ACTOR_TYPE_PRIMARY, new TableField[] { ActorType.ACTOR_TYPE.ID }, true);
    public static final ForeignKey<RoleValueRecord, RoleRecord> FK_ROLE_VALUE_ROLE1 = Internal.createForeignKey(RoleValue.ROLE_VALUE, DSL.name("fk_role_value_role1"), new TableField[] { RoleValue.ROLE_VALUE.ROLE_ID }, Keys.KEY_ROLE_PRIMARY, new TableField[] { Role.ROLE.ID }, true);
    public static final ForeignKey<RoleValueRecord, RoleParameterRecord> FK_ROLE_VALUE_ROLE_PARAMETER1 = Internal.createForeignKey(RoleValue.ROLE_VALUE, DSL.name("fk_role_value_role_parameter1"), new TableField[] { RoleValue.ROLE_VALUE.ROLE_PARAMETER_ID }, Keys.KEY_ROLE_PARAMETER_PRIMARY, new TableField[] { RoleParameter.ROLE_PARAMETER.ID }, true);
    public static final ForeignKey<SentContentRecord, ActorRecord> FK_SENT_CONTENT_ACTOR1 = Internal.createForeignKey(SentContent.SENT_CONTENT, DSL.name("fk_sent_content_actor1"), new TableField[] { SentContent.SENT_CONTENT.FROM_ACTOR_ID }, Keys.KEY_ACTOR_PRIMARY, new TableField[] { Actor.ACTOR.ID }, true);
    public static final ForeignKey<SentContentRecord, ActorRecord> FK_SENT_CONTENT_ACTOR2 = Internal.createForeignKey(SentContent.SENT_CONTENT, DSL.name("fk_sent_content_actor2"), new TableField[] { SentContent.SENT_CONTENT.TO_ACTOR_ID }, Keys.KEY_ACTOR_PRIMARY, new TableField[] { Actor.ACTOR.ID }, true);
    public static final ForeignKey<SentContentRecord, ContentTypeRecord> FK_SENT_CONTENT_CONTENT_TYPE1 = Internal.createForeignKey(SentContent.SENT_CONTENT, DSL.name("fk_sent_content_content_type1"), new TableField[] { SentContent.SENT_CONTENT.CONTENT_TYPE_ID }, Keys.KEY_CONTENT_TYPE_PRIMARY, new TableField[] { ContentType.CONTENT_TYPE.ID }, true);
    public static final ForeignKey<SentContentRecord, GameSessionRecord> FK_SENT_CONTENT_GAME_SESSION1 = Internal.createForeignKey(SentContent.SENT_CONTENT, DSL.name("fk_sent_content_game_session1"), new TableField[] { SentContent.SENT_CONTENT.GAME_SESSION_ID }, Keys.KEY_GAME_SESSION_PRIMARY, new TableField[] { GameSession.GAME_SESSION.ID }, true);
    public static final ForeignKey<TransferRecord, LocationRecord> FK_TRANSFER_LOCATION1 = Internal.createForeignKey(Transfer.TRANSFER, DSL.name("fk_transfer_location1"), new TableField[] { Transfer.TRANSFER.LOCATION2_ID }, Keys.KEY_LOCATION_PRIMARY, new TableField[] { Location.LOCATION.ID }, true);
    public static final ForeignKey<TransferRecord, LocationRecord> FK_TRANSFER_LOCATION2 = Internal.createForeignKey(Transfer.TRANSFER, DSL.name("fk_transfer_location2"), new TableField[] { Transfer.TRANSFER.LOCATION1_ID }, Keys.KEY_LOCATION_PRIMARY, new TableField[] { Location.LOCATION.ID }, true);
    public static final ForeignKey<TransferRecord, TransportModeRecord> FK_TRANSFER_TRANSPORT_MODE1 = Internal.createForeignKey(Transfer.TRANSFER, DSL.name("fk_transfer_transport_mode1"), new TableField[] { Transfer.TRANSFER.TRANSPORT_MODE_ID }, Keys.KEY_TRANSPORT_MODE_PRIMARY, new TableField[] { TransportMode.TRANSPORT_MODE.ID }, true);
    public static final ForeignKey<TriggeredEventRecord, EventRecord> FK_TRIGGERED_EVENT_EVENT1 = Internal.createForeignKey(TriggeredEvent.TRIGGERED_EVENT, DSL.name("fk_triggered_event_event1"), new TableField[] { TriggeredEvent.TRIGGERED_EVENT.EVENT_ID }, Keys.KEY_EVENT_PRIMARY, new TableField[] { Event.EVENT.ID }, true);
    public static final ForeignKey<TriggeredEventRecord, GameSessionRecord> FK_TRIGGERED_EVENT_GAME_SESSION1 = Internal.createForeignKey(TriggeredEvent.TRIGGERED_EVENT, DSL.name("fk_triggered_event_game_session1"), new TableField[] { TriggeredEvent.TRIGGERED_EVENT.GAME_SESSION_ID }, Keys.KEY_GAME_SESSION_PRIMARY, new TableField[] { GameSession.GAME_SESSION.ID }, true);
    public static final ForeignKey<TriggeredNewsMessageRecord, GameSessionRecord> FK_TRIGGERED_NEWS_MESSAGE_GAME_SESSION1 = Internal.createForeignKey(TriggeredNewsMessage.TRIGGERED_NEWS_MESSAGE, DSL.name("fk_triggered_news_message_game_session1"), new TableField[] { TriggeredNewsMessage.TRIGGERED_NEWS_MESSAGE.GAME_SESSION_ID }, Keys.KEY_GAME_SESSION_PRIMARY, new TableField[] { GameSession.GAME_SESSION.ID }, true);
    public static final ForeignKey<TriggeredNewsMessageRecord, NewsMessageRecord> FK_TRIGGERED_NEWS_MESSAGE_NEWS_MESSAGE1 = Internal.createForeignKey(TriggeredNewsMessage.TRIGGERED_NEWS_MESSAGE, DSL.name("fk_triggered_news_message_news_message1"), new TableField[] { TriggeredNewsMessage.TRIGGERED_NEWS_MESSAGE.NEWS_MESSAGE_ID }, Keys.KEY_NEWS_MESSAGE_PRIMARY, new TableField[] { NewsMessage.NEWS_MESSAGE.ID }, true);
    public static final ForeignKey<TriggeredProcessRecord, GameSessionRecord> FK_TRIGGERED_PROCESS_GAME_SESSION1 = Internal.createForeignKey(TriggeredProcess.TRIGGERED_PROCESS, DSL.name("fk_triggered_process_game_session1"), new TableField[] { TriggeredProcess.TRIGGERED_PROCESS.GAME_SESSION_ID }, Keys.KEY_GAME_SESSION_PRIMARY, new TableField[] { GameSession.GAME_SESSION.ID }, true);
    public static final ForeignKey<TriggeredProcessRecord, ProcessRecord> FK_TRIGGERED_PROCESS_PROCESS1 = Internal.createForeignKey(TriggeredProcess.TRIGGERED_PROCESS, DSL.name("fk_triggered_process_process1"), new TableField[] { TriggeredProcess.TRIGGERED_PROCESS.PROCESS_ID }, Keys.KEY_PROCESS_PRIMARY, new TableField[] { Process.PROCESS.ID }, true);
}
