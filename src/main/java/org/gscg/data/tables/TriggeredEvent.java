/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.TriggeredEventRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TriggeredEvent extends TableImpl<TriggeredEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.triggered_event</code>
     */
    public static final TriggeredEvent TRIGGERED_EVENT = new TriggeredEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TriggeredEventRecord> getRecordType() {
        return TriggeredEventRecord.class;
    }

    /**
     * The column <code>gscg.triggered_event.id</code>.
     */
    public final TableField<TriggeredEventRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.triggered_event.game_time</code>.
     */
    public final TableField<TriggeredEventRecord, LocalDateTime> GAME_TIME = createField(DSL.name("game_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.triggered_event.wall_time</code>.
     */
    public final TableField<TriggeredEventRecord, LocalDateTime> WALL_TIME = createField(DSL.name("wall_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.triggered_event.triggered_facilitator</code>.
     */
    public final TableField<TriggeredEventRecord, Byte> TRIGGERED_FACILITATOR = createField(DSL.name("triggered_facilitator"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gscg.triggered_event.state</code>.
     */
    public final TableField<TriggeredEventRecord, String> STATE = createField(DSL.name("state"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>gscg.triggered_event.event_id</code>.
     */
    public final TableField<TriggeredEventRecord, Integer> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.triggered_event.game_session_id</code>.
     */
    public final TableField<TriggeredEventRecord, Integer> GAME_SESSION_ID = createField(DSL.name("game_session_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private TriggeredEvent(Name alias, Table<TriggeredEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private TriggeredEvent(Name alias, Table<TriggeredEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.triggered_event</code> table reference
     */
    public TriggeredEvent(String alias) {
        this(DSL.name(alias), TRIGGERED_EVENT);
    }

    /**
     * Create an aliased <code>gscg.triggered_event</code> table reference
     */
    public TriggeredEvent(Name alias) {
        this(alias, TRIGGERED_EVENT);
    }

    /**
     * Create a <code>gscg.triggered_event</code> table reference
     */
    public TriggeredEvent() {
        this(DSL.name("triggered_event"), null);
    }

    public <O extends Record> TriggeredEvent(Table<O> child, ForeignKey<O, TriggeredEventRecord> key) {
        super(child, key, TRIGGERED_EVENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TRIGGERED_EVENT_FK_TRIGGERED_EVENT_EVENT1_IDX, Indexes.TRIGGERED_EVENT_FK_TRIGGERED_EVENT_GAME_SESSION1_IDX);
    }

    @Override
    public Identity<TriggeredEventRecord, Integer> getIdentity() {
        return (Identity<TriggeredEventRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TriggeredEventRecord> getPrimaryKey() {
        return Keys.KEY_TRIGGERED_EVENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<TriggeredEventRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TRIGGERED_EVENT_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<TriggeredEventRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TRIGGERED_EVENT_EVENT1, Keys.FK_TRIGGERED_EVENT_GAME_SESSION1);
    }

    private transient Event _event;
    private transient GameSession _gameSession;

    /**
     * Get the implicit join path to the <code>gscg.event</code> table.
     */
    public Event event() {
        if (_event == null)
            _event = new Event(this, Keys.FK_TRIGGERED_EVENT_EVENT1);

        return _event;
    }

    /**
     * Get the implicit join path to the <code>gscg.game_session</code> table.
     */
    public GameSession gameSession() {
        if (_gameSession == null)
            _gameSession = new GameSession(this, Keys.FK_TRIGGERED_EVENT_GAME_SESSION1);

        return _gameSession;
    }

    @Override
    public TriggeredEvent as(String alias) {
        return new TriggeredEvent(DSL.name(alias), this);
    }

    @Override
    public TriggeredEvent as(Name alias) {
        return new TriggeredEvent(alias, this);
    }

    @Override
    public TriggeredEvent as(Table<?> alias) {
        return new TriggeredEvent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggeredEvent rename(String name) {
        return new TriggeredEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggeredEvent rename(Name name) {
        return new TriggeredEvent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggeredEvent rename(Table<?> name) {
        return new TriggeredEvent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, LocalDateTime, LocalDateTime, Byte, String, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super Byte, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super Byte, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
