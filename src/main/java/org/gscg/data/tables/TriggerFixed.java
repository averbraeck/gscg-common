/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.TriggerFixedRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TriggerFixed extends TableImpl<TriggerFixedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.trigger_fixed</code>
     */
    public static final TriggerFixed TRIGGER_FIXED = new TriggerFixed();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TriggerFixedRecord> getRecordType() {
        return TriggerFixedRecord.class;
    }

    /**
     * The column <code>gscg.trigger_fixed.id</code>.
     */
    public final TableField<TriggerFixedRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.trigger_fixed.name</code>.
     */
    public final TableField<TriggerFixedRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.trigger_fixed.timestamp_datetime</code>.
     */
    public final TableField<TriggerFixedRecord, LocalDateTime> TIMESTAMP_DATETIME = createField(DSL.name("timestamp_datetime"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>gscg.trigger_fixed.timestamp_gametime</code>.
     */
    public final TableField<TriggerFixedRecord, Double> TIMESTAMP_GAMETIME = createField(DSL.name("timestamp_gametime"), SQLDataType.DOUBLE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>gscg.trigger_fixed.timestamp_unit</code>.
     */
    public final TableField<TriggerFixedRecord, String> TIMESTAMP_UNIT = createField(DSL.name("timestamp_unit"), SQLDataType.VARCHAR(10).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.trigger_fixed.facilitator_trigger</code>.
     */
    public final TableField<TriggerFixedRecord, Byte> FACILITATOR_TRIGGER = createField(DSL.name("facilitator_trigger"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gscg.trigger_fixed.trigger_once</code>.
     */
    public final TableField<TriggerFixedRecord, Byte> TRIGGER_ONCE = createField(DSL.name("trigger_once"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "");

    private TriggerFixed(Name alias, Table<TriggerFixedRecord> aliased) {
        this(alias, aliased, null);
    }

    private TriggerFixed(Name alias, Table<TriggerFixedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.trigger_fixed</code> table reference
     */
    public TriggerFixed(String alias) {
        this(DSL.name(alias), TRIGGER_FIXED);
    }

    /**
     * Create an aliased <code>gscg.trigger_fixed</code> table reference
     */
    public TriggerFixed(Name alias) {
        this(alias, TRIGGER_FIXED);
    }

    /**
     * Create a <code>gscg.trigger_fixed</code> table reference
     */
    public TriggerFixed() {
        this(DSL.name("trigger_fixed"), null);
    }

    public <O extends Record> TriggerFixed(Table<O> child, ForeignKey<O, TriggerFixedRecord> key) {
        super(child, key, TRIGGER_FIXED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public Identity<TriggerFixedRecord, Integer> getIdentity() {
        return (Identity<TriggerFixedRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TriggerFixedRecord> getPrimaryKey() {
        return Keys.KEY_TRIGGER_FIXED_PRIMARY;
    }

    @Override
    public List<UniqueKey<TriggerFixedRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TRIGGER_FIXED_ID_UNIQUE);
    }

    @Override
    public TriggerFixed as(String alias) {
        return new TriggerFixed(DSL.name(alias), this);
    }

    @Override
    public TriggerFixed as(Name alias) {
        return new TriggerFixed(alias, this);
    }

    @Override
    public TriggerFixed as(Table<?> alias) {
        return new TriggerFixed(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggerFixed rename(String name) {
        return new TriggerFixed(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggerFixed rename(Name name) {
        return new TriggerFixed(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggerFixed rename(Table<?> name) {
        return new TriggerFixed(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, LocalDateTime, Double, String, Byte, Byte> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super LocalDateTime, ? super Double, ? super String, ? super Byte, ? super Byte, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super LocalDateTime, ? super Double, ? super String, ? super Byte, ? super Byte, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
