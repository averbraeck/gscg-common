/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.GameScenarioRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameScenario extends TableImpl<GameScenarioRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.game_scenario</code>
     */
    public static final GameScenario GAME_SCENARIO = new GameScenario();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameScenarioRecord> getRecordType() {
        return GameScenarioRecord.class;
    }

    /**
     * The column <code>gscg.game_scenario.id</code>.
     */
    public final TableField<GameScenarioRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.game_scenario.name</code>.
     */
    public final TableField<GameScenarioRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.game_scenario.description</code>.
     */
    public final TableField<GameScenarioRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gscg.game_scenario.game_version_id</code>.
     */
    public final TableField<GameScenarioRecord, Integer> GAME_VERSION_ID = createField(DSL.name("game_version_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GameScenario(Name alias, Table<GameScenarioRecord> aliased) {
        this(alias, aliased, null);
    }

    private GameScenario(Name alias, Table<GameScenarioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.game_scenario</code> table reference
     */
    public GameScenario(String alias) {
        this(DSL.name(alias), GAME_SCENARIO);
    }

    /**
     * Create an aliased <code>gscg.game_scenario</code> table reference
     */
    public GameScenario(Name alias) {
        this(alias, GAME_SCENARIO);
    }

    /**
     * Create a <code>gscg.game_scenario</code> table reference
     */
    public GameScenario() {
        this(DSL.name("game_scenario"), null);
    }

    public <O extends Record> GameScenario(Table<O> child, ForeignKey<O, GameScenarioRecord> key) {
        super(child, key, GAME_SCENARIO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAME_SCENARIO_FK_GAME_SCENARIO_GAME_VERSION1_IDX);
    }

    @Override
    public Identity<GameScenarioRecord, Integer> getIdentity() {
        return (Identity<GameScenarioRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameScenarioRecord> getPrimaryKey() {
        return Keys.KEY_GAME_SCENARIO_PRIMARY;
    }

    @Override
    public List<UniqueKey<GameScenarioRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GAME_SCENARIO_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GameScenarioRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GAME_SCENARIO_GAME_VERSION1);
    }

    private transient GameVersion _gameVersion;

    /**
     * Get the implicit join path to the <code>gscg.game_version</code> table.
     */
    public GameVersion gameVersion() {
        if (_gameVersion == null)
            _gameVersion = new GameVersion(this, Keys.FK_GAME_SCENARIO_GAME_VERSION1);

        return _gameVersion;
    }

    @Override
    public GameScenario as(String alias) {
        return new GameScenario(DSL.name(alias), this);
    }

    @Override
    public GameScenario as(Name alias) {
        return new GameScenario(alias, this);
    }

    @Override
    public GameScenario as(Table<?> alias) {
        return new GameScenario(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameScenario rename(String name) {
        return new GameScenario(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameScenario rename(Name name) {
        return new GameScenario(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameScenario rename(Table<?> name) {
        return new GameScenario(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
