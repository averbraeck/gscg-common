/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.HandlerParameterRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HandlerParameter extends TableImpl<HandlerParameterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.handler_parameter</code>
     */
    public static final HandlerParameter HANDLER_PARAMETER = new HandlerParameter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HandlerParameterRecord> getRecordType() {
        return HandlerParameterRecord.class;
    }

    /**
     * The column <code>gscg.handler_parameter.id</code>.
     */
    public final TableField<HandlerParameterRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.handler_parameter.name</code>.
     */
    public final TableField<HandlerParameterRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.handler_parameter.default_value</code>.
     */
    public final TableField<HandlerParameterRecord, String> DEFAULT_VALUE = createField(DSL.name("default_value"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gscg.handler_parameter.parameter_type_id</code>.
     */
    public final TableField<HandlerParameterRecord, Integer> PARAMETER_TYPE_ID = createField(DSL.name("parameter_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.handler_parameter.handler_type_id</code>.
     */
    public final TableField<HandlerParameterRecord, Integer> HANDLER_TYPE_ID = createField(DSL.name("handler_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private HandlerParameter(Name alias, Table<HandlerParameterRecord> aliased) {
        this(alias, aliased, null);
    }

    private HandlerParameter(Name alias, Table<HandlerParameterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.handler_parameter</code> table reference
     */
    public HandlerParameter(String alias) {
        this(DSL.name(alias), HANDLER_PARAMETER);
    }

    /**
     * Create an aliased <code>gscg.handler_parameter</code> table reference
     */
    public HandlerParameter(Name alias) {
        this(alias, HANDLER_PARAMETER);
    }

    /**
     * Create a <code>gscg.handler_parameter</code> table reference
     */
    public HandlerParameter() {
        this(DSL.name("handler_parameter"), null);
    }

    public <O extends Record> HandlerParameter(Table<O> child, ForeignKey<O, HandlerParameterRecord> key) {
        super(child, key, HANDLER_PARAMETER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HANDLER_PARAMETER_FK_HANDLER_PARAMETER_HANDLER_TYPE1_IDX, Indexes.HANDLER_PARAMETER_FK_PARAMETER_PARAMETER_TYPE1_IDX);
    }

    @Override
    public Identity<HandlerParameterRecord, Integer> getIdentity() {
        return (Identity<HandlerParameterRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HandlerParameterRecord> getPrimaryKey() {
        return Keys.KEY_HANDLER_PARAMETER_PRIMARY;
    }

    @Override
    public List<UniqueKey<HandlerParameterRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_HANDLER_PARAMETER_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<HandlerParameterRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PARAMETER_PARAMETER_TYPE10, Keys.FK_HANDLER_PARAMETER_HANDLER_TYPE1);
    }

    private transient ParameterType _parameterType;
    private transient HandlerType _handlerType;

    /**
     * Get the implicit join path to the <code>gscg.parameter_type</code> table.
     */
    public ParameterType parameterType() {
        if (_parameterType == null)
            _parameterType = new ParameterType(this, Keys.FK_PARAMETER_PARAMETER_TYPE10);

        return _parameterType;
    }

    /**
     * Get the implicit join path to the <code>gscg.handler_type</code> table.
     */
    public HandlerType handlerType() {
        if (_handlerType == null)
            _handlerType = new HandlerType(this, Keys.FK_HANDLER_PARAMETER_HANDLER_TYPE1);

        return _handlerType;
    }

    @Override
    public HandlerParameter as(String alias) {
        return new HandlerParameter(DSL.name(alias), this);
    }

    @Override
    public HandlerParameter as(Name alias) {
        return new HandlerParameter(alias, this);
    }

    @Override
    public HandlerParameter as(Table<?> alias) {
        return new HandlerParameter(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HandlerParameter rename(String name) {
        return new HandlerParameter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HandlerParameter rename(Name name) {
        return new HandlerParameter(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HandlerParameter rename(Table<?> name) {
        return new HandlerParameter(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
