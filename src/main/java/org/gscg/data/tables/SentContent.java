/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.SentContentRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SentContent extends TableImpl<SentContentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.sent_content</code>
     */
    public static final SentContent SENT_CONTENT = new SentContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SentContentRecord> getRecordType() {
        return SentContentRecord.class;
    }

    /**
     * The column <code>gscg.sent_content.id</code>.
     */
    public final TableField<SentContentRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.sent_content.game_time</code>.
     */
    public final TableField<SentContentRecord, LocalDateTime> GAME_TIME = createField(DSL.name("game_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.sent_content.wall_time</code>.
     */
    public final TableField<SentContentRecord, LocalDateTime> WALL_TIME = createField(DSL.name("wall_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.sent_content.state</code>.
     */
    public final TableField<SentContentRecord, String> STATE = createField(DSL.name("state"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gscg.sent_content.game_session_id</code>.
     */
    public final TableField<SentContentRecord, Integer> GAME_SESSION_ID = createField(DSL.name("game_session_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.sent_content.content_type_id</code>.
     */
    public final TableField<SentContentRecord, Integer> CONTENT_TYPE_ID = createField(DSL.name("content_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.sent_content.from_actor_id</code>.
     */
    public final TableField<SentContentRecord, Integer> FROM_ACTOR_ID = createField(DSL.name("from_actor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.sent_content.to_actor_id</code>.
     */
    public final TableField<SentContentRecord, Integer> TO_ACTOR_ID = createField(DSL.name("to_actor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private SentContent(Name alias, Table<SentContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private SentContent(Name alias, Table<SentContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.sent_content</code> table reference
     */
    public SentContent(String alias) {
        this(DSL.name(alias), SENT_CONTENT);
    }

    /**
     * Create an aliased <code>gscg.sent_content</code> table reference
     */
    public SentContent(Name alias) {
        this(alias, SENT_CONTENT);
    }

    /**
     * Create a <code>gscg.sent_content</code> table reference
     */
    public SentContent() {
        this(DSL.name("sent_content"), null);
    }

    public <O extends Record> SentContent(Table<O> child, ForeignKey<O, SentContentRecord> key) {
        super(child, key, SENT_CONTENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SENT_CONTENT_FK_SENT_CONTENT_ACTOR1_IDX, Indexes.SENT_CONTENT_FK_SENT_CONTENT_ACTOR2_IDX, Indexes.SENT_CONTENT_FK_SENT_CONTENT_CONTENT_TYPE1_IDX, Indexes.SENT_CONTENT_FK_SENT_CONTENT_GAME_SESSION1_IDX);
    }

    @Override
    public Identity<SentContentRecord, Integer> getIdentity() {
        return (Identity<SentContentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SentContentRecord> getPrimaryKey() {
        return Keys.KEY_SENT_CONTENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<SentContentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SENT_CONTENT_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<SentContentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_SENT_CONTENT_GAME_SESSION1, Keys.FK_SENT_CONTENT_CONTENT_TYPE1, Keys.FK_SENT_CONTENT_ACTOR1, Keys.FK_SENT_CONTENT_ACTOR2);
    }

    private transient GameSession _gameSession;
    private transient ContentType _contentType;
    private transient Actor _fkSentContentActor1;
    private transient Actor _fkSentContentActor2;

    /**
     * Get the implicit join path to the <code>gscg.game_session</code> table.
     */
    public GameSession gameSession() {
        if (_gameSession == null)
            _gameSession = new GameSession(this, Keys.FK_SENT_CONTENT_GAME_SESSION1);

        return _gameSession;
    }

    /**
     * Get the implicit join path to the <code>gscg.content_type</code> table.
     */
    public ContentType contentType() {
        if (_contentType == null)
            _contentType = new ContentType(this, Keys.FK_SENT_CONTENT_CONTENT_TYPE1);

        return _contentType;
    }

    /**
     * Get the implicit join path to the <code>gscg.actor</code> table, via the
     * <code>fk_sent_content_actor1</code> key.
     */
    public Actor fkSentContentActor1() {
        if (_fkSentContentActor1 == null)
            _fkSentContentActor1 = new Actor(this, Keys.FK_SENT_CONTENT_ACTOR1);

        return _fkSentContentActor1;
    }

    /**
     * Get the implicit join path to the <code>gscg.actor</code> table, via the
     * <code>fk_sent_content_actor2</code> key.
     */
    public Actor fkSentContentActor2() {
        if (_fkSentContentActor2 == null)
            _fkSentContentActor2 = new Actor(this, Keys.FK_SENT_CONTENT_ACTOR2);

        return _fkSentContentActor2;
    }

    @Override
    public SentContent as(String alias) {
        return new SentContent(DSL.name(alias), this);
    }

    @Override
    public SentContent as(Name alias) {
        return new SentContent(alias, this);
    }

    @Override
    public SentContent as(Table<?> alias) {
        return new SentContent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SentContent rename(String name) {
        return new SentContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SentContent rename(Name name) {
        return new SentContent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SentContent rename(Table<?> name) {
        return new SentContent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, LocalDateTime, LocalDateTime, String, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
