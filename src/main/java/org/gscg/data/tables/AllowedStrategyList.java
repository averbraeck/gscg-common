/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.AllowedStrategyListRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AllowedStrategyList extends TableImpl<AllowedStrategyListRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.allowed_strategy_list</code>
     */
    public static final AllowedStrategyList ALLOWED_STRATEGY_LIST = new AllowedStrategyList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AllowedStrategyListRecord> getRecordType() {
        return AllowedStrategyListRecord.class;
    }

    /**
     * The column <code>gscg.allowed_strategy_list.id</code>.
     */
    public final TableField<AllowedStrategyListRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.allowed_strategy_list.name</code>.
     */
    public final TableField<AllowedStrategyListRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.allowed_strategy_list.header_html</code>.
     */
    public final TableField<AllowedStrategyListRecord, String> HEADER_HTML = createField(DSL.name("header_html"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>gscg.allowed_strategy_list.page_id</code>.
     */
    public final TableField<AllowedStrategyListRecord, Integer> PAGE_ID = createField(DSL.name("page_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    private AllowedStrategyList(Name alias, Table<AllowedStrategyListRecord> aliased) {
        this(alias, aliased, null);
    }

    private AllowedStrategyList(Name alias, Table<AllowedStrategyListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.allowed_strategy_list</code> table reference
     */
    public AllowedStrategyList(String alias) {
        this(DSL.name(alias), ALLOWED_STRATEGY_LIST);
    }

    /**
     * Create an aliased <code>gscg.allowed_strategy_list</code> table reference
     */
    public AllowedStrategyList(Name alias) {
        this(alias, ALLOWED_STRATEGY_LIST);
    }

    /**
     * Create a <code>gscg.allowed_strategy_list</code> table reference
     */
    public AllowedStrategyList() {
        this(DSL.name("allowed_strategy_list"), null);
    }

    public <O extends Record> AllowedStrategyList(Table<O> child, ForeignKey<O, AllowedStrategyListRecord> key) {
        super(child, key, ALLOWED_STRATEGY_LIST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ALLOWED_STRATEGY_LIST_FK_ALLOWED_STRATEGY_LIST_PAGE1_IDX);
    }

    @Override
    public Identity<AllowedStrategyListRecord, Integer> getIdentity() {
        return (Identity<AllowedStrategyListRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AllowedStrategyListRecord> getPrimaryKey() {
        return Keys.KEY_ALLOWED_STRATEGY_LIST_PRIMARY;
    }

    @Override
    public List<UniqueKey<AllowedStrategyListRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ALLOWED_STRATEGY_LIST_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<AllowedStrategyListRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ALLOWED_STRATEGY_LIST_PAGE1);
    }

    private transient Page _page;

    /**
     * Get the implicit join path to the <code>gscg.page</code> table.
     */
    public Page page() {
        if (_page == null)
            _page = new Page(this, Keys.FK_ALLOWED_STRATEGY_LIST_PAGE1);

        return _page;
    }

    @Override
    public AllowedStrategyList as(String alias) {
        return new AllowedStrategyList(DSL.name(alias), this);
    }

    @Override
    public AllowedStrategyList as(Name alias) {
        return new AllowedStrategyList(alias, this);
    }

    @Override
    public AllowedStrategyList as(Table<?> alias) {
        return new AllowedStrategyList(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AllowedStrategyList rename(String name) {
        return new AllowedStrategyList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AllowedStrategyList rename(Name name) {
        return new AllowedStrategyList(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AllowedStrategyList rename(Table<?> name) {
        return new AllowedStrategyList(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
