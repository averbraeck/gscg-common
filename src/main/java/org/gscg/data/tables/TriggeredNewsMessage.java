/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.TriggeredNewsMessageRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TriggeredNewsMessage extends TableImpl<TriggeredNewsMessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.triggered_news_message</code>
     */
    public static final TriggeredNewsMessage TRIGGERED_NEWS_MESSAGE = new TriggeredNewsMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TriggeredNewsMessageRecord> getRecordType() {
        return TriggeredNewsMessageRecord.class;
    }

    /**
     * The column <code>gscg.triggered_news_message.id</code>.
     */
    public final TableField<TriggeredNewsMessageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.triggered_news_message.game_time</code>.
     */
    public final TableField<TriggeredNewsMessageRecord, LocalDateTime> GAME_TIME = createField(DSL.name("game_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.triggered_news_message.wall_time</code>.
     */
    public final TableField<TriggeredNewsMessageRecord, LocalDateTime> WALL_TIME = createField(DSL.name("wall_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column
     * <code>gscg.triggered_news_message.triggered_facilitator</code>.
     */
    public final TableField<TriggeredNewsMessageRecord, Byte> TRIGGERED_FACILITATOR = createField(DSL.name("triggered_facilitator"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gscg.triggered_news_message.news_message_id</code>.
     */
    public final TableField<TriggeredNewsMessageRecord, Integer> NEWS_MESSAGE_ID = createField(DSL.name("news_message_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.triggered_news_message.game_session_id</code>.
     */
    public final TableField<TriggeredNewsMessageRecord, Integer> GAME_SESSION_ID = createField(DSL.name("game_session_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private TriggeredNewsMessage(Name alias, Table<TriggeredNewsMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private TriggeredNewsMessage(Name alias, Table<TriggeredNewsMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.triggered_news_message</code> table
     * reference
     */
    public TriggeredNewsMessage(String alias) {
        this(DSL.name(alias), TRIGGERED_NEWS_MESSAGE);
    }

    /**
     * Create an aliased <code>gscg.triggered_news_message</code> table
     * reference
     */
    public TriggeredNewsMessage(Name alias) {
        this(alias, TRIGGERED_NEWS_MESSAGE);
    }

    /**
     * Create a <code>gscg.triggered_news_message</code> table reference
     */
    public TriggeredNewsMessage() {
        this(DSL.name("triggered_news_message"), null);
    }

    public <O extends Record> TriggeredNewsMessage(Table<O> child, ForeignKey<O, TriggeredNewsMessageRecord> key) {
        super(child, key, TRIGGERED_NEWS_MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TRIGGERED_NEWS_MESSAGE_FK_TRIGGERED_NEWS_MESSAGE_GAME_SESSION1_IDX, Indexes.TRIGGERED_NEWS_MESSAGE_FK_TRIGGERED_NEWS_MESSAGE_NEWS_MESSAGE1_IDX);
    }

    @Override
    public Identity<TriggeredNewsMessageRecord, Integer> getIdentity() {
        return (Identity<TriggeredNewsMessageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TriggeredNewsMessageRecord> getPrimaryKey() {
        return Keys.KEY_TRIGGERED_NEWS_MESSAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<TriggeredNewsMessageRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TRIGGERED_NEWS_MESSAGE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<TriggeredNewsMessageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TRIGGERED_NEWS_MESSAGE_NEWS_MESSAGE1, Keys.FK_TRIGGERED_NEWS_MESSAGE_GAME_SESSION1);
    }

    private transient NewsMessage _newsMessage;
    private transient GameSession _gameSession;

    /**
     * Get the implicit join path to the <code>gscg.news_message</code> table.
     */
    public NewsMessage newsMessage() {
        if (_newsMessage == null)
            _newsMessage = new NewsMessage(this, Keys.FK_TRIGGERED_NEWS_MESSAGE_NEWS_MESSAGE1);

        return _newsMessage;
    }

    /**
     * Get the implicit join path to the <code>gscg.game_session</code> table.
     */
    public GameSession gameSession() {
        if (_gameSession == null)
            _gameSession = new GameSession(this, Keys.FK_TRIGGERED_NEWS_MESSAGE_GAME_SESSION1);

        return _gameSession;
    }

    @Override
    public TriggeredNewsMessage as(String alias) {
        return new TriggeredNewsMessage(DSL.name(alias), this);
    }

    @Override
    public TriggeredNewsMessage as(Name alias) {
        return new TriggeredNewsMessage(alias, this);
    }

    @Override
    public TriggeredNewsMessage as(Table<?> alias) {
        return new TriggeredNewsMessage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggeredNewsMessage rename(String name) {
        return new TriggeredNewsMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggeredNewsMessage rename(Name name) {
        return new TriggeredNewsMessage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggeredNewsMessage rename(Table<?> name) {
        return new TriggeredNewsMessage(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, LocalDateTime, LocalDateTime, Byte, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super Byte, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super Byte, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
