/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.ChatMessageRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChatMessage extends TableImpl<ChatMessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.chat_message</code>
     */
    public static final ChatMessage CHAT_MESSAGE = new ChatMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatMessageRecord> getRecordType() {
        return ChatMessageRecord.class;
    }

    /**
     * The column <code>gscg.chat_message.id</code>.
     */
    public final TableField<ChatMessageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.chat_message.game_time</code>.
     */
    public final TableField<ChatMessageRecord, LocalDateTime> GAME_TIME = createField(DSL.name("game_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.chat_message.wall_time</code>.
     */
    public final TableField<ChatMessageRecord, LocalDateTime> WALL_TIME = createField(DSL.name("wall_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.chat_message.content</code>.
     */
    public final TableField<ChatMessageRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gscg.chat_message.from_facilitator</code>.
     */
    public final TableField<ChatMessageRecord, Byte> FROM_FACILITATOR = createField(DSL.name("from_facilitator"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gscg.chat_message.to_facilitator</code>.
     */
    public final TableField<ChatMessageRecord, Byte> TO_FACILITATOR = createField(DSL.name("to_facilitator"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gscg.chat_message.from_player_id</code>.
     */
    public final TableField<ChatMessageRecord, Integer> FROM_PLAYER_ID = createField(DSL.name("from_player_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gscg.chat_message.to_player_id</code>.
     */
    public final TableField<ChatMessageRecord, Integer> TO_PLAYER_ID = createField(DSL.name("to_player_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gscg.chat_message.game_session_id</code>.
     */
    public final TableField<ChatMessageRecord, Integer> GAME_SESSION_ID = createField(DSL.name("game_session_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private ChatMessage(Name alias, Table<ChatMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChatMessage(Name alias, Table<ChatMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.chat_message</code> table reference
     */
    public ChatMessage(String alias) {
        this(DSL.name(alias), CHAT_MESSAGE);
    }

    /**
     * Create an aliased <code>gscg.chat_message</code> table reference
     */
    public ChatMessage(Name alias) {
        this(alias, CHAT_MESSAGE);
    }

    /**
     * Create a <code>gscg.chat_message</code> table reference
     */
    public ChatMessage() {
        this(DSL.name("chat_message"), null);
    }

    public <O extends Record> ChatMessage(Table<O> child, ForeignKey<O, ChatMessageRecord> key) {
        super(child, key, CHAT_MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CHAT_MESSAGE_FK_CHAT_MESSAGE_GAME_SESSION1_IDX, Indexes.CHAT_MESSAGE_FK_CHAT_MESSAGE_PLAYER1_IDX, Indexes.CHAT_MESSAGE_FK_CHAT_MESSAGE_PLAYER2_IDX);
    }

    @Override
    public Identity<ChatMessageRecord, Integer> getIdentity() {
        return (Identity<ChatMessageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChatMessageRecord> getPrimaryKey() {
        return Keys.KEY_CHAT_MESSAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ChatMessageRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CHAT_MESSAGE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ChatMessageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_CHAT_MESSAGE_PLAYER1, Keys.FK_CHAT_MESSAGE_PLAYER2, Keys.FK_CHAT_MESSAGE_GAME_SESSION1);
    }

    private transient Player _fkChatMessagePlayer1;
    private transient Player _fkChatMessagePlayer2;
    private transient GameSession _gameSession;

    /**
     * Get the implicit join path to the <code>gscg.player</code> table, via the
     * <code>fk_chat_message_player1</code> key.
     */
    public Player fkChatMessagePlayer1() {
        if (_fkChatMessagePlayer1 == null)
            _fkChatMessagePlayer1 = new Player(this, Keys.FK_CHAT_MESSAGE_PLAYER1);

        return _fkChatMessagePlayer1;
    }

    /**
     * Get the implicit join path to the <code>gscg.player</code> table, via the
     * <code>fk_chat_message_player2</code> key.
     */
    public Player fkChatMessagePlayer2() {
        if (_fkChatMessagePlayer2 == null)
            _fkChatMessagePlayer2 = new Player(this, Keys.FK_CHAT_MESSAGE_PLAYER2);

        return _fkChatMessagePlayer2;
    }

    /**
     * Get the implicit join path to the <code>gscg.game_session</code> table.
     */
    public GameSession gameSession() {
        if (_gameSession == null)
            _gameSession = new GameSession(this, Keys.FK_CHAT_MESSAGE_GAME_SESSION1);

        return _gameSession;
    }

    @Override
    public ChatMessage as(String alias) {
        return new ChatMessage(DSL.name(alias), this);
    }

    @Override
    public ChatMessage as(Name alias) {
        return new ChatMessage(alias, this);
    }

    @Override
    public ChatMessage as(Table<?> alias) {
        return new ChatMessage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatMessage rename(String name) {
        return new ChatMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatMessage rename(Name name) {
        return new ChatMessage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatMessage rename(Table<?> name) {
        return new ChatMessage(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, LocalDateTime, LocalDateTime, String, Byte, Byte, Integer, Integer, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Byte, ? super Byte, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Byte, ? super Byte, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
