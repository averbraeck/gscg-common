/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.GoalRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Goal extends TableImpl<GoalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.goal</code>
     */
    public static final Goal GOAL = new Goal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GoalRecord> getRecordType() {
        return GoalRecord.class;
    }

    /**
     * The column <code>gscg.goal.id</code>.
     */
    public final TableField<GoalRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.goal.name</code>.
     */
    public final TableField<GoalRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.goal.variable</code>.
     */
    public final TableField<GoalRecord, String> VARIABLE = createField(DSL.name("variable"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gscg.goal.min_value</code>.
     */
    public final TableField<GoalRecord, Double> MIN_VALUE = createField(DSL.name("min_value"), SQLDataType.DOUBLE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>gscg.goal.max_value</code>.
     */
    public final TableField<GoalRecord, Double> MAX_VALUE = createField(DSL.name("max_value"), SQLDataType.DOUBLE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DOUBLE)), this, "");

    private Goal(Name alias, Table<GoalRecord> aliased) {
        this(alias, aliased, null);
    }

    private Goal(Name alias, Table<GoalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.goal</code> table reference
     */
    public Goal(String alias) {
        this(DSL.name(alias), GOAL);
    }

    /**
     * Create an aliased <code>gscg.goal</code> table reference
     */
    public Goal(Name alias) {
        this(alias, GOAL);
    }

    /**
     * Create a <code>gscg.goal</code> table reference
     */
    public Goal() {
        this(DSL.name("goal"), null);
    }

    public <O extends Record> Goal(Table<O> child, ForeignKey<O, GoalRecord> key) {
        super(child, key, GOAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public Identity<GoalRecord, Integer> getIdentity() {
        return (Identity<GoalRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GoalRecord> getPrimaryKey() {
        return Keys.KEY_GOAL_PRIMARY;
    }

    @Override
    public List<UniqueKey<GoalRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GOAL_ID_UNIQUE);
    }

    @Override
    public Goal as(String alias) {
        return new Goal(DSL.name(alias), this);
    }

    @Override
    public Goal as(Name alias) {
        return new Goal(alias, this);
    }

    @Override
    public Goal as(Table<?> alias) {
        return new Goal(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Goal rename(String name) {
        return new Goal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Goal rename(Name name) {
        return new Goal(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Goal rename(Table<?> name) {
        return new Goal(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Double, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
