/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.TransportModeRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransportMode extends TableImpl<TransportModeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.transport_mode</code>
     */
    public static final TransportMode TRANSPORT_MODE = new TransportMode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransportModeRecord> getRecordType() {
        return TransportModeRecord.class;
    }

    /**
     * The column <code>gscg.transport_mode.id</code>.
     */
    public final TableField<TransportModeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.transport_mode.name</code>.
     */
    public final TableField<TransportModeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.transport_mode.average_speed</code>.
     */
    public final TableField<TransportModeRecord, Double> AVERAGE_SPEED = createField(DSL.name("average_speed"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>gscg.transport_mode.speed_unit</code>.
     */
    public final TableField<TransportModeRecord, String> SPEED_UNIT = createField(DSL.name("speed_unit"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.field(DSL.raw("'km/h'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.transport_mode.average_handling_time</code>.
     */
    public final TableField<TransportModeRecord, Double> AVERAGE_HANDLING_TIME = createField(DSL.name("average_handling_time"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>gscg.transport_mode.handling_time_unit</code>.
     */
    public final TableField<TransportModeRecord, String> HANDLING_TIME_UNIT = createField(DSL.name("handling_time_unit"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.field(DSL.raw("'s'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.transport_mode.continental</code>.
     */
    public final TableField<TransportModeRecord, Byte> CONTINENTAL = createField(DSL.name("continental"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gscg.transport_mode.intercontinental</code>.
     */
    public final TableField<TransportModeRecord, Byte> INTERCONTINENTAL = createField(DSL.name("intercontinental"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    private TransportMode(Name alias, Table<TransportModeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransportMode(Name alias, Table<TransportModeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.transport_mode</code> table reference
     */
    public TransportMode(String alias) {
        this(DSL.name(alias), TRANSPORT_MODE);
    }

    /**
     * Create an aliased <code>gscg.transport_mode</code> table reference
     */
    public TransportMode(Name alias) {
        this(alias, TRANSPORT_MODE);
    }

    /**
     * Create a <code>gscg.transport_mode</code> table reference
     */
    public TransportMode() {
        this(DSL.name("transport_mode"), null);
    }

    public <O extends Record> TransportMode(Table<O> child, ForeignKey<O, TransportModeRecord> key) {
        super(child, key, TRANSPORT_MODE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public Identity<TransportModeRecord, Integer> getIdentity() {
        return (Identity<TransportModeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransportModeRecord> getPrimaryKey() {
        return Keys.KEY_TRANSPORT_MODE_PRIMARY;
    }

    @Override
    public List<UniqueKey<TransportModeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TRANSPORT_MODE_ID_UNIQUE);
    }

    @Override
    public TransportMode as(String alias) {
        return new TransportMode(DSL.name(alias), this);
    }

    @Override
    public TransportMode as(Name alias) {
        return new TransportMode(alias, this);
    }

    @Override
    public TransportMode as(Table<?> alias) {
        return new TransportMode(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransportMode rename(String name) {
        return new TransportMode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransportMode rename(Name name) {
        return new TransportMode(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransportMode rename(Table<?> name) {
        return new TransportMode(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Double, String, Double, String, Byte, Byte> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super Double, ? super String, ? super Double, ? super String, ? super Byte, ? super Byte, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super Double, ? super String, ? super Double, ? super String, ? super Byte, ? super Byte, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
