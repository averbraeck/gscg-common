/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.NewsActorRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewsActor extends TableImpl<NewsActorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.news_actor</code>
     */
    public static final NewsActor NEWS_ACTOR = new NewsActor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewsActorRecord> getRecordType() {
        return NewsActorRecord.class;
    }

    /**
     * The column <code>gscg.news_actor.id</code>.
     */
    public final TableField<NewsActorRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.news_actor.news_message_id</code>.
     */
    public final TableField<NewsActorRecord, Integer> NEWS_MESSAGE_ID = createField(DSL.name("news_message_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.news_actor.actor_id</code>.
     */
    public final TableField<NewsActorRecord, Integer> ACTOR_ID = createField(DSL.name("actor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private NewsActor(Name alias, Table<NewsActorRecord> aliased) {
        this(alias, aliased, null);
    }

    private NewsActor(Name alias, Table<NewsActorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.news_actor</code> table reference
     */
    public NewsActor(String alias) {
        this(DSL.name(alias), NEWS_ACTOR);
    }

    /**
     * Create an aliased <code>gscg.news_actor</code> table reference
     */
    public NewsActor(Name alias) {
        this(alias, NEWS_ACTOR);
    }

    /**
     * Create a <code>gscg.news_actor</code> table reference
     */
    public NewsActor() {
        this(DSL.name("news_actor"), null);
    }

    public <O extends Record> NewsActor(Table<O> child, ForeignKey<O, NewsActorRecord> key) {
        super(child, key, NEWS_ACTOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NEWS_ACTOR_FK_NEWS_ACTOR_TYPE_COPY1_ACTOR1_IDX, Indexes.NEWS_ACTOR_FK_NEWS_ACTOR_TYPE_NEWS_MESSAGE1_IDX);
    }

    @Override
    public Identity<NewsActorRecord, Integer> getIdentity() {
        return (Identity<NewsActorRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NewsActorRecord> getPrimaryKey() {
        return Keys.KEY_NEWS_ACTOR_PRIMARY;
    }

    @Override
    public List<UniqueKey<NewsActorRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_NEWS_ACTOR_D_UNIQUE);
    }

    @Override
    public List<ForeignKey<NewsActorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_NEWS_ACTOR_TYPE_NEWS_MESSAGE10, Keys.FK_NEWS_ACTOR_TYPE_COPY1_ACTOR1);
    }

    private transient NewsMessage _newsMessage;
    private transient Actor _actor;

    /**
     * Get the implicit join path to the <code>gscg.news_message</code> table.
     */
    public NewsMessage newsMessage() {
        if (_newsMessage == null)
            _newsMessage = new NewsMessage(this, Keys.FK_NEWS_ACTOR_TYPE_NEWS_MESSAGE10);

        return _newsMessage;
    }

    /**
     * Get the implicit join path to the <code>gscg.actor</code> table.
     */
    public Actor actor() {
        if (_actor == null)
            _actor = new Actor(this, Keys.FK_NEWS_ACTOR_TYPE_COPY1_ACTOR1);

        return _actor;
    }

    @Override
    public NewsActor as(String alias) {
        return new NewsActor(DSL.name(alias), this);
    }

    @Override
    public NewsActor as(Name alias) {
        return new NewsActor(alias, this);
    }

    @Override
    public NewsActor as(Table<?> alias) {
        return new NewsActor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NewsActor rename(String name) {
        return new NewsActor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewsActor rename(Name name) {
        return new NewsActor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewsActor rename(Table<?> name) {
        return new NewsActor(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
