/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.NewsMessageRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewsMessage extends TableImpl<NewsMessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.news_message</code>
     */
    public static final NewsMessage NEWS_MESSAGE = new NewsMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewsMessageRecord> getRecordType() {
        return NewsMessageRecord.class;
    }

    /**
     * The column <code>gscg.news_message.id</code>.
     */
    public final TableField<NewsMessageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.news_message.header</code>.
     */
    public final TableField<NewsMessageRecord, String> HEADER = createField(DSL.name("header"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.news_message.content</code>.
     */
    public final TableField<NewsMessageRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gscg.news_message.game_scenario_id</code>.
     */
    public final TableField<NewsMessageRecord, Integer> GAME_SCENARIO_ID = createField(DSL.name("game_scenario_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.news_message.trigger_fixed_id</code>.
     */
    public final TableField<NewsMessageRecord, Integer> TRIGGER_FIXED_ID = createField(DSL.name("trigger_fixed_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private NewsMessage(Name alias, Table<NewsMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private NewsMessage(Name alias, Table<NewsMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.news_message</code> table reference
     */
    public NewsMessage(String alias) {
        this(DSL.name(alias), NEWS_MESSAGE);
    }

    /**
     * Create an aliased <code>gscg.news_message</code> table reference
     */
    public NewsMessage(Name alias) {
        this(alias, NEWS_MESSAGE);
    }

    /**
     * Create a <code>gscg.news_message</code> table reference
     */
    public NewsMessage() {
        this(DSL.name("news_message"), null);
    }

    public <O extends Record> NewsMessage(Table<O> child, ForeignKey<O, NewsMessageRecord> key) {
        super(child, key, NEWS_MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NEWS_MESSAGE_FK_NEWS_MESSAGE_GAME_SCENARIO1_IDX, Indexes.NEWS_MESSAGE_FK_NEWS_MESSAGE_TRIGGER_FIXED1_IDX);
    }

    @Override
    public Identity<NewsMessageRecord, Integer> getIdentity() {
        return (Identity<NewsMessageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NewsMessageRecord> getPrimaryKey() {
        return Keys.KEY_NEWS_MESSAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<NewsMessageRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_NEWS_MESSAGE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<NewsMessageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_NEWS_MESSAGE_GAME_SCENARIO1, Keys.FK_NEWS_MESSAGE_TRIGGER_FIXED1);
    }

    private transient GameScenario _gameScenario;
    private transient TriggerFixed _triggerFixed;

    /**
     * Get the implicit join path to the <code>gscg.game_scenario</code> table.
     */
    public GameScenario gameScenario() {
        if (_gameScenario == null)
            _gameScenario = new GameScenario(this, Keys.FK_NEWS_MESSAGE_GAME_SCENARIO1);

        return _gameScenario;
    }

    /**
     * Get the implicit join path to the <code>gscg.trigger_fixed</code> table.
     */
    public TriggerFixed triggerFixed() {
        if (_triggerFixed == null)
            _triggerFixed = new TriggerFixed(this, Keys.FK_NEWS_MESSAGE_TRIGGER_FIXED1);

        return _triggerFixed;
    }

    @Override
    public NewsMessage as(String alias) {
        return new NewsMessage(DSL.name(alias), this);
    }

    @Override
    public NewsMessage as(Name alias) {
        return new NewsMessage(alias, this);
    }

    @Override
    public NewsMessage as(Table<?> alias) {
        return new NewsMessage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NewsMessage rename(String name) {
        return new NewsMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewsMessage rename(Name name) {
        return new NewsMessage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewsMessage rename(Table<?> name) {
        return new NewsMessage(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
