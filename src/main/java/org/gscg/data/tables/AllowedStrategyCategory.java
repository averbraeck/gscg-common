/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.AllowedStrategyCategoryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AllowedStrategyCategory extends TableImpl<AllowedStrategyCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.allowed_strategy_category</code>
     */
    public static final AllowedStrategyCategory ALLOWED_STRATEGY_CATEGORY = new AllowedStrategyCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AllowedStrategyCategoryRecord> getRecordType() {
        return AllowedStrategyCategoryRecord.class;
    }

    /**
     * The column <code>gscg.allowed_strategy_category.id</code>.
     */
    public final TableField<AllowedStrategyCategoryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.allowed_strategy_category.name</code>.
     */
    public final TableField<AllowedStrategyCategoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.allowed_strategy_category.header_html</code>.
     */
    public final TableField<AllowedStrategyCategoryRecord, String> HEADER_HTML = createField(DSL.name("header_html"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>gscg.allowed_strategy_category.page_id</code>.
     */
    public final TableField<AllowedStrategyCategoryRecord, Integer> PAGE_ID = createField(DSL.name("page_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>gscg.allowed_strategy_category.allowed_strategy_list_id</code>.
     */
    public final TableField<AllowedStrategyCategoryRecord, Integer> ALLOWED_STRATEGY_LIST_ID = createField(DSL.name("allowed_strategy_list_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private AllowedStrategyCategory(Name alias, Table<AllowedStrategyCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private AllowedStrategyCategory(Name alias, Table<AllowedStrategyCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.allowed_strategy_category</code> table
     * reference
     */
    public AllowedStrategyCategory(String alias) {
        this(DSL.name(alias), ALLOWED_STRATEGY_CATEGORY);
    }

    /**
     * Create an aliased <code>gscg.allowed_strategy_category</code> table
     * reference
     */
    public AllowedStrategyCategory(Name alias) {
        this(alias, ALLOWED_STRATEGY_CATEGORY);
    }

    /**
     * Create a <code>gscg.allowed_strategy_category</code> table reference
     */
    public AllowedStrategyCategory() {
        this(DSL.name("allowed_strategy_category"), null);
    }

    public <O extends Record> AllowedStrategyCategory(Table<O> child, ForeignKey<O, AllowedStrategyCategoryRecord> key) {
        super(child, key, ALLOWED_STRATEGY_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ALLOWED_STRATEGY_CATEGORY_FK_ALLOWED_STRATEGY_CATEGORY_ALLOWED_STRATEGY_LIST1_IDX, Indexes.ALLOWED_STRATEGY_CATEGORY_FK_ALLOWED_STRATEGY_CATEGORY_PAGE1_IDX);
    }

    @Override
    public Identity<AllowedStrategyCategoryRecord, Integer> getIdentity() {
        return (Identity<AllowedStrategyCategoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AllowedStrategyCategoryRecord> getPrimaryKey() {
        return Keys.KEY_ALLOWED_STRATEGY_CATEGORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<AllowedStrategyCategoryRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ALLOWED_STRATEGY_CATEGORY_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<AllowedStrategyCategoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ALLOWED_STRATEGY_CATEGORY_PAGE1, Keys.FK_ALLOWED_STRATEGY_CATEGORY_ALLOWED_STRATEGY_LIST1);
    }

    private transient Page _page;
    private transient AllowedStrategyList _allowedStrategyList;

    /**
     * Get the implicit join path to the <code>gscg.page</code> table.
     */
    public Page page() {
        if (_page == null)
            _page = new Page(this, Keys.FK_ALLOWED_STRATEGY_CATEGORY_PAGE1);

        return _page;
    }

    /**
     * Get the implicit join path to the <code>gscg.allowed_strategy_list</code>
     * table.
     */
    public AllowedStrategyList allowedStrategyList() {
        if (_allowedStrategyList == null)
            _allowedStrategyList = new AllowedStrategyList(this, Keys.FK_ALLOWED_STRATEGY_CATEGORY_ALLOWED_STRATEGY_LIST1);

        return _allowedStrategyList;
    }

    @Override
    public AllowedStrategyCategory as(String alias) {
        return new AllowedStrategyCategory(DSL.name(alias), this);
    }

    @Override
    public AllowedStrategyCategory as(Name alias) {
        return new AllowedStrategyCategory(alias, this);
    }

    @Override
    public AllowedStrategyCategory as(Table<?> alias) {
        return new AllowedStrategyCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AllowedStrategyCategory rename(String name) {
        return new AllowedStrategyCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AllowedStrategyCategory rename(Name name) {
        return new AllowedStrategyCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AllowedStrategyCategory rename(Table<?> name) {
        return new AllowedStrategyCategory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
