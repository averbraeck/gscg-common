/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.AllowedStrategyRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AllowedStrategy extends TableImpl<AllowedStrategyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.allowed_strategy</code>
     */
    public static final AllowedStrategy ALLOWED_STRATEGY = new AllowedStrategy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AllowedStrategyRecord> getRecordType() {
        return AllowedStrategyRecord.class;
    }

    /**
     * The column <code>gscg.allowed_strategy.id</code>.
     */
    public final TableField<AllowedStrategyRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.allowed_strategy.name</code>.
     */
    public final TableField<AllowedStrategyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.allowed_strategy.explanation_html</code>.
     */
    public final TableField<AllowedStrategyRecord, String> EXPLANATION_HTML = createField(DSL.name("explanation_html"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>gscg.allowed_strategy.allowed_strategy_category_id</code>.
     */
    public final TableField<AllowedStrategyRecord, Integer> ALLOWED_STRATEGY_CATEGORY_ID = createField(DSL.name("allowed_strategy_category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private AllowedStrategy(Name alias, Table<AllowedStrategyRecord> aliased) {
        this(alias, aliased, null);
    }

    private AllowedStrategy(Name alias, Table<AllowedStrategyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.allowed_strategy</code> table reference
     */
    public AllowedStrategy(String alias) {
        this(DSL.name(alias), ALLOWED_STRATEGY);
    }

    /**
     * Create an aliased <code>gscg.allowed_strategy</code> table reference
     */
    public AllowedStrategy(Name alias) {
        this(alias, ALLOWED_STRATEGY);
    }

    /**
     * Create a <code>gscg.allowed_strategy</code> table reference
     */
    public AllowedStrategy() {
        this(DSL.name("allowed_strategy"), null);
    }

    public <O extends Record> AllowedStrategy(Table<O> child, ForeignKey<O, AllowedStrategyRecord> key) {
        super(child, key, ALLOWED_STRATEGY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ALLOWED_STRATEGY_FK_ALLOWED_STRATEGY_ALLOWED_STRATEGY_CATEGORY1_IDX);
    }

    @Override
    public Identity<AllowedStrategyRecord, Integer> getIdentity() {
        return (Identity<AllowedStrategyRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AllowedStrategyRecord> getPrimaryKey() {
        return Keys.KEY_ALLOWED_STRATEGY_PRIMARY;
    }

    @Override
    public List<UniqueKey<AllowedStrategyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ALLOWED_STRATEGY_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<AllowedStrategyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ALLOWED_STRATEGY_ALLOWED_STRATEGY_CATEGORY1);
    }

    private transient AllowedStrategyCategory _allowedStrategyCategory;

    /**
     * Get the implicit join path to the
     * <code>gscg.allowed_strategy_category</code> table.
     */
    public AllowedStrategyCategory allowedStrategyCategory() {
        if (_allowedStrategyCategory == null)
            _allowedStrategyCategory = new AllowedStrategyCategory(this, Keys.FK_ALLOWED_STRATEGY_ALLOWED_STRATEGY_CATEGORY1);

        return _allowedStrategyCategory;
    }

    @Override
    public AllowedStrategy as(String alias) {
        return new AllowedStrategy(DSL.name(alias), this);
    }

    @Override
    public AllowedStrategy as(Name alias) {
        return new AllowedStrategy(alias, this);
    }

    @Override
    public AllowedStrategy as(Table<?> alias) {
        return new AllowedStrategy(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AllowedStrategy rename(String name) {
        return new AllowedStrategy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AllowedStrategy rename(Name name) {
        return new AllowedStrategy(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AllowedStrategy rename(Table<?> name) {
        return new AllowedStrategy(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
