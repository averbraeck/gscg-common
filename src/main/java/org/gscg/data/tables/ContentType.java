/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.ContentTypeRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContentType extends TableImpl<ContentTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.content_type</code>
     */
    public static final ContentType CONTENT_TYPE = new ContentType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContentTypeRecord> getRecordType() {
        return ContentTypeRecord.class;
    }

    /**
     * The column <code>gscg.content_type.id</code>.
     */
    public final TableField<ContentTypeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.content_type.name</code>.
     */
    public final TableField<ContentTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.content_type.java_type</code>.
     */
    public final TableField<ContentTypeRecord, String> JAVA_TYPE = createField(DSL.name("java_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private ContentType(Name alias, Table<ContentTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContentType(Name alias, Table<ContentTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.content_type</code> table reference
     */
    public ContentType(String alias) {
        this(DSL.name(alias), CONTENT_TYPE);
    }

    /**
     * Create an aliased <code>gscg.content_type</code> table reference
     */
    public ContentType(Name alias) {
        this(alias, CONTENT_TYPE);
    }

    /**
     * Create a <code>gscg.content_type</code> table reference
     */
    public ContentType() {
        this(DSL.name("content_type"), null);
    }

    public <O extends Record> ContentType(Table<O> child, ForeignKey<O, ContentTypeRecord> key) {
        super(child, key, CONTENT_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public Identity<ContentTypeRecord, Integer> getIdentity() {
        return (Identity<ContentTypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ContentTypeRecord> getPrimaryKey() {
        return Keys.KEY_CONTENT_TYPE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ContentTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CONTENT_TYPE_ID_UNIQUE);
    }

    @Override
    public ContentType as(String alias) {
        return new ContentType(DSL.name(alias), this);
    }

    @Override
    public ContentType as(Name alias) {
        return new ContentType(alias, this);
    }

    @Override
    public ContentType as(Table<?> alias) {
        return new ContentType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContentType rename(String name) {
        return new ContentType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContentType rename(Name name) {
        return new ContentType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContentType rename(Table<?> name) {
        return new ContentType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
