/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.TransferRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transfer extends TableImpl<TransferRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.transfer</code>
     */
    public static final Transfer TRANSFER = new Transfer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferRecord> getRecordType() {
        return TransferRecord.class;
    }

    /**
     * The column <code>gscg.transfer.id</code>.
     */
    public final TableField<TransferRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.transfer.distance_km</code>.
     */
    public final TableField<TransferRecord, Double> DISTANCE_KM = createField(DSL.name("distance_km"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>gscg.transfer.travel_time_h</code>.
     */
    public final TableField<TransferRecord, Double> TRAVEL_TIME_H = createField(DSL.name("travel_time_h"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>gscg.transfer.transport_mode_id</code>.
     */
    public final TableField<TransferRecord, Integer> TRANSPORT_MODE_ID = createField(DSL.name("transport_mode_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.transfer.location1_id</code>.
     */
    public final TableField<TransferRecord, Integer> LOCATION1_ID = createField(DSL.name("location1_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.transfer.location2_id</code>.
     */
    public final TableField<TransferRecord, Integer> LOCATION2_ID = createField(DSL.name("location2_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Transfer(Name alias, Table<TransferRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.transfer</code> table reference
     */
    public Transfer(String alias) {
        this(DSL.name(alias), TRANSFER);
    }

    /**
     * Create an aliased <code>gscg.transfer</code> table reference
     */
    public Transfer(Name alias) {
        this(alias, TRANSFER);
    }

    /**
     * Create a <code>gscg.transfer</code> table reference
     */
    public Transfer() {
        this(DSL.name("transfer"), null);
    }

    public <O extends Record> Transfer(Table<O> child, ForeignKey<O, TransferRecord> key) {
        super(child, key, TRANSFER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TRANSFER_FK_TRANSFER_LOCATION1_IDX, Indexes.TRANSFER_FK_TRANSFER_LOCATION2_IDX, Indexes.TRANSFER_FK_TRANSFER_TRANSPORT_MODE1_IDX);
    }

    @Override
    public Identity<TransferRecord, Integer> getIdentity() {
        return (Identity<TransferRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransferRecord> getPrimaryKey() {
        return Keys.KEY_TRANSFER_PRIMARY;
    }

    @Override
    public List<UniqueKey<TransferRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TRANSFER_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<TransferRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TRANSFER_TRANSPORT_MODE1, Keys.FK_TRANSFER_LOCATION2, Keys.FK_TRANSFER_LOCATION1);
    }

    private transient TransportMode _transportMode;
    private transient Location _fkTransferLocation2;
    private transient Location _fkTransferLocation1;

    /**
     * Get the implicit join path to the <code>gscg.transport_mode</code> table.
     */
    public TransportMode transportMode() {
        if (_transportMode == null)
            _transportMode = new TransportMode(this, Keys.FK_TRANSFER_TRANSPORT_MODE1);

        return _transportMode;
    }

    /**
     * Get the implicit join path to the <code>gscg.location</code> table, via
     * the <code>fk_transfer_location2</code> key.
     */
    public Location fkTransferLocation2() {
        if (_fkTransferLocation2 == null)
            _fkTransferLocation2 = new Location(this, Keys.FK_TRANSFER_LOCATION2);

        return _fkTransferLocation2;
    }

    /**
     * Get the implicit join path to the <code>gscg.location</code> table, via
     * the <code>fk_transfer_location1</code> key.
     */
    public Location fkTransferLocation1() {
        if (_fkTransferLocation1 == null)
            _fkTransferLocation1 = new Location(this, Keys.FK_TRANSFER_LOCATION1);

        return _fkTransferLocation1;
    }

    @Override
    public Transfer as(String alias) {
        return new Transfer(DSL.name(alias), this);
    }

    @Override
    public Transfer as(Name alias) {
        return new Transfer(alias, this);
    }

    @Override
    public Transfer as(Table<?> alias) {
        return new Transfer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(String name) {
        return new Transfer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(Name name) {
        return new Transfer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(Table<?> name) {
        return new Transfer(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Double, Double, Integer, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Double, ? super Double, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Double, ? super Double, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
