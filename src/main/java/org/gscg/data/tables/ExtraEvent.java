/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.ExtraEventRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExtraEvent extends TableImpl<ExtraEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.extra_event</code>
     */
    public static final ExtraEvent EXTRA_EVENT = new ExtraEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExtraEventRecord> getRecordType() {
        return ExtraEventRecord.class;
    }

    /**
     * The column <code>gscg.extra_event.id</code>.
     */
    public final TableField<ExtraEventRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.extra_event.game_time</code>.
     */
    public final TableField<ExtraEventRecord, LocalDateTime> GAME_TIME = createField(DSL.name("game_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.extra_event.wall_time</code>.
     */
    public final TableField<ExtraEventRecord, LocalDateTime> WALL_TIME = createField(DSL.name("wall_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.extra_event.object_type</code>.
     */
    public final TableField<ExtraEventRecord, String> OBJECT_TYPE = createField(DSL.name("object_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gscg.extra_event.object_id</code>.
     */
    public final TableField<ExtraEventRecord, Integer> OBJECT_ID = createField(DSL.name("object_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gscg.extra_event.object_name</code>.
     */
    public final TableField<ExtraEventRecord, String> OBJECT_NAME = createField(DSL.name("object_name"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.extra_event.object_available</code>.
     */
    public final TableField<ExtraEventRecord, Byte> OBJECT_AVAILABLE = createField(DSL.name("object_available"), SQLDataType.TINYINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gscg.extra_event.parameter_name</code>.
     */
    public final TableField<ExtraEventRecord, String> PARAMETER_NAME = createField(DSL.name("parameter_name"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.extra_event.parameter_value</code>.
     */
    public final TableField<ExtraEventRecord, String> PARAMETER_VALUE = createField(DSL.name("parameter_value"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.extra_event.game_session_id</code>.
     */
    public final TableField<ExtraEventRecord, Integer> GAME_SESSION_ID = createField(DSL.name("game_session_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private ExtraEvent(Name alias, Table<ExtraEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExtraEvent(Name alias, Table<ExtraEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.extra_event</code> table reference
     */
    public ExtraEvent(String alias) {
        this(DSL.name(alias), EXTRA_EVENT);
    }

    /**
     * Create an aliased <code>gscg.extra_event</code> table reference
     */
    public ExtraEvent(Name alias) {
        this(alias, EXTRA_EVENT);
    }

    /**
     * Create a <code>gscg.extra_event</code> table reference
     */
    public ExtraEvent() {
        this(DSL.name("extra_event"), null);
    }

    public <O extends Record> ExtraEvent(Table<O> child, ForeignKey<O, ExtraEventRecord> key) {
        super(child, key, EXTRA_EVENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EXTRA_EVENT_FK_EXTRA_NEWS_MESSAGE_GAME_SESSION1_IDX);
    }

    @Override
    public Identity<ExtraEventRecord, Integer> getIdentity() {
        return (Identity<ExtraEventRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExtraEventRecord> getPrimaryKey() {
        return Keys.KEY_EXTRA_EVENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<ExtraEventRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_EXTRA_EVENT_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ExtraEventRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_EXTRA_NEWS_MESSAGE_GAME_SESSION10);
    }

    private transient GameSession _gameSession;

    /**
     * Get the implicit join path to the <code>gscg.game_session</code> table.
     */
    public GameSession gameSession() {
        if (_gameSession == null)
            _gameSession = new GameSession(this, Keys.FK_EXTRA_NEWS_MESSAGE_GAME_SESSION10);

        return _gameSession;
    }

    @Override
    public ExtraEvent as(String alias) {
        return new ExtraEvent(DSL.name(alias), this);
    }

    @Override
    public ExtraEvent as(Name alias) {
        return new ExtraEvent(alias, this);
    }

    @Override
    public ExtraEvent as(Table<?> alias) {
        return new ExtraEvent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExtraEvent rename(String name) {
        return new ExtraEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExtraEvent rename(Name name) {
        return new ExtraEvent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExtraEvent rename(Table<?> name) {
        return new ExtraEvent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, LocalDateTime, LocalDateTime, String, Integer, String, Byte, String, String, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super String, ? super Byte, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super String, ? super Byte, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
