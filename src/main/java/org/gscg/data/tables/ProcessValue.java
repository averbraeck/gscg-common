/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.ProcessValueRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProcessValue extends TableImpl<ProcessValueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.process_value</code>
     */
    public static final ProcessValue PROCESS_VALUE = new ProcessValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcessValueRecord> getRecordType() {
        return ProcessValueRecord.class;
    }

    /**
     * The column <code>gscg.process_value.id</code>.
     */
    public final TableField<ProcessValueRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.process_value.value</code>.
     */
    public final TableField<ProcessValueRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.process_value.process_parameter_id</code>.
     */
    public final TableField<ProcessValueRecord, Integer> PROCESS_PARAMETER_ID = createField(DSL.name("process_parameter_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.process_value.process_id</code>.
     */
    public final TableField<ProcessValueRecord, Integer> PROCESS_ID = createField(DSL.name("process_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private ProcessValue(Name alias, Table<ProcessValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProcessValue(Name alias, Table<ProcessValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.process_value</code> table reference
     */
    public ProcessValue(String alias) {
        this(DSL.name(alias), PROCESS_VALUE);
    }

    /**
     * Create an aliased <code>gscg.process_value</code> table reference
     */
    public ProcessValue(Name alias) {
        this(alias, PROCESS_VALUE);
    }

    /**
     * Create a <code>gscg.process_value</code> table reference
     */
    public ProcessValue() {
        this(DSL.name("process_value"), null);
    }

    public <O extends Record> ProcessValue(Table<O> child, ForeignKey<O, ProcessValueRecord> key) {
        super(child, key, PROCESS_VALUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROCESS_VALUE_FK_PROCESS_VALUE_PROCESS1_IDX, Indexes.PROCESS_VALUE_FK_PROCESS_VALUE_PROCESS_PARAMETER1_IDX);
    }

    @Override
    public Identity<ProcessValueRecord, Integer> getIdentity() {
        return (Identity<ProcessValueRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProcessValueRecord> getPrimaryKey() {
        return Keys.KEY_PROCESS_VALUE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProcessValueRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PROCESS_VALUE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ProcessValueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PROCESS_VALUE_PROCESS_PARAMETER1, Keys.FK_PROCESS_VALUE_PROCESS1);
    }

    private transient ProcessParameter _processParameter;
    private transient Process _process;

    /**
     * Get the implicit join path to the <code>gscg.process_parameter</code>
     * table.
     */
    public ProcessParameter processParameter() {
        if (_processParameter == null)
            _processParameter = new ProcessParameter(this, Keys.FK_PROCESS_VALUE_PROCESS_PARAMETER1);

        return _processParameter;
    }

    /**
     * Get the implicit join path to the <code>gscg.process</code> table.
     */
    public Process process() {
        if (_process == null)
            _process = new Process(this, Keys.FK_PROCESS_VALUE_PROCESS1);

        return _process;
    }

    @Override
    public ProcessValue as(String alias) {
        return new ProcessValue(DSL.name(alias), this);
    }

    @Override
    public ProcessValue as(Name alias) {
        return new ProcessValue(alias, this);
    }

    @Override
    public ProcessValue as(Table<?> alias) {
        return new ProcessValue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessValue rename(String name) {
        return new ProcessValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessValue rename(Name name) {
        return new ProcessValue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessValue rename(Table<?> name) {
        return new ProcessValue(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
