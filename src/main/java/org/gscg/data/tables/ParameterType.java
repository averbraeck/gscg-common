/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.ParameterTypeRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParameterType extends TableImpl<ParameterTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.parameter_type</code>
     */
    public static final ParameterType PARAMETER_TYPE = new ParameterType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParameterTypeRecord> getRecordType() {
        return ParameterTypeRecord.class;
    }

    /**
     * The column <code>gscg.parameter_type.id</code>.
     */
    public final TableField<ParameterTypeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.parameter_type.java_name</code>.
     */
    public final TableField<ParameterTypeRecord, String> JAVA_NAME = createField(DSL.name("java_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private ParameterType(Name alias, Table<ParameterTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ParameterType(Name alias, Table<ParameterTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.parameter_type</code> table reference
     */
    public ParameterType(String alias) {
        this(DSL.name(alias), PARAMETER_TYPE);
    }

    /**
     * Create an aliased <code>gscg.parameter_type</code> table reference
     */
    public ParameterType(Name alias) {
        this(alias, PARAMETER_TYPE);
    }

    /**
     * Create a <code>gscg.parameter_type</code> table reference
     */
    public ParameterType() {
        this(DSL.name("parameter_type"), null);
    }

    public <O extends Record> ParameterType(Table<O> child, ForeignKey<O, ParameterTypeRecord> key) {
        super(child, key, PARAMETER_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public Identity<ParameterTypeRecord, Integer> getIdentity() {
        return (Identity<ParameterTypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ParameterTypeRecord> getPrimaryKey() {
        return Keys.KEY_PARAMETER_TYPE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ParameterTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PARAMETER_TYPE_ID_UNIQUE);
    }

    @Override
    public ParameterType as(String alias) {
        return new ParameterType(DSL.name(alias), this);
    }

    @Override
    public ParameterType as(Name alias) {
        return new ParameterType(alias, this);
    }

    @Override
    public ParameterType as(Table<?> alias) {
        return new ParameterType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ParameterType rename(String name) {
        return new ParameterType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParameterType rename(Name name) {
        return new ParameterType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParameterType rename(Table<?> name) {
        return new ParameterType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
