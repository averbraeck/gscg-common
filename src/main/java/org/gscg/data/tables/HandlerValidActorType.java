/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.HandlerValidActorTypeRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HandlerValidActorType extends TableImpl<HandlerValidActorTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.handler_valid_actor_type</code>
     */
    public static final HandlerValidActorType HANDLER_VALID_ACTOR_TYPE = new HandlerValidActorType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HandlerValidActorTypeRecord> getRecordType() {
        return HandlerValidActorTypeRecord.class;
    }

    /**
     * The column <code>gscg.handler_valid_actor_type.id</code>.
     */
    public final TableField<HandlerValidActorTypeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.handler_valid_actor_type.handler_id</code>.
     */
    public final TableField<HandlerValidActorTypeRecord, Integer> HANDLER_ID = createField(DSL.name("handler_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.handler_valid_actor_type.actor_type_id</code>.
     */
    public final TableField<HandlerValidActorTypeRecord, Integer> ACTOR_TYPE_ID = createField(DSL.name("actor_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private HandlerValidActorType(Name alias, Table<HandlerValidActorTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private HandlerValidActorType(Name alias, Table<HandlerValidActorTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.handler_valid_actor_type</code> table
     * reference
     */
    public HandlerValidActorType(String alias) {
        this(DSL.name(alias), HANDLER_VALID_ACTOR_TYPE);
    }

    /**
     * Create an aliased <code>gscg.handler_valid_actor_type</code> table
     * reference
     */
    public HandlerValidActorType(Name alias) {
        this(alias, HANDLER_VALID_ACTOR_TYPE);
    }

    /**
     * Create a <code>gscg.handler_valid_actor_type</code> table reference
     */
    public HandlerValidActorType() {
        this(DSL.name("handler_valid_actor_type"), null);
    }

    public <O extends Record> HandlerValidActorType(Table<O> child, ForeignKey<O, HandlerValidActorTypeRecord> key) {
        super(child, key, HANDLER_VALID_ACTOR_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HANDLER_VALID_ACTOR_TYPE_FK_HANDLER_VALID_ACTOR_TYPE_ACTOR_TYPE1_IDX, Indexes.HANDLER_VALID_ACTOR_TYPE_FK_HANDLER_VALID_ACTOR_TYPE_HANDLER1_IDX);
    }

    @Override
    public Identity<HandlerValidActorTypeRecord, Integer> getIdentity() {
        return (Identity<HandlerValidActorTypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HandlerValidActorTypeRecord> getPrimaryKey() {
        return Keys.KEY_HANDLER_VALID_ACTOR_TYPE_PRIMARY;
    }

    @Override
    public List<UniqueKey<HandlerValidActorTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_HANDLER_VALID_ACTOR_TYPE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<HandlerValidActorTypeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_HANDLER_VALID_ACTOR_TYPE_HANDLER1, Keys.FK_HANDLER_VALID_ACTOR_TYPE_ACTOR_TYPE1);
    }

    private transient Handler _handler;
    private transient ActorType _actorType;

    /**
     * Get the implicit join path to the <code>gscg.handler</code> table.
     */
    public Handler handler() {
        if (_handler == null)
            _handler = new Handler(this, Keys.FK_HANDLER_VALID_ACTOR_TYPE_HANDLER1);

        return _handler;
    }

    /**
     * Get the implicit join path to the <code>gscg.actor_type</code> table.
     */
    public ActorType actorType() {
        if (_actorType == null)
            _actorType = new ActorType(this, Keys.FK_HANDLER_VALID_ACTOR_TYPE_ACTOR_TYPE1);

        return _actorType;
    }

    @Override
    public HandlerValidActorType as(String alias) {
        return new HandlerValidActorType(DSL.name(alias), this);
    }

    @Override
    public HandlerValidActorType as(Name alias) {
        return new HandlerValidActorType(alias, this);
    }

    @Override
    public HandlerValidActorType as(Table<?> alias) {
        return new HandlerValidActorType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HandlerValidActorType rename(String name) {
        return new HandlerValidActorType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HandlerValidActorType rename(Name name) {
        return new HandlerValidActorType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HandlerValidActorType rename(Table<?> name) {
        return new HandlerValidActorType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
