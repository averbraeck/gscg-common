/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.ChosenStrategyRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChosenStrategy extends TableImpl<ChosenStrategyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.chosen_strategy</code>
     */
    public static final ChosenStrategy CHOSEN_STRATEGY = new ChosenStrategy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChosenStrategyRecord> getRecordType() {
        return ChosenStrategyRecord.class;
    }

    /**
     * The column <code>gscg.chosen_strategy.id</code>.
     */
    public final TableField<ChosenStrategyRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.chosen_strategy.game_time</code>.
     */
    public final TableField<ChosenStrategyRecord, LocalDateTime> GAME_TIME = createField(DSL.name("game_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.chosen_strategy.wall_time</code>.
     */
    public final TableField<ChosenStrategyRecord, LocalDateTime> WALL_TIME = createField(DSL.name("wall_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.chosen_strategy.motivation</code>.
     */
    public final TableField<ChosenStrategyRecord, String> MOTIVATION = createField(DSL.name("motivation"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gscg.chosen_strategy.allowed_strategy_id</code>.
     */
    public final TableField<ChosenStrategyRecord, Integer> ALLOWED_STRATEGY_ID = createField(DSL.name("allowed_strategy_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.chosen_strategy.player_id</code>.
     */
    public final TableField<ChosenStrategyRecord, Integer> PLAYER_ID = createField(DSL.name("player_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private ChosenStrategy(Name alias, Table<ChosenStrategyRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChosenStrategy(Name alias, Table<ChosenStrategyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.chosen_strategy</code> table reference
     */
    public ChosenStrategy(String alias) {
        this(DSL.name(alias), CHOSEN_STRATEGY);
    }

    /**
     * Create an aliased <code>gscg.chosen_strategy</code> table reference
     */
    public ChosenStrategy(Name alias) {
        this(alias, CHOSEN_STRATEGY);
    }

    /**
     * Create a <code>gscg.chosen_strategy</code> table reference
     */
    public ChosenStrategy() {
        this(DSL.name("chosen_strategy"), null);
    }

    public <O extends Record> ChosenStrategy(Table<O> child, ForeignKey<O, ChosenStrategyRecord> key) {
        super(child, key, CHOSEN_STRATEGY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CHOSEN_STRATEGY_FK_CHOSEN_STRATEGY_ALLOWED_STRATEGY1_IDX, Indexes.CHOSEN_STRATEGY_FK_CHOSEN_STRATEGY_PLAYER1_IDX);
    }

    @Override
    public Identity<ChosenStrategyRecord, Integer> getIdentity() {
        return (Identity<ChosenStrategyRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChosenStrategyRecord> getPrimaryKey() {
        return Keys.KEY_CHOSEN_STRATEGY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ChosenStrategyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CHOSEN_STRATEGY_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ChosenStrategyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_CHOSEN_STRATEGY_ALLOWED_STRATEGY1, Keys.FK_CHOSEN_STRATEGY_PLAYER1);
    }

    private transient AllowedStrategy _allowedStrategy;
    private transient Player _player;

    /**
     * Get the implicit join path to the <code>gscg.allowed_strategy</code>
     * table.
     */
    public AllowedStrategy allowedStrategy() {
        if (_allowedStrategy == null)
            _allowedStrategy = new AllowedStrategy(this, Keys.FK_CHOSEN_STRATEGY_ALLOWED_STRATEGY1);

        return _allowedStrategy;
    }

    /**
     * Get the implicit join path to the <code>gscg.player</code> table.
     */
    public Player player() {
        if (_player == null)
            _player = new Player(this, Keys.FK_CHOSEN_STRATEGY_PLAYER1);

        return _player;
    }

    @Override
    public ChosenStrategy as(String alias) {
        return new ChosenStrategy(DSL.name(alias), this);
    }

    @Override
    public ChosenStrategy as(Name alias) {
        return new ChosenStrategy(alias, this);
    }

    @Override
    public ChosenStrategy as(Table<?> alias) {
        return new ChosenStrategy(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChosenStrategy rename(String name) {
        return new ChosenStrategy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChosenStrategy rename(Name name) {
        return new ChosenStrategy(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChosenStrategy rename(Table<?> name) {
        return new ChosenStrategy(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, LocalDateTime, LocalDateTime, String, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
