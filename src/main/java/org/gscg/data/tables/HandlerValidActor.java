/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.HandlerValidActorRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HandlerValidActor extends TableImpl<HandlerValidActorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.handler_valid_actor</code>
     */
    public static final HandlerValidActor HANDLER_VALID_ACTOR = new HandlerValidActor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HandlerValidActorRecord> getRecordType() {
        return HandlerValidActorRecord.class;
    }

    /**
     * The column <code>gscg.handler_valid_actor.id</code>.
     */
    public final TableField<HandlerValidActorRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.handler_valid_actor.handler_id</code>.
     */
    public final TableField<HandlerValidActorRecord, Integer> HANDLER_ID = createField(DSL.name("handler_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.handler_valid_actor.actor_id</code>.
     */
    public final TableField<HandlerValidActorRecord, Integer> ACTOR_ID = createField(DSL.name("actor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private HandlerValidActor(Name alias, Table<HandlerValidActorRecord> aliased) {
        this(alias, aliased, null);
    }

    private HandlerValidActor(Name alias, Table<HandlerValidActorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.handler_valid_actor</code> table reference
     */
    public HandlerValidActor(String alias) {
        this(DSL.name(alias), HANDLER_VALID_ACTOR);
    }

    /**
     * Create an aliased <code>gscg.handler_valid_actor</code> table reference
     */
    public HandlerValidActor(Name alias) {
        this(alias, HANDLER_VALID_ACTOR);
    }

    /**
     * Create a <code>gscg.handler_valid_actor</code> table reference
     */
    public HandlerValidActor() {
        this(DSL.name("handler_valid_actor"), null);
    }

    public <O extends Record> HandlerValidActor(Table<O> child, ForeignKey<O, HandlerValidActorRecord> key) {
        super(child, key, HANDLER_VALID_ACTOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HANDLER_VALID_ACTOR_FK_HANDLER_PRODUCT_HANDLER1_IDX, Indexes.HANDLER_VALID_ACTOR_FK_HANDLER_VALID_ACTOR_ACTOR1_IDX);
    }

    @Override
    public Identity<HandlerValidActorRecord, Integer> getIdentity() {
        return (Identity<HandlerValidActorRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HandlerValidActorRecord> getPrimaryKey() {
        return Keys.KEY_HANDLER_VALID_ACTOR_PRIMARY;
    }

    @Override
    public List<UniqueKey<HandlerValidActorRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_HANDLER_VALID_ACTOR_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<HandlerValidActorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_HANDLER_PRODUCT_HANDLER10, Keys.FK_HANDLER_VALID_ACTOR_ACTOR1);
    }

    private transient Handler _handler;
    private transient Actor _actor;

    /**
     * Get the implicit join path to the <code>gscg.handler</code> table.
     */
    public Handler handler() {
        if (_handler == null)
            _handler = new Handler(this, Keys.FK_HANDLER_PRODUCT_HANDLER10);

        return _handler;
    }

    /**
     * Get the implicit join path to the <code>gscg.actor</code> table.
     */
    public Actor actor() {
        if (_actor == null)
            _actor = new Actor(this, Keys.FK_HANDLER_VALID_ACTOR_ACTOR1);

        return _actor;
    }

    @Override
    public HandlerValidActor as(String alias) {
        return new HandlerValidActor(DSL.name(alias), this);
    }

    @Override
    public HandlerValidActor as(Name alias) {
        return new HandlerValidActor(alias, this);
    }

    @Override
    public HandlerValidActor as(Table<?> alias) {
        return new HandlerValidActor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HandlerValidActor rename(String name) {
        return new HandlerValidActor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HandlerValidActor rename(Name name) {
        return new HandlerValidActor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HandlerValidActor rename(Table<?> name) {
        return new HandlerValidActor(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
