/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables.records;


import org.gscg.data.tables.Transfer;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransferRecord extends UpdatableRecordImpl<TransferRecord> implements Record6<Integer, Double, Double, Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>gscg.transfer.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>gscg.transfer.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>gscg.transfer.distance_km</code>.
     */
    public void setDistanceKm(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>gscg.transfer.distance_km</code>.
     */
    public Double getDistanceKm() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>gscg.transfer.travel_time_h</code>.
     */
    public void setTravelTimeH(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>gscg.transfer.travel_time_h</code>.
     */
    public Double getTravelTimeH() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>gscg.transfer.transport_mode_id</code>.
     */
    public void setTransportModeId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>gscg.transfer.transport_mode_id</code>.
     */
    public Integer getTransportModeId() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>gscg.transfer.location1_id</code>.
     */
    public void setLocation1Id(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>gscg.transfer.location1_id</code>.
     */
    public Integer getLocation1Id() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>gscg.transfer.location2_id</code>.
     */
    public void setLocation2Id(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>gscg.transfer.location2_id</code>.
     */
    public Integer getLocation2Id() {
        return (Integer) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Double, Double, Integer, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, Double, Double, Integer, Integer, Integer> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Transfer.TRANSFER.ID;
    }

    @Override
    public Field<Double> field2() {
        return Transfer.TRANSFER.DISTANCE_KM;
    }

    @Override
    public Field<Double> field3() {
        return Transfer.TRANSFER.TRAVEL_TIME_H;
    }

    @Override
    public Field<Integer> field4() {
        return Transfer.TRANSFER.TRANSPORT_MODE_ID;
    }

    @Override
    public Field<Integer> field5() {
        return Transfer.TRANSFER.LOCATION1_ID;
    }

    @Override
    public Field<Integer> field6() {
        return Transfer.TRANSFER.LOCATION2_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Double component2() {
        return getDistanceKm();
    }

    @Override
    public Double component3() {
        return getTravelTimeH();
    }

    @Override
    public Integer component4() {
        return getTransportModeId();
    }

    @Override
    public Integer component5() {
        return getLocation1Id();
    }

    @Override
    public Integer component6() {
        return getLocation2Id();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Double value2() {
        return getDistanceKm();
    }

    @Override
    public Double value3() {
        return getTravelTimeH();
    }

    @Override
    public Integer value4() {
        return getTransportModeId();
    }

    @Override
    public Integer value5() {
        return getLocation1Id();
    }

    @Override
    public Integer value6() {
        return getLocation2Id();
    }

    @Override
    public TransferRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TransferRecord value2(Double value) {
        setDistanceKm(value);
        return this;
    }

    @Override
    public TransferRecord value3(Double value) {
        setTravelTimeH(value);
        return this;
    }

    @Override
    public TransferRecord value4(Integer value) {
        setTransportModeId(value);
        return this;
    }

    @Override
    public TransferRecord value5(Integer value) {
        setLocation1Id(value);
        return this;
    }

    @Override
    public TransferRecord value6(Integer value) {
        setLocation2Id(value);
        return this;
    }

    @Override
    public TransferRecord values(Integer value1, Double value2, Double value3, Integer value4, Integer value5, Integer value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransferRecord
     */
    public TransferRecord() {
        super(Transfer.TRANSFER);
    }

    /**
     * Create a detached, initialised TransferRecord
     */
    public TransferRecord(Integer id, Double distanceKm, Double travelTimeH, Integer transportModeId, Integer location1Id, Integer location2Id) {
        super(Transfer.TRANSFER);

        setId(id);
        setDistanceKm(distanceKm);
        setTravelTimeH(travelTimeH);
        setTransportModeId(transportModeId);
        setLocation1Id(location1Id);
        setLocation2Id(location2Id);
        resetChangedOnNotNull();
    }
}
