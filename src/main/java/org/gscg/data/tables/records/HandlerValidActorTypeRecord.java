/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables.records;


import org.gscg.data.tables.HandlerValidActorType;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HandlerValidActorTypeRecord extends UpdatableRecordImpl<HandlerValidActorTypeRecord> implements Record3<Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>gscg.handler_valid_actor_type.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>gscg.handler_valid_actor_type.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>gscg.handler_valid_actor_type.handler_id</code>.
     */
    public void setHandlerId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>gscg.handler_valid_actor_type.handler_id</code>.
     */
    public Integer getHandlerId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>gscg.handler_valid_actor_type.actor_type_id</code>.
     */
    public void setActorTypeId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>gscg.handler_valid_actor_type.actor_type_id</code>.
     */
    public Integer getActorTypeId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE.ID;
    }

    @Override
    public Field<Integer> field2() {
        return HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE.HANDLER_ID;
    }

    @Override
    public Field<Integer> field3() {
        return HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE.ACTOR_TYPE_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getHandlerId();
    }

    @Override
    public Integer component3() {
        return getActorTypeId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getHandlerId();
    }

    @Override
    public Integer value3() {
        return getActorTypeId();
    }

    @Override
    public HandlerValidActorTypeRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public HandlerValidActorTypeRecord value2(Integer value) {
        setHandlerId(value);
        return this;
    }

    @Override
    public HandlerValidActorTypeRecord value3(Integer value) {
        setActorTypeId(value);
        return this;
    }

    @Override
    public HandlerValidActorTypeRecord values(Integer value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HandlerValidActorTypeRecord
     */
    public HandlerValidActorTypeRecord() {
        super(HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE);
    }

    /**
     * Create a detached, initialised HandlerValidActorTypeRecord
     */
    public HandlerValidActorTypeRecord(Integer id, Integer handlerId, Integer actorTypeId) {
        super(HandlerValidActorType.HANDLER_VALID_ACTOR_TYPE);

        setId(id);
        setHandlerId(handlerId);
        setActorTypeId(actorTypeId);
        resetChangedOnNotNull();
    }
}
