/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables.records;


import org.gscg.data.tables.ActorValue;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActorValueRecord extends UpdatableRecordImpl<ActorValueRecord> implements Record4<Integer, String, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>gscg.actor_value.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>gscg.actor_value.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>gscg.actor_value.value</code>.
     */
    public void setValue(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>gscg.actor_value.value</code>.
     */
    public String getValue() {
        return (String) get(1);
    }

    /**
     * Setter for <code>gscg.actor_value.actor_parameter_id</code>.
     */
    public void setActorParameterId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>gscg.actor_value.actor_parameter_id</code>.
     */
    public Integer getActorParameterId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>gscg.actor_value.actor_id</code>.
     */
    public void setActorId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>gscg.actor_value.actor_id</code>.
     */
    public Integer getActorId() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return ActorValue.ACTOR_VALUE.ID;
    }

    @Override
    public Field<String> field2() {
        return ActorValue.ACTOR_VALUE.VALUE;
    }

    @Override
    public Field<Integer> field3() {
        return ActorValue.ACTOR_VALUE.ACTOR_PARAMETER_ID;
    }

    @Override
    public Field<Integer> field4() {
        return ActorValue.ACTOR_VALUE.ACTOR_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getValue();
    }

    @Override
    public Integer component3() {
        return getActorParameterId();
    }

    @Override
    public Integer component4() {
        return getActorId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getValue();
    }

    @Override
    public Integer value3() {
        return getActorParameterId();
    }

    @Override
    public Integer value4() {
        return getActorId();
    }

    @Override
    public ActorValueRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ActorValueRecord value2(String value) {
        setValue(value);
        return this;
    }

    @Override
    public ActorValueRecord value3(Integer value) {
        setActorParameterId(value);
        return this;
    }

    @Override
    public ActorValueRecord value4(Integer value) {
        setActorId(value);
        return this;
    }

    @Override
    public ActorValueRecord values(Integer value1, String value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ActorValueRecord
     */
    public ActorValueRecord() {
        super(ActorValue.ACTOR_VALUE);
    }

    /**
     * Create a detached, initialised ActorValueRecord
     */
    public ActorValueRecord(Integer id, String value, Integer actorParameterId, Integer actorId) {
        super(ActorValue.ACTOR_VALUE);

        setId(id);
        setValue(value);
        setActorParameterId(actorParameterId);
        setActorId(actorId);
        resetChangedOnNotNull();
    }
}
