/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables.records;


import java.time.LocalDateTime;

import org.gscg.data.tables.TriggerInterval;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TriggerIntervalRecord extends UpdatableRecordImpl<TriggerIntervalRecord> implements Record9<Integer, String, LocalDateTime, LocalDateTime, Double, Double, String, Byte, Byte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>gscg.trigger_interval.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>gscg.trigger_interval.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>gscg.trigger_interval.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>gscg.trigger_interval.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>gscg.trigger_interval.timestamp_datetime_start</code>.
     */
    public void setTimestampDatetimeStart(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>gscg.trigger_interval.timestamp_datetime_start</code>.
     */
    public LocalDateTime getTimestampDatetimeStart() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>gscg.trigger_interval.timestamp_datetime_until</code>.
     */
    public void setTimestampDatetimeUntil(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>gscg.trigger_interval.timestamp_datetime_until</code>.
     */
    public LocalDateTime getTimestampDatetimeUntil() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>gscg.trigger_interval.timestamp_gametime_start</code>.
     */
    public void setTimestampGametimeStart(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>gscg.trigger_interval.timestamp_gametime_start</code>.
     */
    public Double getTimestampGametimeStart() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>gscg.trigger_interval.timestamp_gametime_until</code>.
     */
    public void setTimestampGametimeUntil(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>gscg.trigger_interval.timestamp_gametime_until</code>.
     */
    public Double getTimestampGametimeUntil() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>gscg.trigger_interval.timestamp_unit</code>.
     */
    public void setTimestampUnit(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>gscg.trigger_interval.timestamp_unit</code>.
     */
    public String getTimestampUnit() {
        return (String) get(6);
    }

    /**
     * Setter for <code>gscg.trigger_interval.facilitator_trigger</code>.
     */
    public void setFacilitatorTrigger(Byte value) {
        set(7, value);
    }

    /**
     * Getter for <code>gscg.trigger_interval.facilitator_trigger</code>.
     */
    public Byte getFacilitatorTrigger() {
        return (Byte) get(7);
    }

    /**
     * Setter for <code>gscg.trigger_interval.trigger_once</code>.
     */
    public void setTriggerOnce(Byte value) {
        set(8, value);
    }

    /**
     * Getter for <code>gscg.trigger_interval.trigger_once</code>.
     */
    public Byte getTriggerOnce() {
        return (Byte) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, LocalDateTime, LocalDateTime, Double, Double, String, Byte, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Integer, String, LocalDateTime, LocalDateTime, Double, Double, String, Byte, Byte> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return TriggerInterval.TRIGGER_INTERVAL.ID;
    }

    @Override
    public Field<String> field2() {
        return TriggerInterval.TRIGGER_INTERVAL.NAME;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return TriggerInterval.TRIGGER_INTERVAL.TIMESTAMP_DATETIME_START;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return TriggerInterval.TRIGGER_INTERVAL.TIMESTAMP_DATETIME_UNTIL;
    }

    @Override
    public Field<Double> field5() {
        return TriggerInterval.TRIGGER_INTERVAL.TIMESTAMP_GAMETIME_START;
    }

    @Override
    public Field<Double> field6() {
        return TriggerInterval.TRIGGER_INTERVAL.TIMESTAMP_GAMETIME_UNTIL;
    }

    @Override
    public Field<String> field7() {
        return TriggerInterval.TRIGGER_INTERVAL.TIMESTAMP_UNIT;
    }

    @Override
    public Field<Byte> field8() {
        return TriggerInterval.TRIGGER_INTERVAL.FACILITATOR_TRIGGER;
    }

    @Override
    public Field<Byte> field9() {
        return TriggerInterval.TRIGGER_INTERVAL.TRIGGER_ONCE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public LocalDateTime component3() {
        return getTimestampDatetimeStart();
    }

    @Override
    public LocalDateTime component4() {
        return getTimestampDatetimeUntil();
    }

    @Override
    public Double component5() {
        return getTimestampGametimeStart();
    }

    @Override
    public Double component6() {
        return getTimestampGametimeUntil();
    }

    @Override
    public String component7() {
        return getTimestampUnit();
    }

    @Override
    public Byte component8() {
        return getFacilitatorTrigger();
    }

    @Override
    public Byte component9() {
        return getTriggerOnce();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public LocalDateTime value3() {
        return getTimestampDatetimeStart();
    }

    @Override
    public LocalDateTime value4() {
        return getTimestampDatetimeUntil();
    }

    @Override
    public Double value5() {
        return getTimestampGametimeStart();
    }

    @Override
    public Double value6() {
        return getTimestampGametimeUntil();
    }

    @Override
    public String value7() {
        return getTimestampUnit();
    }

    @Override
    public Byte value8() {
        return getFacilitatorTrigger();
    }

    @Override
    public Byte value9() {
        return getTriggerOnce();
    }

    @Override
    public TriggerIntervalRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TriggerIntervalRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public TriggerIntervalRecord value3(LocalDateTime value) {
        setTimestampDatetimeStart(value);
        return this;
    }

    @Override
    public TriggerIntervalRecord value4(LocalDateTime value) {
        setTimestampDatetimeUntil(value);
        return this;
    }

    @Override
    public TriggerIntervalRecord value5(Double value) {
        setTimestampGametimeStart(value);
        return this;
    }

    @Override
    public TriggerIntervalRecord value6(Double value) {
        setTimestampGametimeUntil(value);
        return this;
    }

    @Override
    public TriggerIntervalRecord value7(String value) {
        setTimestampUnit(value);
        return this;
    }

    @Override
    public TriggerIntervalRecord value8(Byte value) {
        setFacilitatorTrigger(value);
        return this;
    }

    @Override
    public TriggerIntervalRecord value9(Byte value) {
        setTriggerOnce(value);
        return this;
    }

    @Override
    public TriggerIntervalRecord values(Integer value1, String value2, LocalDateTime value3, LocalDateTime value4, Double value5, Double value6, String value7, Byte value8, Byte value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TriggerIntervalRecord
     */
    public TriggerIntervalRecord() {
        super(TriggerInterval.TRIGGER_INTERVAL);
    }

    /**
     * Create a detached, initialised TriggerIntervalRecord
     */
    public TriggerIntervalRecord(Integer id, String name, LocalDateTime timestampDatetimeStart, LocalDateTime timestampDatetimeUntil, Double timestampGametimeStart, Double timestampGametimeUntil, String timestampUnit, Byte facilitatorTrigger, Byte triggerOnce) {
        super(TriggerInterval.TRIGGER_INTERVAL);

        setId(id);
        setName(name);
        setTimestampDatetimeStart(timestampDatetimeStart);
        setTimestampDatetimeUntil(timestampDatetimeUntil);
        setTimestampGametimeStart(timestampGametimeStart);
        setTimestampGametimeUntil(timestampGametimeUntil);
        setTimestampUnit(timestampUnit);
        setFacilitatorTrigger(facilitatorTrigger);
        setTriggerOnce(triggerOnce);
        resetChangedOnNotNull();
    }
}
