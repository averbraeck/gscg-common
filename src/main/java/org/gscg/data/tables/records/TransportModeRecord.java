/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables.records;


import org.gscg.data.tables.TransportMode;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransportModeRecord extends UpdatableRecordImpl<TransportModeRecord> implements Record8<Integer, String, Double, String, Double, String, Byte, Byte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>gscg.transport_mode.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>gscg.transport_mode.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>gscg.transport_mode.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>gscg.transport_mode.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>gscg.transport_mode.average_speed</code>.
     */
    public void setAverageSpeed(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>gscg.transport_mode.average_speed</code>.
     */
    public Double getAverageSpeed() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>gscg.transport_mode.speed_unit</code>.
     */
    public void setSpeedUnit(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>gscg.transport_mode.speed_unit</code>.
     */
    public String getSpeedUnit() {
        return (String) get(3);
    }

    /**
     * Setter for <code>gscg.transport_mode.average_handling_time</code>.
     */
    public void setAverageHandlingTime(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>gscg.transport_mode.average_handling_time</code>.
     */
    public Double getAverageHandlingTime() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>gscg.transport_mode.handling_time_unit</code>.
     */
    public void setHandlingTimeUnit(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>gscg.transport_mode.handling_time_unit</code>.
     */
    public String getHandlingTimeUnit() {
        return (String) get(5);
    }

    /**
     * Setter for <code>gscg.transport_mode.continental</code>.
     */
    public void setContinental(Byte value) {
        set(6, value);
    }

    /**
     * Getter for <code>gscg.transport_mode.continental</code>.
     */
    public Byte getContinental() {
        return (Byte) get(6);
    }

    /**
     * Setter for <code>gscg.transport_mode.intercontinental</code>.
     */
    public void setIntercontinental(Byte value) {
        set(7, value);
    }

    /**
     * Getter for <code>gscg.transport_mode.intercontinental</code>.
     */
    public Byte getIntercontinental() {
        return (Byte) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Double, String, Double, String, Byte, Byte> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, String, Double, String, Double, String, Byte, Byte> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return TransportMode.TRANSPORT_MODE.ID;
    }

    @Override
    public Field<String> field2() {
        return TransportMode.TRANSPORT_MODE.NAME;
    }

    @Override
    public Field<Double> field3() {
        return TransportMode.TRANSPORT_MODE.AVERAGE_SPEED;
    }

    @Override
    public Field<String> field4() {
        return TransportMode.TRANSPORT_MODE.SPEED_UNIT;
    }

    @Override
    public Field<Double> field5() {
        return TransportMode.TRANSPORT_MODE.AVERAGE_HANDLING_TIME;
    }

    @Override
    public Field<String> field6() {
        return TransportMode.TRANSPORT_MODE.HANDLING_TIME_UNIT;
    }

    @Override
    public Field<Byte> field7() {
        return TransportMode.TRANSPORT_MODE.CONTINENTAL;
    }

    @Override
    public Field<Byte> field8() {
        return TransportMode.TRANSPORT_MODE.INTERCONTINENTAL;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Double component3() {
        return getAverageSpeed();
    }

    @Override
    public String component4() {
        return getSpeedUnit();
    }

    @Override
    public Double component5() {
        return getAverageHandlingTime();
    }

    @Override
    public String component6() {
        return getHandlingTimeUnit();
    }

    @Override
    public Byte component7() {
        return getContinental();
    }

    @Override
    public Byte component8() {
        return getIntercontinental();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Double value3() {
        return getAverageSpeed();
    }

    @Override
    public String value4() {
        return getSpeedUnit();
    }

    @Override
    public Double value5() {
        return getAverageHandlingTime();
    }

    @Override
    public String value6() {
        return getHandlingTimeUnit();
    }

    @Override
    public Byte value7() {
        return getContinental();
    }

    @Override
    public Byte value8() {
        return getIntercontinental();
    }

    @Override
    public TransportModeRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TransportModeRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public TransportModeRecord value3(Double value) {
        setAverageSpeed(value);
        return this;
    }

    @Override
    public TransportModeRecord value4(String value) {
        setSpeedUnit(value);
        return this;
    }

    @Override
    public TransportModeRecord value5(Double value) {
        setAverageHandlingTime(value);
        return this;
    }

    @Override
    public TransportModeRecord value6(String value) {
        setHandlingTimeUnit(value);
        return this;
    }

    @Override
    public TransportModeRecord value7(Byte value) {
        setContinental(value);
        return this;
    }

    @Override
    public TransportModeRecord value8(Byte value) {
        setIntercontinental(value);
        return this;
    }

    @Override
    public TransportModeRecord values(Integer value1, String value2, Double value3, String value4, Double value5, String value6, Byte value7, Byte value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransportModeRecord
     */
    public TransportModeRecord() {
        super(TransportMode.TRANSPORT_MODE);
    }

    /**
     * Create a detached, initialised TransportModeRecord
     */
    public TransportModeRecord(Integer id, String name, Double averageSpeed, String speedUnit, Double averageHandlingTime, String handlingTimeUnit, Byte continental, Byte intercontinental) {
        super(TransportMode.TRANSPORT_MODE);

        setId(id);
        setName(name);
        setAverageSpeed(averageSpeed);
        setSpeedUnit(speedUnit);
        setAverageHandlingTime(averageHandlingTime);
        setHandlingTimeUnit(handlingTimeUnit);
        setContinental(continental);
        setIntercontinental(intercontinental);
        resetChangedOnNotNull();
    }
}
