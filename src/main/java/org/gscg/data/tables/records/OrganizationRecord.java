/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables.records;


import org.gscg.data.tables.Organization;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganizationRecord extends UpdatableRecordImpl<OrganizationRecord> implements Record4<Integer, String, String, byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>gscg.organization.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>gscg.organization.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>gscg.organization.code</code>.
     */
    public void setCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>gscg.organization.code</code>.
     */
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>gscg.organization.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>gscg.organization.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>gscg.organization.logo</code>.
     */
    public void setLogo(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>gscg.organization.logo</code>.
     */
    public byte[] getLogo() {
        return (byte[]) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, byte[]> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Organization.ORGANIZATION.ID;
    }

    @Override
    public Field<String> field2() {
        return Organization.ORGANIZATION.CODE;
    }

    @Override
    public Field<String> field3() {
        return Organization.ORGANIZATION.NAME;
    }

    @Override
    public Field<byte[]> field4() {
        return Organization.ORGANIZATION.LOGO;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCode();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public byte[] component4() {
        return getLogo();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCode();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public byte[] value4() {
        return getLogo();
    }

    @Override
    public OrganizationRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public OrganizationRecord value2(String value) {
        setCode(value);
        return this;
    }

    @Override
    public OrganizationRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public OrganizationRecord value4(byte[] value) {
        setLogo(value);
        return this;
    }

    @Override
    public OrganizationRecord values(Integer value1, String value2, String value3, byte[] value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrganizationRecord
     */
    public OrganizationRecord() {
        super(Organization.ORGANIZATION);
    }

    /**
     * Create a detached, initialised OrganizationRecord
     */
    public OrganizationRecord(Integer id, String code, String name, byte[] logo) {
        super(Organization.ORGANIZATION);

        setId(id);
        setCode(code);
        setName(name);
        setLogo(logo);
        resetChangedOnNotNull();
    }
}
