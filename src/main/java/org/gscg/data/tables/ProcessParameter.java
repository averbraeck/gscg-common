/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.ProcessParameterRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProcessParameter extends TableImpl<ProcessParameterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.process_parameter</code>
     */
    public static final ProcessParameter PROCESS_PARAMETER = new ProcessParameter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcessParameterRecord> getRecordType() {
        return ProcessParameterRecord.class;
    }

    /**
     * The column <code>gscg.process_parameter.id</code>.
     */
    public final TableField<ProcessParameterRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.process_parameter.name</code>.
     */
    public final TableField<ProcessParameterRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.process_parameter.default_value</code>.
     */
    public final TableField<ProcessParameterRecord, String> DEFAULT_VALUE = createField(DSL.name("default_value"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gscg.process_parameter.parameter_type_id</code>.
     */
    public final TableField<ProcessParameterRecord, Integer> PARAMETER_TYPE_ID = createField(DSL.name("parameter_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.process_parameter.process_type_id</code>.
     */
    public final TableField<ProcessParameterRecord, Integer> PROCESS_TYPE_ID = createField(DSL.name("process_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private ProcessParameter(Name alias, Table<ProcessParameterRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProcessParameter(Name alias, Table<ProcessParameterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.process_parameter</code> table reference
     */
    public ProcessParameter(String alias) {
        this(DSL.name(alias), PROCESS_PARAMETER);
    }

    /**
     * Create an aliased <code>gscg.process_parameter</code> table reference
     */
    public ProcessParameter(Name alias) {
        this(alias, PROCESS_PARAMETER);
    }

    /**
     * Create a <code>gscg.process_parameter</code> table reference
     */
    public ProcessParameter() {
        this(DSL.name("process_parameter"), null);
    }

    public <O extends Record> ProcessParameter(Table<O> child, ForeignKey<O, ProcessParameterRecord> key) {
        super(child, key, PROCESS_PARAMETER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROCESS_PARAMETER_FK_PARAMETER_PARAMETER_TYPE1_IDX, Indexes.PROCESS_PARAMETER_FK_PROCESS_PARAMETER_PROCESS_TYPE1_IDX);
    }

    @Override
    public Identity<ProcessParameterRecord, Integer> getIdentity() {
        return (Identity<ProcessParameterRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProcessParameterRecord> getPrimaryKey() {
        return Keys.KEY_PROCESS_PARAMETER_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProcessParameterRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PROCESS_PARAMETER_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ProcessParameterRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PARAMETER_PARAMETER_TYPE100, Keys.FK_PROCESS_PARAMETER_PROCESS_TYPE1);
    }

    private transient ParameterType _parameterType;
    private transient ProcessType _processType;

    /**
     * Get the implicit join path to the <code>gscg.parameter_type</code> table.
     */
    public ParameterType parameterType() {
        if (_parameterType == null)
            _parameterType = new ParameterType(this, Keys.FK_PARAMETER_PARAMETER_TYPE100);

        return _parameterType;
    }

    /**
     * Get the implicit join path to the <code>gscg.process_type</code> table.
     */
    public ProcessType processType() {
        if (_processType == null)
            _processType = new ProcessType(this, Keys.FK_PROCESS_PARAMETER_PROCESS_TYPE1);

        return _processType;
    }

    @Override
    public ProcessParameter as(String alias) {
        return new ProcessParameter(DSL.name(alias), this);
    }

    @Override
    public ProcessParameter as(Name alias) {
        return new ProcessParameter(alias, this);
    }

    @Override
    public ProcessParameter as(Table<?> alias) {
        return new ProcessParameter(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessParameter rename(String name) {
        return new ProcessParameter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessParameter rename(Name name) {
        return new ProcessParameter(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessParameter rename(Table<?> name) {
        return new ProcessParameter(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
