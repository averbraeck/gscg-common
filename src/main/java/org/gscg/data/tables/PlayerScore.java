/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.PlayerScoreRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerScore extends TableImpl<PlayerScoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.player_score</code>
     */
    public static final PlayerScore PLAYER_SCORE = new PlayerScore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerScoreRecord> getRecordType() {
        return PlayerScoreRecord.class;
    }

    /**
     * The column <code>gscg.player_score.id</code>.
     */
    public final TableField<PlayerScoreRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.player_score.game_time</code>.
     */
    public final TableField<PlayerScoreRecord, LocalDateTime> GAME_TIME = createField(DSL.name("game_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.player_score.wall_time</code>.
     */
    public final TableField<PlayerScoreRecord, LocalDateTime> WALL_TIME = createField(DSL.name("wall_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gscg.player_score.value</code>.
     */
    public final TableField<PlayerScoreRecord, Double> VALUE = createField(DSL.name("value"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>gscg.player_score.player_id</code>.
     */
    public final TableField<PlayerScoreRecord, Integer> PLAYER_ID = createField(DSL.name("player_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.player_score.goal_id</code>.
     */
    public final TableField<PlayerScoreRecord, Integer> GOAL_ID = createField(DSL.name("goal_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PlayerScore(Name alias, Table<PlayerScoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlayerScore(Name alias, Table<PlayerScoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.player_score</code> table reference
     */
    public PlayerScore(String alias) {
        this(DSL.name(alias), PLAYER_SCORE);
    }

    /**
     * Create an aliased <code>gscg.player_score</code> table reference
     */
    public PlayerScore(Name alias) {
        this(alias, PLAYER_SCORE);
    }

    /**
     * Create a <code>gscg.player_score</code> table reference
     */
    public PlayerScore() {
        this(DSL.name("player_score"), null);
    }

    public <O extends Record> PlayerScore(Table<O> child, ForeignKey<O, PlayerScoreRecord> key) {
        super(child, key, PLAYER_SCORE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PLAYER_SCORE_FK_PLAYER_SCORE_GOAL1_IDX, Indexes.PLAYER_SCORE_FK_PLAYER_SCORE_PLAYER1_IDX);
    }

    @Override
    public Identity<PlayerScoreRecord, Integer> getIdentity() {
        return (Identity<PlayerScoreRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlayerScoreRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_SCORE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlayerScoreRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PLAYER_SCORE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<PlayerScoreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PLAYER_SCORE_PLAYER1, Keys.FK_PLAYER_SCORE_GOAL1);
    }

    private transient Player _player;
    private transient Goal _goal;

    /**
     * Get the implicit join path to the <code>gscg.player</code> table.
     */
    public Player player() {
        if (_player == null)
            _player = new Player(this, Keys.FK_PLAYER_SCORE_PLAYER1);

        return _player;
    }

    /**
     * Get the implicit join path to the <code>gscg.goal</code> table.
     */
    public Goal goal() {
        if (_goal == null)
            _goal = new Goal(this, Keys.FK_PLAYER_SCORE_GOAL1);

        return _goal;
    }

    @Override
    public PlayerScore as(String alias) {
        return new PlayerScore(DSL.name(alias), this);
    }

    @Override
    public PlayerScore as(Name alias) {
        return new PlayerScore(alias, this);
    }

    @Override
    public PlayerScore as(Table<?> alias) {
        return new PlayerScore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerScore rename(String name) {
        return new PlayerScore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerScore rename(Name name) {
        return new PlayerScore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerScore rename(Table<?> name) {
        return new PlayerScore(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, LocalDateTime, LocalDateTime, Double, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super Double, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super Double, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
