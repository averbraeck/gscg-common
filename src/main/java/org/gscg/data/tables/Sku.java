/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.SkuRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sku extends TableImpl<SkuRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.sku</code>
     */
    public static final Sku SKU = new Sku();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SkuRecord> getRecordType() {
        return SkuRecord.class;
    }

    /**
     * The column <code>gscg.sku.id</code>.
     */
    public final TableField<SkuRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.sku.name</code>.
     */
    public final TableField<SkuRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.sku.max_volume_m3</code>.
     */
    public final TableField<SkuRecord, Double> MAX_VOLUME_M3 = createField(DSL.name("max_volume_m3"), SQLDataType.DOUBLE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>gscg.sku.max_weight_kg</code>.
     */
    public final TableField<SkuRecord, Double> MAX_WEIGHT_KG = createField(DSL.name("max_weight_kg"), SQLDataType.DOUBLE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DOUBLE)), this, "");

    private Sku(Name alias, Table<SkuRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sku(Name alias, Table<SkuRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.sku</code> table reference
     */
    public Sku(String alias) {
        this(DSL.name(alias), SKU);
    }

    /**
     * Create an aliased <code>gscg.sku</code> table reference
     */
    public Sku(Name alias) {
        this(alias, SKU);
    }

    /**
     * Create a <code>gscg.sku</code> table reference
     */
    public Sku() {
        this(DSL.name("sku"), null);
    }

    public <O extends Record> Sku(Table<O> child, ForeignKey<O, SkuRecord> key) {
        super(child, key, SKU);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public Identity<SkuRecord, Integer> getIdentity() {
        return (Identity<SkuRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SkuRecord> getPrimaryKey() {
        return Keys.KEY_SKU_PRIMARY;
    }

    @Override
    public List<UniqueKey<SkuRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SKU_ID_UNIQUE);
    }

    @Override
    public Sku as(String alias) {
        return new Sku(DSL.name(alias), this);
    }

    @Override
    public Sku as(Name alias) {
        return new Sku(alias, this);
    }

    @Override
    public Sku as(Table<?> alias) {
        return new Sku(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sku rename(String name) {
        return new Sku(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sku rename(Name name) {
        return new Sku(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sku rename(Table<?> name) {
        return new Sku(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Double, Double> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
