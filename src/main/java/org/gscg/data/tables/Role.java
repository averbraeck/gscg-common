/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.RoleRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Role extends TableImpl<RoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.role</code>
     */
    public static final Role ROLE = new Role();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoleRecord> getRecordType() {
        return RoleRecord.class;
    }

    /**
     * The column <code>gscg.role.id</code>.
     */
    public final TableField<RoleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.role.role_type_id</code>.
     */
    public final TableField<RoleRecord, Integer> ROLE_TYPE_ID = createField(DSL.name("role_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.role.content_receiver_id</code>.
     */
    public final TableField<RoleRecord, Integer> CONTENT_RECEIVER_ID = createField(DSL.name("content_receiver_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.role.actor_id</code>.
     */
    public final TableField<RoleRecord, Integer> ACTOR_ID = createField(DSL.name("actor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Role(Name alias, Table<RoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Role(Name alias, Table<RoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.role</code> table reference
     */
    public Role(String alias) {
        this(DSL.name(alias), ROLE);
    }

    /**
     * Create an aliased <code>gscg.role</code> table reference
     */
    public Role(Name alias) {
        this(alias, ROLE);
    }

    /**
     * Create a <code>gscg.role</code> table reference
     */
    public Role() {
        this(DSL.name("role"), null);
    }

    public <O extends Record> Role(Table<O> child, ForeignKey<O, RoleRecord> key) {
        super(child, key, ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ROLE_FK_ROLE_ACTOR1_IDX, Indexes.ROLE_FK_ROLE_CONTENT_RECEIVER1_IDX, Indexes.ROLE_FK_ROLE_ROLE_TYPE1_IDX);
    }

    @Override
    public Identity<RoleRecord, Integer> getIdentity() {
        return (Identity<RoleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RoleRecord> getPrimaryKey() {
        return Keys.KEY_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<RoleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ROLE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<RoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ROLE_ROLE_TYPE1, Keys.FK_ROLE_CONTENT_RECEIVER1, Keys.FK_ROLE_ACTOR1);
    }

    private transient RoleType _roleType;
    private transient ContentReceiver _contentReceiver;
    private transient Actor _actor;

    /**
     * Get the implicit join path to the <code>gscg.role_type</code> table.
     */
    public RoleType roleType() {
        if (_roleType == null)
            _roleType = new RoleType(this, Keys.FK_ROLE_ROLE_TYPE1);

        return _roleType;
    }

    /**
     * Get the implicit join path to the <code>gscg.content_receiver</code>
     * table.
     */
    public ContentReceiver contentReceiver() {
        if (_contentReceiver == null)
            _contentReceiver = new ContentReceiver(this, Keys.FK_ROLE_CONTENT_RECEIVER1);

        return _contentReceiver;
    }

    /**
     * Get the implicit join path to the <code>gscg.actor</code> table.
     */
    public Actor actor() {
        if (_actor == null)
            _actor = new Actor(this, Keys.FK_ROLE_ACTOR1);

        return _actor;
    }

    @Override
    public Role as(String alias) {
        return new Role(DSL.name(alias), this);
    }

    @Override
    public Role as(Name alias) {
        return new Role(alias, this);
    }

    @Override
    public Role as(Table<?> alias) {
        return new Role(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Role rename(String name) {
        return new Role(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Role rename(Name name) {
        return new Role(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Role rename(Table<?> name) {
        return new Role(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
