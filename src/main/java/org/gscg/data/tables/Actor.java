/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.ActorRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Actor extends TableImpl<ActorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.actor</code>
     */
    public static final Actor ACTOR = new Actor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActorRecord> getRecordType() {
        return ActorRecord.class;
    }

    /**
     * The column <code>gscg.actor.id</code>.
     */
    public final TableField<ActorRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.actor.name</code>.
     */
    public final TableField<ActorRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.actor.type</code>.
     */
    public final TableField<ActorRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.actor.game_version_id</code>.
     */
    public final TableField<ActorRecord, Integer> GAME_VERSION_ID = createField(DSL.name("game_version_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.actor.actor_type_id</code>.
     */
    public final TableField<ActorRecord, Integer> ACTOR_TYPE_ID = createField(DSL.name("actor_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.actor.location_id</code>.
     */
    public final TableField<ActorRecord, Integer> LOCATION_ID = createField(DSL.name("location_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Actor(Name alias, Table<ActorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Actor(Name alias, Table<ActorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.actor</code> table reference
     */
    public Actor(String alias) {
        this(DSL.name(alias), ACTOR);
    }

    /**
     * Create an aliased <code>gscg.actor</code> table reference
     */
    public Actor(Name alias) {
        this(alias, ACTOR);
    }

    /**
     * Create a <code>gscg.actor</code> table reference
     */
    public Actor() {
        this(DSL.name("actor"), null);
    }

    public <O extends Record> Actor(Table<O> child, ForeignKey<O, ActorRecord> key) {
        super(child, key, ACTOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACTOR_FK_ACTOR_ACTOR_TYPE1_IDX, Indexes.ACTOR_FK_ACTOR_GAME_VERSION1_IDX, Indexes.ACTOR_FK_ACTOR_LOCATION1_IDX);
    }

    @Override
    public Identity<ActorRecord, Integer> getIdentity() {
        return (Identity<ActorRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ActorRecord> getPrimaryKey() {
        return Keys.KEY_ACTOR_PRIMARY;
    }

    @Override
    public List<UniqueKey<ActorRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ACTOR_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ActorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ACTOR_GAME_VERSION1, Keys.FK_ACTOR_ACTOR_TYPE1, Keys.FK_ACTOR_LOCATION1);
    }

    private transient GameVersion _gameVersion;
    private transient ActorType _actorType;
    private transient Location _location;

    /**
     * Get the implicit join path to the <code>gscg.game_version</code> table.
     */
    public GameVersion gameVersion() {
        if (_gameVersion == null)
            _gameVersion = new GameVersion(this, Keys.FK_ACTOR_GAME_VERSION1);

        return _gameVersion;
    }

    /**
     * Get the implicit join path to the <code>gscg.actor_type</code> table.
     */
    public ActorType actorType() {
        if (_actorType == null)
            _actorType = new ActorType(this, Keys.FK_ACTOR_ACTOR_TYPE1);

        return _actorType;
    }

    /**
     * Get the implicit join path to the <code>gscg.location</code> table.
     */
    public Location location() {
        if (_location == null)
            _location = new Location(this, Keys.FK_ACTOR_LOCATION1);

        return _location;
    }

    @Override
    public Actor as(String alias) {
        return new Actor(DSL.name(alias), this);
    }

    @Override
    public Actor as(Name alias) {
        return new Actor(alias, this);
    }

    @Override
    public Actor as(Table<?> alias) {
        return new Actor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Actor rename(String name) {
        return new Actor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Actor rename(Name name) {
        return new Actor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Actor rename(Table<?> name) {
        return new Actor(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, Integer, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
