/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.ProcessRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Process extends TableImpl<ProcessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.process</code>
     */
    public static final Process PROCESS = new Process();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcessRecord> getRecordType() {
        return ProcessRecord.class;
    }

    /**
     * The column <code>gscg.process.id</code>.
     */
    public final TableField<ProcessRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.process.name</code>.
     */
    public final TableField<ProcessRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.process.process_type_id</code>.
     */
    public final TableField<ProcessRecord, Integer> PROCESS_TYPE_ID = createField(DSL.name("process_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.process.role_id</code>.
     */
    public final TableField<ProcessRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Process(Name alias, Table<ProcessRecord> aliased) {
        this(alias, aliased, null);
    }

    private Process(Name alias, Table<ProcessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.process</code> table reference
     */
    public Process(String alias) {
        this(DSL.name(alias), PROCESS);
    }

    /**
     * Create an aliased <code>gscg.process</code> table reference
     */
    public Process(Name alias) {
        this(alias, PROCESS);
    }

    /**
     * Create a <code>gscg.process</code> table reference
     */
    public Process() {
        this(DSL.name("process"), null);
    }

    public <O extends Record> Process(Table<O> child, ForeignKey<O, ProcessRecord> key) {
        super(child, key, PROCESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROCESS_FK_PROCESS_PROCESS_TYPE1_IDX, Indexes.PROCESS_FK_PROCESS_ROLE1_IDX);
    }

    @Override
    public Identity<ProcessRecord, Integer> getIdentity() {
        return (Identity<ProcessRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProcessRecord> getPrimaryKey() {
        return Keys.KEY_PROCESS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProcessRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PROCESS_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ProcessRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PROCESS_PROCESS_TYPE1, Keys.FK_PROCESS_ROLE1);
    }

    private transient ProcessType _processType;
    private transient Role _role;

    /**
     * Get the implicit join path to the <code>gscg.process_type</code> table.
     */
    public ProcessType processType() {
        if (_processType == null)
            _processType = new ProcessType(this, Keys.FK_PROCESS_PROCESS_TYPE1);

        return _processType;
    }

    /**
     * Get the implicit join path to the <code>gscg.role</code> table.
     */
    public Role role() {
        if (_role == null)
            _role = new Role(this, Keys.FK_PROCESS_ROLE1);

        return _role;
    }

    @Override
    public Process as(String alias) {
        return new Process(DSL.name(alias), this);
    }

    @Override
    public Process as(Name alias) {
        return new Process(alias, this);
    }

    @Override
    public Process as(Table<?> alias) {
        return new Process(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Process rename(String name) {
        return new Process(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Process rename(Name name) {
        return new Process(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Process rename(Table<?> name) {
        return new Process(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
