/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.ProductRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Product extends TableImpl<ProductRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.product</code>
     */
    public static final Product PRODUCT = new Product();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductRecord> getRecordType() {
        return ProductRecord.class;
    }

    /**
     * The column <code>gscg.product.id</code>.
     */
    public final TableField<ProductRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.product.name</code>.
     */
    public final TableField<ProductRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.product.average_sku_volume</code>.
     */
    public final TableField<ProductRecord, Double> AVERAGE_SKU_VOLUME = createField(DSL.name("average_sku_volume"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>gscg.product.sku_volume_unit</code>.
     */
    public final TableField<ProductRecord, String> SKU_VOLUME_UNIT = createField(DSL.name("sku_volume_unit"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>gscg.product.average_sku_weight</code>.
     */
    public final TableField<ProductRecord, Double> AVERAGE_SKU_WEIGHT = createField(DSL.name("average_sku_weight"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>gscg.product.sku_weight_unit</code>.
     */
    public final TableField<ProductRecord, String> SKU_WEIGHT_UNIT = createField(DSL.name("sku_weight_unit"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>gscg.product.depreciation</code>.
     */
    public final TableField<ProductRecord, Double> DEPRECIATION = createField(DSL.name("depreciation"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>gscg.product.unit_market_price</code>.
     */
    public final TableField<ProductRecord, Double> UNIT_MARKET_PRICE = createField(DSL.name("unit_market_price"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>gscg.product.price_unit</code>.
     */
    public final TableField<ProductRecord, String> PRICE_UNIT = createField(DSL.name("price_unit"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.field(DSL.raw("'USD'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.product.game_version_id</code>.
     */
    public final TableField<ProductRecord, Integer> GAME_VERSION_ID = createField(DSL.name("game_version_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.product.sku_id</code>.
     */
    public final TableField<ProductRecord, Integer> SKU_ID = createField(DSL.name("sku_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Product(Name alias, Table<ProductRecord> aliased) {
        this(alias, aliased, null);
    }

    private Product(Name alias, Table<ProductRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.product</code> table reference
     */
    public Product(String alias) {
        this(DSL.name(alias), PRODUCT);
    }

    /**
     * Create an aliased <code>gscg.product</code> table reference
     */
    public Product(Name alias) {
        this(alias, PRODUCT);
    }

    /**
     * Create a <code>gscg.product</code> table reference
     */
    public Product() {
        this(DSL.name("product"), null);
    }

    public <O extends Record> Product(Table<O> child, ForeignKey<O, ProductRecord> key) {
        super(child, key, PRODUCT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PRODUCT_FK_PRODUCT_GAME_VERSION1_IDX, Indexes.PRODUCT_FK_PRODUCT_SKU1_IDX);
    }

    @Override
    public Identity<ProductRecord, Integer> getIdentity() {
        return (Identity<ProductRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProductRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PRODUCT_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ProductRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PRODUCT_GAME_VERSION1, Keys.FK_PRODUCT_SKU1);
    }

    private transient GameVersion _gameVersion;
    private transient Sku _sku;

    /**
     * Get the implicit join path to the <code>gscg.game_version</code> table.
     */
    public GameVersion gameVersion() {
        if (_gameVersion == null)
            _gameVersion = new GameVersion(this, Keys.FK_PRODUCT_GAME_VERSION1);

        return _gameVersion;
    }

    /**
     * Get the implicit join path to the <code>gscg.sku</code> table.
     */
    public Sku sku() {
        if (_sku == null)
            _sku = new Sku(this, Keys.FK_PRODUCT_SKU1);

        return _sku;
    }

    @Override
    public Product as(String alias) {
        return new Product(DSL.name(alias), this);
    }

    @Override
    public Product as(Name alias) {
        return new Product(alias, this);
    }

    @Override
    public Product as(Table<?> alias) {
        return new Product(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(String name) {
        return new Product(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(Name name) {
        return new Product(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(Table<?> name) {
        return new Product(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, Double, String, Double, String, Double, Double, String, Integer, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Integer, ? super String, ? super Double, ? super String, ? super Double, ? super String, ? super Double, ? super Double, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Integer, ? super String, ? super Double, ? super String, ? super Double, ? super String, ? super Double, ? super Double, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
