/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.LandmassRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Landmass extends TableImpl<LandmassRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.landmass</code>
     */
    public static final Landmass LANDMASS = new Landmass();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LandmassRecord> getRecordType() {
        return LandmassRecord.class;
    }

    /**
     * The column <code>gscg.landmass.id</code>.
     */
    public final TableField<LandmassRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.landmass.name</code>.
     */
    public final TableField<LandmassRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.landmass.loc_x</code>.
     */
    public final TableField<LandmassRecord, Double> LOC_X = createField(DSL.name("loc_x"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>gscg.landmass.loc_y</code>.
     */
    public final TableField<LandmassRecord, Double> LOC_Y = createField(DSL.name("loc_y"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>gscg.landmass.truck_speed</code>.
     */
    public final TableField<LandmassRecord, Double> TRUCK_SPEED = createField(DSL.name("truck_speed"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>gscg.landmass.speed_unit</code>.
     */
    public final TableField<LandmassRecord, String> SPEED_UNIT = createField(DSL.name("speed_unit"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.field(DSL.raw("'km/h'"), SQLDataType.VARCHAR)), this, "");

    private Landmass(Name alias, Table<LandmassRecord> aliased) {
        this(alias, aliased, null);
    }

    private Landmass(Name alias, Table<LandmassRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.landmass</code> table reference
     */
    public Landmass(String alias) {
        this(DSL.name(alias), LANDMASS);
    }

    /**
     * Create an aliased <code>gscg.landmass</code> table reference
     */
    public Landmass(Name alias) {
        this(alias, LANDMASS);
    }

    /**
     * Create a <code>gscg.landmass</code> table reference
     */
    public Landmass() {
        this(DSL.name("landmass"), null);
    }

    public <O extends Record> Landmass(Table<O> child, ForeignKey<O, LandmassRecord> key) {
        super(child, key, LANDMASS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public Identity<LandmassRecord, Integer> getIdentity() {
        return (Identity<LandmassRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LandmassRecord> getPrimaryKey() {
        return Keys.KEY_LANDMASS_PRIMARY;
    }

    @Override
    public List<UniqueKey<LandmassRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_LANDMASS_ID_UNIQUE);
    }

    @Override
    public Landmass as(String alias) {
        return new Landmass(DSL.name(alias), this);
    }

    @Override
    public Landmass as(Name alias) {
        return new Landmass(alias, this);
    }

    @Override
    public Landmass as(Table<?> alias) {
        return new Landmass(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Landmass rename(String name) {
        return new Landmass(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Landmass rename(Name name) {
        return new Landmass(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Landmass rename(Table<?> name) {
        return new Landmass(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Double, Double, Double, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super Double, ? super Double, ? super Double, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super Double, ? super Double, ? super Double, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
