/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.RoleValueRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleValue extends TableImpl<RoleValueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.role_value</code>
     */
    public static final RoleValue ROLE_VALUE = new RoleValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoleValueRecord> getRecordType() {
        return RoleValueRecord.class;
    }

    /**
     * The column <code>gscg.role_value.id</code>.
     */
    public final TableField<RoleValueRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.role_value.value</code>.
     */
    public final TableField<RoleValueRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.role_value.role_parameter_id</code>.
     */
    public final TableField<RoleValueRecord, Integer> ROLE_PARAMETER_ID = createField(DSL.name("role_parameter_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.role_value.role_id</code>.
     */
    public final TableField<RoleValueRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private RoleValue(Name alias, Table<RoleValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoleValue(Name alias, Table<RoleValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.role_value</code> table reference
     */
    public RoleValue(String alias) {
        this(DSL.name(alias), ROLE_VALUE);
    }

    /**
     * Create an aliased <code>gscg.role_value</code> table reference
     */
    public RoleValue(Name alias) {
        this(alias, ROLE_VALUE);
    }

    /**
     * Create a <code>gscg.role_value</code> table reference
     */
    public RoleValue() {
        this(DSL.name("role_value"), null);
    }

    public <O extends Record> RoleValue(Table<O> child, ForeignKey<O, RoleValueRecord> key) {
        super(child, key, ROLE_VALUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ROLE_VALUE_FK_ROLE_VALUE_ROLE1_IDX, Indexes.ROLE_VALUE_FK_ROLE_VALUE_ROLE_PARAMETER1_IDX);
    }

    @Override
    public Identity<RoleValueRecord, Integer> getIdentity() {
        return (Identity<RoleValueRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RoleValueRecord> getPrimaryKey() {
        return Keys.KEY_ROLE_VALUE_PRIMARY;
    }

    @Override
    public List<UniqueKey<RoleValueRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ROLE_VALUE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<RoleValueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ROLE_VALUE_ROLE_PARAMETER1, Keys.FK_ROLE_VALUE_ROLE1);
    }

    private transient RoleParameter _roleParameter;
    private transient Role _role;

    /**
     * Get the implicit join path to the <code>gscg.role_parameter</code> table.
     */
    public RoleParameter roleParameter() {
        if (_roleParameter == null)
            _roleParameter = new RoleParameter(this, Keys.FK_ROLE_VALUE_ROLE_PARAMETER1);

        return _roleParameter;
    }

    /**
     * Get the implicit join path to the <code>gscg.role</code> table.
     */
    public Role role() {
        if (_role == null)
            _role = new Role(this, Keys.FK_ROLE_VALUE_ROLE1);

        return _role;
    }

    @Override
    public RoleValue as(String alias) {
        return new RoleValue(DSL.name(alias), this);
    }

    @Override
    public RoleValue as(Name alias) {
        return new RoleValue(alias, this);
    }

    @Override
    public RoleValue as(Table<?> alias) {
        return new RoleValue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleValue rename(String name) {
        return new RoleValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleValue rename(Name name) {
        return new RoleValue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleValue rename(Table<?> name) {
        return new RoleValue(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
