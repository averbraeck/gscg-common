/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.RoleTypeRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleType extends TableImpl<RoleTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.role_type</code>
     */
    public static final RoleType ROLE_TYPE = new RoleType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoleTypeRecord> getRecordType() {
        return RoleTypeRecord.class;
    }

    /**
     * The column <code>gscg.role_type.id</code>.
     */
    public final TableField<RoleTypeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.role_type.name</code>.
     */
    public final TableField<RoleTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.role_type.java_type</code>.
     */
    public final TableField<RoleTypeRecord, String> JAVA_TYPE = createField(DSL.name("java_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gscg.role_type.actor_type_id</code>.
     */
    public final TableField<RoleTypeRecord, Integer> ACTOR_TYPE_ID = createField(DSL.name("actor_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private RoleType(Name alias, Table<RoleTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoleType(Name alias, Table<RoleTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.role_type</code> table reference
     */
    public RoleType(String alias) {
        this(DSL.name(alias), ROLE_TYPE);
    }

    /**
     * Create an aliased <code>gscg.role_type</code> table reference
     */
    public RoleType(Name alias) {
        this(alias, ROLE_TYPE);
    }

    /**
     * Create a <code>gscg.role_type</code> table reference
     */
    public RoleType() {
        this(DSL.name("role_type"), null);
    }

    public <O extends Record> RoleType(Table<O> child, ForeignKey<O, RoleTypeRecord> key) {
        super(child, key, ROLE_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ROLE_TYPE_FK_ACTOR_ROLE_ACTOR_TYPE1_IDX);
    }

    @Override
    public Identity<RoleTypeRecord, Integer> getIdentity() {
        return (Identity<RoleTypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RoleTypeRecord> getPrimaryKey() {
        return Keys.KEY_ROLE_TYPE_PRIMARY;
    }

    @Override
    public List<UniqueKey<RoleTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ROLE_TYPE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<RoleTypeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ACTOR_ROLE_ACTOR_TYPE1);
    }

    private transient ActorType _actorType;

    /**
     * Get the implicit join path to the <code>gscg.actor_type</code> table.
     */
    public ActorType actorType() {
        if (_actorType == null)
            _actorType = new ActorType(this, Keys.FK_ACTOR_ROLE_ACTOR_TYPE1);

        return _actorType;
    }

    @Override
    public RoleType as(String alias) {
        return new RoleType(DSL.name(alias), this);
    }

    @Override
    public RoleType as(Name alias) {
        return new RoleType(alias, this);
    }

    @Override
    public RoleType as(Table<?> alias) {
        return new RoleType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleType rename(String name) {
        return new RoleType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleType rename(Name name) {
        return new RoleType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleType rename(Table<?> name) {
        return new RoleType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
