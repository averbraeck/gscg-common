/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.GameSessionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function19;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameSession extends TableImpl<GameSessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.game_session</code>
     */
    public static final GameSession GAME_SESSION = new GameSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameSessionRecord> getRecordType() {
        return GameSessionRecord.class;
    }

    /**
     * The column <code>gscg.game_session.id</code>.
     */
    public final TableField<GameSessionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.game_session.code</code>.
     */
    public final TableField<GameSessionRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>gscg.game_session.name</code>.
     */
    public final TableField<GameSessionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.game_session.description</code>.
     */
    public final TableField<GameSessionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gscg.game_session.session_status</code>.
     */
    public final TableField<GameSessionRecord, String> SESSION_STATUS = createField(DSL.name("session_status"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.game_session.play_date</code>.
     */
    public final TableField<GameSessionRecord, LocalDate> PLAY_DATE = createField(DSL.name("play_date"), SQLDataType.LOCALDATE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>gscg.game_session.valid</code>.
     */
    public final TableField<GameSessionRecord, Byte> VALID = createField(DSL.name("valid"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gscg.game_session.valid_from</code>.
     */
    public final TableField<GameSessionRecord, LocalDateTime> VALID_FROM = createField(DSL.name("valid_from"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>gscg.game_session.valid_until</code>.
     */
    public final TableField<GameSessionRecord, LocalDateTime> VALID_UNTIL = createField(DSL.name("valid_until"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>gscg.game_session.self_registration</code>.
     */
    public final TableField<GameSessionRecord, Byte> SELF_REGISTRATION = createField(DSL.name("self_registration"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gscg.game_session.password</code>.
     */
    public final TableField<GameSessionRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.game_session.salt</code>.
     */
    public final TableField<GameSessionRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.game_session.allow_strategy_choice</code>.
     */
    public final TableField<GameSessionRecord, Byte> ALLOW_STRATEGY_CHOICE = createField(DSL.name("allow_strategy_choice"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gscg.game_session.archived</code>.
     */
    public final TableField<GameSessionRecord, Byte> ARCHIVED = createField(DSL.name("archived"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gscg.game_session.briefing_page_list_id</code>.
     */
    public final TableField<GameSessionRecord, Integer> BRIEFING_PAGE_LIST_ID = createField(DSL.name("briefing_page_list_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gscg.game_session.debriefing_page_list_id</code>.
     */
    public final TableField<GameSessionRecord, Integer> DEBRIEFING_PAGE_LIST_ID = createField(DSL.name("debriefing_page_list_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gscg.game_session.allowed_strategy_list_id</code>.
     */
    public final TableField<GameSessionRecord, Integer> ALLOWED_STRATEGY_LIST_ID = createField(DSL.name("allowed_strategy_list_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gscg.game_session.game_version_id</code>.
     */
    public final TableField<GameSessionRecord, Integer> GAME_VERSION_ID = createField(DSL.name("game_version_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gscg.game_session.organization_game_id</code>.
     */
    public final TableField<GameSessionRecord, Integer> ORGANIZATION_GAME_ID = createField(DSL.name("organization_game_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GameSession(Name alias, Table<GameSessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private GameSession(Name alias, Table<GameSessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.game_session</code> table reference
     */
    public GameSession(String alias) {
        this(DSL.name(alias), GAME_SESSION);
    }

    /**
     * Create an aliased <code>gscg.game_session</code> table reference
     */
    public GameSession(Name alias) {
        this(alias, GAME_SESSION);
    }

    /**
     * Create a <code>gscg.game_session</code> table reference
     */
    public GameSession() {
        this(DSL.name("game_session"), null);
    }

    public <O extends Record> GameSession(Table<O> child, ForeignKey<O, GameSessionRecord> key) {
        super(child, key, GAME_SESSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAME_SESSION_FK_GAME_SESSION_ALLOWED_STRATEGY_LIST1_IDX, Indexes.GAME_SESSION_FK_GAME_SESSION_GAME_VERSION1_IDX, Indexes.GAME_SESSION_FK_GAME_SESSION_ORGANIZATION_GAME1_IDX, Indexes.GAME_SESSION_FK_GAME_SESSION_PAGE_LIST1_IDX, Indexes.GAME_SESSION_FK_GAME_SESSION_PAGE_LIST2_IDX);
    }

    @Override
    public Identity<GameSessionRecord, Integer> getIdentity() {
        return (Identity<GameSessionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameSessionRecord> getPrimaryKey() {
        return Keys.KEY_GAME_SESSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<GameSessionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GAME_SESSION_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GameSessionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GAME_SESSION_PAGE_LIST1, Keys.FK_GAME_SESSION_PAGE_LIST2, Keys.FK_GAME_SESSION_ALLOWED_STRATEGY_LIST1, Keys.FK_GAME_SESSION_GAME_VERSION1, Keys.FK_GAME_SESSION_ORGANIZATION_GAME1);
    }

    private transient PageList _fkGameSessionPageList1;
    private transient PageList _fkGameSessionPageList2;
    private transient AllowedStrategyList _allowedStrategyList;
    private transient GameVersion _gameVersion;
    private transient OrganizationGame _organizationGame;

    /**
     * Get the implicit join path to the <code>gscg.page_list</code> table, via
     * the <code>fk_game_session_page_list1</code> key.
     */
    public PageList fkGameSessionPageList1() {
        if (_fkGameSessionPageList1 == null)
            _fkGameSessionPageList1 = new PageList(this, Keys.FK_GAME_SESSION_PAGE_LIST1);

        return _fkGameSessionPageList1;
    }

    /**
     * Get the implicit join path to the <code>gscg.page_list</code> table, via
     * the <code>fk_game_session_page_list2</code> key.
     */
    public PageList fkGameSessionPageList2() {
        if (_fkGameSessionPageList2 == null)
            _fkGameSessionPageList2 = new PageList(this, Keys.FK_GAME_SESSION_PAGE_LIST2);

        return _fkGameSessionPageList2;
    }

    /**
     * Get the implicit join path to the <code>gscg.allowed_strategy_list</code>
     * table.
     */
    public AllowedStrategyList allowedStrategyList() {
        if (_allowedStrategyList == null)
            _allowedStrategyList = new AllowedStrategyList(this, Keys.FK_GAME_SESSION_ALLOWED_STRATEGY_LIST1);

        return _allowedStrategyList;
    }

    /**
     * Get the implicit join path to the <code>gscg.game_version</code> table.
     */
    public GameVersion gameVersion() {
        if (_gameVersion == null)
            _gameVersion = new GameVersion(this, Keys.FK_GAME_SESSION_GAME_VERSION1);

        return _gameVersion;
    }

    /**
     * Get the implicit join path to the <code>gscg.organization_game</code>
     * table.
     */
    public OrganizationGame organizationGame() {
        if (_organizationGame == null)
            _organizationGame = new OrganizationGame(this, Keys.FK_GAME_SESSION_ORGANIZATION_GAME1);

        return _organizationGame;
    }

    @Override
    public GameSession as(String alias) {
        return new GameSession(DSL.name(alias), this);
    }

    @Override
    public GameSession as(Name alias) {
        return new GameSession(alias, this);
    }

    @Override
    public GameSession as(Table<?> alias) {
        return new GameSession(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameSession rename(String name) {
        return new GameSession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameSession rename(Name name) {
        return new GameSession(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameSession rename(Table<?> name) {
        return new GameSession(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Integer, String, String, String, String, LocalDate, Byte, LocalDateTime, LocalDateTime, Byte, String, String, Byte, Byte, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? super Byte, ? super LocalDateTime, ? super LocalDateTime, ? super Byte, ? super String, ? super String, ? super Byte, ? super Byte, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? super Byte, ? super LocalDateTime, ? super LocalDateTime, ? super Byte, ? super String, ? super String, ? super Byte, ? super Byte, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
