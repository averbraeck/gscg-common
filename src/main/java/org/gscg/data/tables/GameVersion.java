/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Indexes;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.GameVersionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameVersion extends TableImpl<GameVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.game_version</code>
     */
    public static final GameVersion GAME_VERSION = new GameVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameVersionRecord> getRecordType() {
        return GameVersionRecord.class;
    }

    /**
     * The column <code>gscg.game_version.id</code>.
     */
    public final TableField<GameVersionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.game_version.code</code>.
     */
    public final TableField<GameVersionRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>gscg.game_version.name</code>.
     */
    public final TableField<GameVersionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.game_version.description</code>.
     */
    public final TableField<GameVersionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gscg.game_version.archived</code>.
     */
    public final TableField<GameVersionRecord, Byte> ARCHIVED = createField(DSL.name("archived"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gscg.game_version.briefing_page_list_id</code>.
     */
    public final TableField<GameVersionRecord, Integer> BRIEFING_PAGE_LIST_ID = createField(DSL.name("briefing_page_list_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gscg.game_version.debriefing_page_list_id</code>.
     */
    public final TableField<GameVersionRecord, Integer> DEBRIEFING_PAGE_LIST_ID = createField(DSL.name("debriefing_page_list_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gscg.game_version.allowed_strategy_list_id</code>.
     */
    public final TableField<GameVersionRecord, Integer> ALLOWED_STRATEGY_LIST_ID = createField(DSL.name("allowed_strategy_list_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gscg.game_version.goal_page_id</code>.
     */
    public final TableField<GameVersionRecord, Integer> GOAL_PAGE_ID = createField(DSL.name("goal_page_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gscg.game_version.game_id</code>.
     */
    public final TableField<GameVersionRecord, Integer> GAME_ID = createField(DSL.name("game_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GameVersion(Name alias, Table<GameVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private GameVersion(Name alias, Table<GameVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.game_version</code> table reference
     */
    public GameVersion(String alias) {
        this(DSL.name(alias), GAME_VERSION);
    }

    /**
     * Create an aliased <code>gscg.game_version</code> table reference
     */
    public GameVersion(Name alias) {
        this(alias, GAME_VERSION);
    }

    /**
     * Create a <code>gscg.game_version</code> table reference
     */
    public GameVersion() {
        this(DSL.name("game_version"), null);
    }

    public <O extends Record> GameVersion(Table<O> child, ForeignKey<O, GameVersionRecord> key) {
        super(child, key, GAME_VERSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAME_VERSION_FK_GAME_VERSION_ALLOWED_STRATEGY_LIST1_IDX, Indexes.GAME_VERSION_FK_GAME_VERSION_GAME1_IDX, Indexes.GAME_VERSION_FK_GAME_VERSION_PAGE1_IDX, Indexes.GAME_VERSION_FK_GAME_VERSION_PAGE_LIST1_IDX, Indexes.GAME_VERSION_FK_GAME_VERSION_PAGE_LIST2_IDX);
    }

    @Override
    public Identity<GameVersionRecord, Integer> getIdentity() {
        return (Identity<GameVersionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameVersionRecord> getPrimaryKey() {
        return Keys.KEY_GAME_VERSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<GameVersionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GAME_VERSION_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GameVersionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GAME_VERSION_PAGE_LIST1, Keys.FK_GAME_VERSION_PAGE_LIST2, Keys.FK_GAME_VERSION_ALLOWED_STRATEGY_LIST1, Keys.FK_GAME_VERSION_PAGE1, Keys.FK_GAME_VERSION_GAME1);
    }

    private transient PageList _fkGameVersionPageList1;
    private transient PageList _fkGameVersionPageList2;
    private transient AllowedStrategyList _allowedStrategyList;
    private transient Page _page;
    private transient Game _game;

    /**
     * Get the implicit join path to the <code>gscg.page_list</code> table, via
     * the <code>fk_game_version_page_list1</code> key.
     */
    public PageList fkGameVersionPageList1() {
        if (_fkGameVersionPageList1 == null)
            _fkGameVersionPageList1 = new PageList(this, Keys.FK_GAME_VERSION_PAGE_LIST1);

        return _fkGameVersionPageList1;
    }

    /**
     * Get the implicit join path to the <code>gscg.page_list</code> table, via
     * the <code>fk_game_version_page_list2</code> key.
     */
    public PageList fkGameVersionPageList2() {
        if (_fkGameVersionPageList2 == null)
            _fkGameVersionPageList2 = new PageList(this, Keys.FK_GAME_VERSION_PAGE_LIST2);

        return _fkGameVersionPageList2;
    }

    /**
     * Get the implicit join path to the <code>gscg.allowed_strategy_list</code>
     * table.
     */
    public AllowedStrategyList allowedStrategyList() {
        if (_allowedStrategyList == null)
            _allowedStrategyList = new AllowedStrategyList(this, Keys.FK_GAME_VERSION_ALLOWED_STRATEGY_LIST1);

        return _allowedStrategyList;
    }

    /**
     * Get the implicit join path to the <code>gscg.page</code> table.
     */
    public Page page() {
        if (_page == null)
            _page = new Page(this, Keys.FK_GAME_VERSION_PAGE1);

        return _page;
    }

    /**
     * Get the implicit join path to the <code>gscg.game</code> table.
     */
    public Game game() {
        if (_game == null)
            _game = new Game(this, Keys.FK_GAME_VERSION_GAME1);

        return _game;
    }

    @Override
    public GameVersion as(String alias) {
        return new GameVersion(DSL.name(alias), this);
    }

    @Override
    public GameVersion as(Name alias) {
        return new GameVersion(alias, this);
    }

    @Override
    public GameVersion as(Table<?> alias) {
        return new GameVersion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameVersion rename(String name) {
        return new GameVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameVersion rename(Name name) {
        return new GameVersion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameVersion rename(Table<?> name) {
        return new GameVersion(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, Byte, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super String, ? super String, ? super String, ? super Byte, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super String, ? super String, ? super String, ? super Byte, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
