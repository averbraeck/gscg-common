/*
 * This file is generated by jOOQ.
 */
package org.gscg.data.tables;


import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gscg.data.Gscg;
import org.gscg.data.Keys;
import org.gscg.data.tables.records.ContentReceiverRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function19;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContentReceiver extends TableImpl<ContentReceiverRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gscg.content_receiver</code>
     */
    public static final ContentReceiver CONTENT_RECEIVER = new ContentReceiver();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContentReceiverRecord> getRecordType() {
        return ContentReceiverRecord.class;
    }

    /**
     * The column <code>gscg.content_receiver.id</code>.
     */
    public final TableField<ContentReceiverRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gscg.content_receiver.name</code>.
     */
    public final TableField<ContentReceiverRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gscg.content_receiver.delay_time</code>.
     */
    public final TableField<ContentReceiverRecord, Double> DELAY_TIME = createField(DSL.name("delay_time"), SQLDataType.DOUBLE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>gscg.content_receiver.delay_time_dist</code>.
     */
    public final TableField<ContentReceiverRecord, String> DELAY_TIME_DIST = createField(DSL.name("delay_time_dist"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.content_receiver.delay_time_unit</code>.
     */
    public final TableField<ContentReceiverRecord, String> DELAY_TIME_UNIT = createField(DSL.name("delay_time_unit"), SQLDataType.VARCHAR(10).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_start_mo</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_START_MO = createField(DSL.name("work_hours_start_mo"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_end_mo</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_END_MO = createField(DSL.name("work_hours_end_mo"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_start_tu</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_START_TU = createField(DSL.name("work_hours_start_tu"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_end_tu</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_END_TU = createField(DSL.name("work_hours_end_tu"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_start_we</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_START_WE = createField(DSL.name("work_hours_start_we"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_end_we</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_END_WE = createField(DSL.name("work_hours_end_we"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_start_th</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_START_TH = createField(DSL.name("work_hours_start_th"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_end_th</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_END_TH = createField(DSL.name("work_hours_end_th"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_start_fr</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_START_FR = createField(DSL.name("work_hours_start_fr"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_end_fr</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_END_FR = createField(DSL.name("work_hours_end_fr"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_start_sa</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_START_SA = createField(DSL.name("work_hours_start_sa"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_end_sa</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_END_SA = createField(DSL.name("work_hours_end_sa"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_start_su</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_START_SU = createField(DSL.name("work_hours_start_su"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>gscg.content_receiver.work_hours_end_su</code>.
     */
    public final TableField<ContentReceiverRecord, LocalTime> WORK_HOURS_END_SU = createField(DSL.name("work_hours_end_su"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALTIME)), this, "");

    private ContentReceiver(Name alias, Table<ContentReceiverRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContentReceiver(Name alias, Table<ContentReceiverRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gscg.content_receiver</code> table reference
     */
    public ContentReceiver(String alias) {
        this(DSL.name(alias), CONTENT_RECEIVER);
    }

    /**
     * Create an aliased <code>gscg.content_receiver</code> table reference
     */
    public ContentReceiver(Name alias) {
        this(alias, CONTENT_RECEIVER);
    }

    /**
     * Create a <code>gscg.content_receiver</code> table reference
     */
    public ContentReceiver() {
        this(DSL.name("content_receiver"), null);
    }

    public <O extends Record> ContentReceiver(Table<O> child, ForeignKey<O, ContentReceiverRecord> key) {
        super(child, key, CONTENT_RECEIVER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gscg.GSCG;
    }

    @Override
    public Identity<ContentReceiverRecord, Integer> getIdentity() {
        return (Identity<ContentReceiverRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ContentReceiverRecord> getPrimaryKey() {
        return Keys.KEY_CONTENT_RECEIVER_PRIMARY;
    }

    @Override
    public List<UniqueKey<ContentReceiverRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CONTENT_RECEIVER_ID_UNIQUE);
    }

    @Override
    public ContentReceiver as(String alias) {
        return new ContentReceiver(DSL.name(alias), this);
    }

    @Override
    public ContentReceiver as(Name alias) {
        return new ContentReceiver(alias, this);
    }

    @Override
    public ContentReceiver as(Table<?> alias) {
        return new ContentReceiver(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContentReceiver rename(String name) {
        return new ContentReceiver(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContentReceiver rename(Name name) {
        return new ContentReceiver(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContentReceiver rename(Table<?> name) {
        return new ContentReceiver(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Integer, String, Double, String, String, LocalTime, LocalTime, LocalTime, LocalTime, LocalTime, LocalTime, LocalTime, LocalTime, LocalTime, LocalTime, LocalTime, LocalTime, LocalTime, LocalTime> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super Integer, ? super String, ? super Double, ? super String, ? super String, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super Integer, ? super String, ? super Double, ? super String, ? super String, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
